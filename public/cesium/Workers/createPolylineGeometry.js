define(["./when-ae2e0b60","./Cartesian2-38b35910","./ArcType-1275a14e","./arrayRemoveDuplicates-bdf50aa0","./Transforms-ce97037a","./Color-cab9e933","./ComponentDatatype-e44126e4","./Check-f996273c","./GeometryAttribute-f82de479","./GeometryAttributes-5ce4955a","./IndexDatatype-516320ea","./Math-5bbcea10","./PolylinePipeline-8831ea08","./VertexFormat-90d15264","./combine-276652d0","./RuntimeError-ac2797b4","./WebGLConstants-35626ea2","./EllipsoidGeodesic-0207b202","./EllipsoidRhumbLine-af7b5ebe","./IntersectionTests-ce427234","./Plane-ee0aa150"],function(z,J,j,K,Q,X,Z,e,$,ee,te,re,ae,y,t,r,a,o,n,i,l){"use strict";var oe=[];function m(e){var t=(e=z.defaultValue(e,z.defaultValue.EMPTY_OBJECT)).positions,r=e.colors,a=z.defaultValue(e.width,1),o=z.defaultValue(e.colorsPerVertex,!1),a=(this._positions=t,this._colors=r,this._width=a,this._colorsPerVertex=o,this._vertexFormat=y.VertexFormat.clone(z.defaultValue(e.vertexFormat,y.VertexFormat.DEFAULT)),this._arcType=z.defaultValue(e.arcType,j.ArcType.GEODESIC),this._granularity=z.defaultValue(e.granularity,re.CesiumMath.RADIANS_PER_DEGREE),this._ellipsoid=J.Ellipsoid.clone(z.defaultValue(e.ellipsoid,J.Ellipsoid.WGS84)),this._workerName="createPolylineGeometry",1+t.length*J.Cartesian3.packedLength);a+=z.defined(r)?1+r.length*X.Color.packedLength:1,this.packedLength=a+J.Ellipsoid.packedLength+y.VertexFormat.packedLength+4}m.pack=function(e,t,r){r=z.defaultValue(r,0);var a,o=e._positions,n=o.length;for(t[r++]=n,a=0;a<n;++a,r+=J.Cartesian3.packedLength)J.Cartesian3.pack(o[a],t,r);var i=e._colors,n=z.defined(i)?i.length:0;for(t[r++]=n,a=0;a<n;++a,r+=X.Color.packedLength)X.Color.pack(i[a],t,r);return J.Ellipsoid.pack(e._ellipsoid,t,r),r+=J.Ellipsoid.packedLength,y.VertexFormat.pack(e._vertexFormat,t,r),r+=y.VertexFormat.packedLength,t[r++]=e._width,t[r++]=e._colorsPerVertex?1:0,t[r++]=e._arcType,t[r]=e._granularity,t};var h=J.Ellipsoid.clone(J.Ellipsoid.UNIT_SPHERE),f=new y.VertexFormat,C={positions:void 0,colors:void 0,ellipsoid:h,vertexFormat:f,width:void 0,colorsPerVertex:void 0,arcType:void 0,granularity:void 0},ne=(m.unpack=function(e,t,r){t=z.defaultValue(t,0);for(var a=e[t++],o=new Array(a),n=0;n<a;++n,t+=J.Cartesian3.packedLength)o[n]=J.Cartesian3.unpack(e,t);var i=0<(a=e[t++])?new Array(a):void 0;for(n=0;n<a;++n,t+=X.Color.packedLength)i[n]=X.Color.unpack(e,t);var l=J.Ellipsoid.unpack(e,t,h),s=(t+=J.Ellipsoid.packedLength,y.VertexFormat.unpack(e,t,f)),p=(t+=y.VertexFormat.packedLength,e[t++]),c=1===e[t++],d=e[t++],u=e[t];return z.defined(r)?(r._positions=o,r._colors=i,r._ellipsoid=J.Ellipsoid.clone(l,r._ellipsoid),r._vertexFormat=y.VertexFormat.clone(s,r._vertexFormat),r._width=p,r._colorsPerVertex=c,r._arcType=d,r._granularity=u,r):(C.positions=o,C.colors=i,C.width=p,C.colorsPerVertex=c,C.arcType=d,C.granularity=u,new m(C))},new J.Cartesian3),ie=new J.Cartesian3,le=new J.Cartesian3,se=new J.Cartesian3;return m.createGeometry=function(e){var r,a,t=e._width,o=e._vertexFormat,n=e._colors,i=e._colorsPerVertex,l=e._arcType,s=e._granularity,p=e._ellipsoid,c=[],d=K.arrayRemoveDuplicates(e._positions,J.Cartesian3.equalsEpsilon,!1,c),u=(z.defined(n)&&0<c.length&&(a=c[r=0],n=n.filter(function(e,t){return(i?t!==a&&(0!==t||1!==a):t+1!==a)||(a=c[++r],!1)})),d.length);if(!(u<2||t<=0)){if(l===j.ArcType.GEODESIC||l===j.ArcType.RHUMB){var y,m=l===j.ArcType.GEODESIC?(y=re.CesiumMath.chordLength(s,p.maximumRadius),ae.PolylinePipeline.numberOfPoints):(y=s,ae.PolylinePipeline.numberOfPointsRhumbLine),e=ae.PolylinePipeline.extractHeights(d,p);if(z.defined(n)){for(var h=1,f=0;f<u-1;++f)h+=m(d[f],d[f+1],y);var C=new Array(h),v=0;for(f=0;f<u-1;++f){var I=d[f],S=d[f+1],g=n[f],_=m(I,S,y);if(i&&f<h)for(var A=function(e,t,r){var a=oe,o=(a.length=r,e.red),n=e.green,i=e.blue,l=e.alpha,s=t.red,p=t.green,c=t.blue,d=t.alpha;if(X.Color.equals(e,t))for(f=0;f<r;f++)a[f]=X.Color.clone(e);else for(var u=(s-o)/r,y=(p-n)/r,m=(c-i)/r,h=(d-l)/r,f=0;f<r;f++)a[f]=new X.Color(o+f*u,n+f*y,i+f*m,l+f*h);return a}(g,n[f+1],_),B=A.length,b=0;b<B;++b)C[v++]=A[b];else for(b=0;b<_;++b)C[v++]=X.Color.clone(g)}C[v]=X.Color.clone(n[n.length-1]),n=C,oe.length=0}d=l===j.ArcType.GEODESIC?ae.PolylinePipeline.generateCartesianArc({positions:d,minDistance:y,ellipsoid:p,height:e}):ae.PolylinePipeline.generateCartesianRhumbArc({positions:d,granularity:y,ellipsoid:p,height:e})}var E,P,U,s=4*(u=d.length)-4,N=new Float64Array(3*s),M=new Float64Array(3*s),H=new Float64Array(3*s),w=new Float32Array(2*s),T=o.st?new Float32Array(2*s):void 0,x=z.defined(n)?new Uint8Array(4*s):void 0,k=0,D=0,W=0,V=0;for(b=0;b<u;++b){0===b?(J.Cartesian3.subtract(d[0],d[1],E=ne),J.Cartesian3.add(d[0],E,E)):E=d[b-1],J.Cartesian3.clone(E,le),J.Cartesian3.clone(d[b],ie),b===u-1?(J.Cartesian3.subtract(d[u-1],d[u-2],E=ne),J.Cartesian3.add(d[u-1],E,E)):E=d[b+1],J.Cartesian3.clone(E,se),z.defined(x)&&(P=0===b||i?n[b]:n[b-1],b!==u-1)&&(U=n[b]);for(var Y=b===u-1?2:4,L=0===b?2:0;L<Y;++L){J.Cartesian3.pack(ie,N,k),J.Cartesian3.pack(le,M,k),J.Cartesian3.pack(se,H,k),k+=3;var F=L-2<0?-1:1;w[D++]=L%2*2-1,w[D++]=F*t,o.st&&(T[W++]=b/(u-1),T[W++]=Math.max(w[D-2],0)),z.defined(x)&&(x[V++]=X.Color.floatToByte((F=L<2?P:U).red),x[V++]=X.Color.floatToByte(F.green),x[V++]=X.Color.floatToByte(F.blue),x[V++]=X.Color.floatToByte(F.alpha))}}var l=new ee.GeometryAttributes,G=(l.position=new $.GeometryAttribute({componentDatatype:Z.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:N}),l.prevPosition=new $.GeometryAttribute({componentDatatype:Z.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:M}),l.nextPosition=new $.GeometryAttribute({componentDatatype:Z.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:H}),l.expandAndWidth=new $.GeometryAttribute({componentDatatype:Z.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:w}),o.st&&(l.st=new $.GeometryAttribute({componentDatatype:Z.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:T})),z.defined(x)&&(l.color=new $.GeometryAttribute({componentDatatype:Z.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:4,values:x,normalize:!0})),te.IndexDatatype.createTypedArray(s,6*u-6)),O=0,R=0,q=u-1;for(b=0;b<q;++b)G[R++]=O,G[R++]=O+2,G[R++]=O+1,G[R++]=O+1,G[R++]=O+2,G[R++]=O+3,O+=4;return new $.Geometry({attributes:l,indices:G,primitiveType:$.PrimitiveType.TRIANGLES,boundingSphere:Q.BoundingSphere.fromPoints(d),geometryType:$.GeometryType.POLYLINES})}},function(e,t){return(e=z.defined(t)?m.unpack(e,t):e)._ellipsoid=J.Ellipsoid.clone(e._ellipsoid),m.createGeometry(e)}});
