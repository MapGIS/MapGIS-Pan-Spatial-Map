{"version":3,"file":"createPolylineVolumeGeometry.js","sources":["../../../../Source/Core/PolylineVolumeGeometry.js","../../../../Source/WorkersES6/createPolylineVolumeGeometry.js"],"sourcesContent":["import arrayRemoveDuplicates from './arrayRemoveDuplicates.js';\r\nimport BoundingRectangle from './BoundingRectangle.js';\r\nimport BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian2 from './Cartesian2.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport CornerType from './CornerType.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport GeometryPipeline from './GeometryPipeline.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport CesiumMath from './Math.js';\r\nimport oneTimeWarning from './oneTimeWarning.js';\r\nimport PolygonPipeline from './PolygonPipeline.js';\r\nimport PolylineVolumeGeometryLibrary from './PolylineVolumeGeometryLibrary.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\nimport VertexFormat from './VertexFormat.js';\r\nimport WindingOrder from './WindingOrder.js';\r\n\r\nfunction computeAttributes(combinedPositions, shape, boundingRectangle, vertexFormat) {\r\n    var attributes = new GeometryAttributes();\r\n    if (vertexFormat.position) {\r\n        attributes.position = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute: 3,\r\n            values: combinedPositions\r\n        });\r\n    }\r\n    var shapeLength = shape.length;\r\n    var vertexCount = combinedPositions.length / 3;\r\n    var length = (vertexCount - shapeLength * 2) / (shapeLength * 2);\r\n    var firstEndIndices = PolygonPipeline.triangulate(shape);\r\n\r\n    var indicesCount = (length - 1) * shapeLength * 6 + firstEndIndices.length * 2;\r\n    var indices = IndexDatatype.createTypedArray(vertexCount, indicesCount);\r\n    var i, j;\r\n    var ll, ul, ur, lr;\r\n    var offset = shapeLength * 2;\r\n    var index = 0;\r\n    for (i = 0; i < length - 1; i++) {\r\n        for (j = 0; j < shapeLength - 1; j++) {\r\n            ll = j * 2 + i * shapeLength * 2;\r\n            lr = ll + offset;\r\n            ul = ll + 1;\r\n            ur = ul + offset;\r\n\r\n            indices[index++] = ul;\r\n            indices[index++] = ll;\r\n            indices[index++] = ur;\r\n            indices[index++] = ur;\r\n            indices[index++] = ll;\r\n            indices[index++] = lr;\r\n        }\r\n        ll = shapeLength * 2 - 2 + i * shapeLength * 2;\r\n        ul = ll + 1;\r\n        ur = ul + offset;\r\n        lr = ll + offset;\r\n\r\n        indices[index++] = ul;\r\n        indices[index++] = ll;\r\n        indices[index++] = ur;\r\n        indices[index++] = ur;\r\n        indices[index++] = ll;\r\n        indices[index++] = lr;\r\n    }\r\n\r\n    if (vertexFormat.st || vertexFormat.tangent || vertexFormat.bitangent) {\r\n        // st required for tangent/bitangent calculation\r\n        var st = new Float32Array(vertexCount * 2);\r\n        var lengthSt = 1 / (length - 1);\r\n        var heightSt = 1 / boundingRectangle.height;\r\n        var heightOffset = boundingRectangle.height / 2;\r\n        var s, t;\r\n        var stindex = 0;\r\n        for (i = 0; i < length; i++) {\r\n            s = i * lengthSt;\r\n            t = heightSt * (shape[0].y + heightOffset);\r\n            st[stindex++] = s;\r\n            st[stindex++] = t;\r\n            for (j = 1; j < shapeLength; j++) {\r\n                t = heightSt * (shape[j].y + heightOffset);\r\n                st[stindex++] = s;\r\n                st[stindex++] = t;\r\n                st[stindex++] = s;\r\n                st[stindex++] = t;\r\n            }\r\n            t = heightSt * (shape[0].y + heightOffset);\r\n            st[stindex++] = s;\r\n            st[stindex++] = t;\r\n        }\r\n        for (j = 0; j < shapeLength; j++) {\r\n            s = 0;\r\n            t = heightSt * (shape[j].y + heightOffset);\r\n            st[stindex++] = s;\r\n            st[stindex++] = t;\r\n        }\r\n        for (j = 0; j < shapeLength; j++) {\r\n            s = (length - 1) * lengthSt;\r\n            t = heightSt * (shape[j].y + heightOffset);\r\n            st[stindex++] = s;\r\n            st[stindex++] = t;\r\n        }\r\n\r\n        attributes.st = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 2,\r\n            values: new Float32Array(st)\r\n        });\r\n    }\r\n\r\n    var endOffset = vertexCount - shapeLength * 2;\r\n    for (i = 0; i < firstEndIndices.length; i += 3) {\r\n        var v0 = firstEndIndices[i] + endOffset;\r\n        var v1 = firstEndIndices[i + 1] + endOffset;\r\n        var v2 = firstEndIndices[i + 2] + endOffset;\r\n\r\n        indices[index++] = v0;\r\n        indices[index++] = v1;\r\n        indices[index++] = v2;\r\n        indices[index++] = v2 + shapeLength;\r\n        indices[index++] = v1 + shapeLength;\r\n        indices[index++] = v0 + shapeLength;\r\n    }\r\n\r\n    var geometry = new Geometry({\r\n        attributes: attributes,\r\n        indices: indices,\r\n        boundingSphere: BoundingSphere.fromVertices(combinedPositions),\r\n        primitiveType: PrimitiveType.TRIANGLES\r\n    });\r\n\r\n    if (vertexFormat.normal) {\r\n        geometry = GeometryPipeline.computeNormal(geometry);\r\n    }\r\n\r\n    if (vertexFormat.tangent || vertexFormat.bitangent) {\r\n        try {\r\n            geometry = GeometryPipeline.computeTangentAndBitangent(geometry);\r\n        } catch (e) {\r\n            oneTimeWarning('polyline-volume-tangent-bitangent', 'Unable to compute tangents and bitangents for polyline volume geometry');\r\n            //TODO https://github.com/CesiumGS/cesium/issues/3609\r\n        }\r\n\r\n        if (!vertexFormat.tangent) {\r\n            geometry.attributes.tangent = undefined;\r\n        }\r\n        if (!vertexFormat.bitangent) {\r\n            geometry.attributes.bitangent = undefined;\r\n        }\r\n        if (!vertexFormat.st) {\r\n            geometry.attributes.st = undefined;\r\n        }\r\n    }\r\n\r\n    return geometry;\r\n}\r\n\r\n/**\r\n * A description of a polyline with a volume (a 2D shape extruded along a polyline).\r\n *\r\n * @alias PolylineVolumeGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.polylinePositions An array of {@link Cartesian3} positions that define the center of the polyline volume.\r\n * @param {Cartesian2[]} options.shapePositions An array of {@link Cartesian2} positions that define the shape to be extruded along the polyline\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\r\n *\r\n * @see PolylineVolumeGeometry#createGeometry\r\n *\r\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Polyline%20Volume.html|Cesium Sandcastle Polyline Volume Demo}\r\n *\r\n * @example\r\n * function computeCircle(radius) {\r\n *   var positions = [];\r\n *   for (var i = 0; i < 360; i++) {\r\n *     var radians = Cesium.Math.toRadians(i);\r\n *     positions.push(new Cesium.Cartesian2(radius * Math.cos(radians), radius * Math.sin(radians)));\r\n *   }\r\n *   return positions;\r\n * }\r\n *\r\n * var volume = new Cesium.PolylineVolumeGeometry({\r\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\r\n *   polylinePositions : Cesium.Cartesian3.fromDegreesArray([\r\n *     -72.0, 40.0,\r\n *     -70.0, 35.0\r\n *   ]),\r\n *   shapePositions : computeCircle(100000.0)\r\n * });\r\n */\r\nfunction PolylineVolumeGeometry(options) {\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n    var positions = options.polylinePositions;\r\n    var shape = options.shapePositions;\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(positions)) {\r\n        throw new DeveloperError('options.polylinePositions is required.');\r\n    }\r\n    if (!defined(shape)) {\r\n        throw new DeveloperError('options.shapePositions is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    this._positions = positions;\r\n    this._shape = shape;\r\n    this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\r\n    this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\r\n    this._vertexFormat = VertexFormat.clone(defaultValue(options.vertexFormat, VertexFormat.DEFAULT));\r\n    this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n    this._workerName = 'createPolylineVolumeGeometry';\r\n\r\n    var numComponents = 1 + positions.length * Cartesian3.packedLength;\r\n    numComponents += 1 + shape.length * Cartesian2.packedLength;\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    this.packedLength = numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 2;\r\n}\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {PolylineVolumeGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nPolylineVolumeGeometry.pack = function (value, array, startingIndex) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(value)) {\r\n        throw new DeveloperError('value is required');\r\n    }\r\n    if (!defined(array)) {\r\n        throw new DeveloperError('array is required');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    var i;\r\n\r\n    var positions = value._positions;\r\n    var length = positions.length;\r\n    array[startingIndex++] = length;\r\n\r\n    for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n        Cartesian3.pack(positions[i], array, startingIndex);\r\n    }\r\n\r\n    var shape = value._shape;\r\n    length = shape.length;\r\n    array[startingIndex++] = length;\r\n\r\n    for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\r\n        Cartesian2.pack(shape[i], array, startingIndex);\r\n    }\r\n\r\n    Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n    startingIndex += Ellipsoid.packedLength;\r\n\r\n    VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n    startingIndex += VertexFormat.packedLength;\r\n\r\n    array[startingIndex++] = value._cornerType;\r\n    array[startingIndex] = value._granularity;\r\n\r\n    return array;\r\n};\r\n\r\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\nvar scratchVertexFormat = new VertexFormat();\r\nvar scratchOptions = {\r\n    polylinePositions: undefined,\r\n    shapePositions: undefined,\r\n    ellipsoid: scratchEllipsoid,\r\n    vertexFormat: scratchVertexFormat,\r\n    cornerType: undefined,\r\n    granularity: undefined\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {PolylineVolumeGeometry} [result] The object into which to store the result.\r\n * @returns {PolylineVolumeGeometry} The modified result parameter or a new PolylineVolumeGeometry instance if one was not provided.\r\n */\r\nPolylineVolumeGeometry.unpack = function (array, startingIndex, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(array)) {\r\n        throw new DeveloperError('array is required');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    var i;\r\n\r\n    var length = array[startingIndex++];\r\n    var positions = new Array(length);\r\n\r\n    for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n        positions[i] = Cartesian3.unpack(array, startingIndex);\r\n    }\r\n\r\n    length = array[startingIndex++];\r\n    var shape = new Array(length);\r\n\r\n    for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\r\n        shape[i] = Cartesian2.unpack(array, startingIndex);\r\n    }\r\n\r\n    var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n    startingIndex += Ellipsoid.packedLength;\r\n\r\n    var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\r\n    startingIndex += VertexFormat.packedLength;\r\n\r\n    var cornerType = array[startingIndex++];\r\n    var granularity = array[startingIndex];\r\n\r\n    if (!defined(result)) {\r\n        scratchOptions.polylinePositions = positions;\r\n        scratchOptions.shapePositions = shape;\r\n        scratchOptions.cornerType = cornerType;\r\n        scratchOptions.granularity = granularity;\r\n        return new PolylineVolumeGeometry(scratchOptions);\r\n    }\r\n\r\n    result._positions = positions;\r\n    result._shape = shape;\r\n    result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n    result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n    result._cornerType = cornerType;\r\n    result._granularity = granularity;\r\n\r\n    return result;\r\n};\r\n\r\nvar brScratch = new BoundingRectangle();\r\n\r\n/**\r\n * Computes the geometric representation of a polyline with a volume, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {PolylineVolumeGeometry} polylineVolumeGeometry A description of the polyline volume.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nPolylineVolumeGeometry.createGeometry = function (polylineVolumeGeometry) {\r\n    var positions = polylineVolumeGeometry._positions;\r\n    var cleanPositions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\r\n    var shape2D = polylineVolumeGeometry._shape;\r\n    shape2D = PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(shape2D);\r\n\r\n    if (cleanPositions.length < 2 || shape2D.length < 3) {\r\n        return undefined;\r\n    }\r\n\r\n    if (PolygonPipeline.computeWindingOrder2D(shape2D) === WindingOrder.CLOCKWISE) {\r\n        shape2D.reverse();\r\n    }\r\n    var boundingRectangle = BoundingRectangle.fromPoints(shape2D, brScratch);\r\n\r\n    var computedPositions = PolylineVolumeGeometryLibrary.computePositions(cleanPositions, shape2D, boundingRectangle, polylineVolumeGeometry, true);\r\n    return computeAttributes(computedPositions, shape2D, boundingRectangle, polylineVolumeGeometry._vertexFormat);\r\n};\r\nexport default PolylineVolumeGeometry;\r\n","import defined from '../Core/defined.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\nimport PolylineVolumeGeometry from '../Core/PolylineVolumeGeometry.js';\r\n\r\nfunction createPolylineVolumeGeometry(polylineVolumeGeometry, offset) {\r\n    if (defined(offset)) {\r\n        polylineVolumeGeometry = PolylineVolumeGeometry.unpack(polylineVolumeGeometry, offset);\r\n    }\r\n    polylineVolumeGeometry._ellipsoid = Ellipsoid.clone(polylineVolumeGeometry._ellipsoid);\r\n    return PolylineVolumeGeometry.createGeometry(polylineVolumeGeometry);\r\n}\r\nexport default createPolylineVolumeGeometry;\r\n"],"names":["GeometryAttributes","GeometryAttribute","ComponentDatatype","PolygonPipeline","IndexDatatype","Geometry","BoundingSphere","PrimitiveType","GeometryPipeline","oneTimeWarning","defaultValue","defined","DeveloperError","Ellipsoid","CornerType","VertexFormat","CesiumMath","Cartesian3","Cartesian2","BoundingRectangle","arrayRemoveDuplicates","PolylineVolumeGeometryLibrary","WindingOrder"],"mappings":"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"}