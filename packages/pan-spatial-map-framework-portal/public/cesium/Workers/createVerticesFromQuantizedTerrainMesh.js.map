{"version":3,"file":"createVerticesFromQuantizedTerrainMesh.js","sources":["../../../../Source/Core/TerrainProvider.js","../../../../Source/WorkersES6/createVerticesFromQuantizedTerrainMesh.js"],"sourcesContent":["import defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport CesiumMath from './Math.js';\r\n\r\n/**\r\n * Provides terrain or other geometry for the surface of an ellipsoid.  The surface geometry is\r\n * organized into a pyramid of tiles according to a {@link TilingScheme}.  This type describes an\r\n * interface and is not intended to be instantiated directly.\r\n *\r\n * @alias TerrainProvider\r\n * @constructor\r\n *\r\n * @see EllipsoidTerrainProvider\r\n * @see CesiumTerrainProvider\r\n * @see VRTheWorldTerrainProvider\r\n * @see GoogleEarthEnterpriseTerrainProvider\r\n */\r\nfunction TerrainProvider() {\r\n    DeveloperError.throwInstantiationError();\r\n}\r\n\r\nObject.defineProperties(TerrainProvider.prototype, {\r\n    /**\r\n     * Gets an event that is raised when the terrain provider encounters an asynchronous error..  By subscribing\r\n     * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\r\n     * are passed an instance of {@link TileProviderError}.\r\n     * @memberof TerrainProvider.prototype\r\n     * @type {Event}\r\n     * @readonly\r\n     */\r\n    errorEvent: {\r\n        get: DeveloperError.throwInstantiationError\r\n    },\r\n\r\n    /**\r\n     * Gets the credit to display when this terrain provider is active.  Typically this is used to credit\r\n     * the source of the terrain. This function should\r\n     * not be called before {@link TerrainProvider#ready} returns true.\r\n     * @memberof TerrainProvider.prototype\r\n     * @type {Credit}\r\n     * @readonly\r\n     */\r\n    credit: {\r\n        get: DeveloperError.throwInstantiationError\r\n    },\r\n\r\n    /**\r\n     * Gets the tiling scheme used by the provider.  This function should\r\n     * not be called before {@link TerrainProvider#ready} returns true.\r\n     * @memberof TerrainProvider.prototype\r\n     * @type {TilingScheme}\r\n     * @readonly\r\n     */\r\n    tilingScheme: {\r\n        get: DeveloperError.throwInstantiationError\r\n    },\r\n\r\n    /**\r\n     * Gets a value indicating whether or not the provider is ready for use.\r\n     * @memberof TerrainProvider.prototype\r\n     * @type {Boolean}\r\n     * @readonly\r\n     */\r\n    ready: {\r\n        get: DeveloperError.throwInstantiationError\r\n    },\r\n\r\n    /**\r\n     * Gets a promise that resolves to true when the provider is ready for use.\r\n     * @memberof TerrainProvider.prototype\r\n     * @type {Promise.<Boolean>}\r\n     * @readonly\r\n     */\r\n    readyPromise: {\r\n        get: DeveloperError.throwInstantiationError\r\n    },\r\n\r\n    /**\r\n     * Gets a value indicating whether or not the provider includes a water mask.  The water mask\r\n     * indicates which areas of the globe are water rather than land, so they can be rendered\r\n     * as a reflective surface with animated waves.  This function should not be\r\n     * called before {@link TerrainProvider#ready} returns true.\r\n     * @memberof TerrainProvider.prototype\r\n     * @type {Boolean}\r\n     * @readonly\r\n     */\r\n    hasWaterMask: {\r\n        get: DeveloperError.throwInstantiationError\r\n    },\r\n\r\n    /**\r\n     * Gets a value indicating whether or not the requested tiles include vertex normals.\r\n     * This function should not be called before {@link TerrainProvider#ready} returns true.\r\n     * @memberof TerrainProvider.prototype\r\n     * @type {Boolean}\r\n     * @readonly\r\n     */\r\n    hasVertexNormals: {\r\n        get: DeveloperError.throwInstantiationError\r\n    },\r\n\r\n    /**\r\n     * Gets an object that can be used to determine availability of terrain from this provider, such as\r\n     * at points and in rectangles.  This function should not be called before\r\n     * {@link TerrainProvider#ready} returns true.  This property may be undefined if availability\r\n     * information is not available.\r\n     * @memberof TerrainProvider.prototype\r\n     * @type {TileAvailability}\r\n     * @readonly\r\n     */\r\n    availability: {\r\n        get: DeveloperError.throwInstantiationError\r\n    }\r\n});\r\n\r\nvar regularGridIndicesCache = [];\r\n\r\n/**\r\n * Gets a list of indices for a triangle mesh representing a regular grid.  Calling\r\n * this function multiple times with the same grid width and height returns the\r\n * same list of indices.  The total number of vertices must be less than or equal\r\n * to 65536.\r\n *\r\n * @param {Number} width The number of vertices in the regular grid in the horizontal direction.\r\n * @param {Number} height The number of vertices in the regular grid in the vertical direction.\r\n * @returns {Uint16Array|Uint32Array} The list of indices. Uint16Array gets returned for 64KB or less and Uint32Array for 4GB or less.\r\n */\r\nTerrainProvider.getRegularGridIndices = function (width, height) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (width * height >= CesiumMath.FOUR_GIGABYTES) {\r\n        throw new DeveloperError('The total number of vertices (width * height) must be less than 4,294,967,296.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var byWidth = regularGridIndicesCache[width];\r\n    if (!defined(byWidth)) {\r\n        regularGridIndicesCache[width] = byWidth = [];\r\n    }\r\n\r\n    var indices = byWidth[height];\r\n    if (!defined(indices)) {\r\n        if (width * height < CesiumMath.SIXTY_FOUR_KILOBYTES) {\r\n            indices = byWidth[height] = new Uint16Array((width - 1) * (height - 1) * 6);\r\n        } else {\r\n            indices = byWidth[height] = new Uint32Array((width - 1) * (height - 1) * 6);\r\n        }\r\n        addRegularGridIndices(width, height, indices, 0);\r\n    }\r\n\r\n    return indices;\r\n};\r\n\r\nvar regularGridAndEdgeIndicesCache = [];\r\n\r\n/**\r\n * @private\r\n */\r\nTerrainProvider.getRegularGridIndicesAndEdgeIndices = function (width, height) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (width * height >= CesiumMath.FOUR_GIGABYTES) {\r\n        throw new DeveloperError('The total number of vertices (width * height) must be less than 4,294,967,296.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var byWidth = regularGridAndEdgeIndicesCache[width];\r\n    if (!defined(byWidth)) {\r\n        regularGridAndEdgeIndicesCache[width] = byWidth = [];\r\n    }\r\n\r\n    var indicesAndEdges = byWidth[height];\r\n    if (!defined(indicesAndEdges)) {\r\n        var indices = TerrainProvider.getRegularGridIndices(width, height);\r\n\r\n        var edgeIndices = getEdgeIndices(width, height);\r\n        var westIndicesSouthToNorth = edgeIndices.westIndicesSouthToNorth;\r\n        var southIndicesEastToWest = edgeIndices.southIndicesEastToWest;\r\n        var eastIndicesNorthToSouth = edgeIndices.eastIndicesNorthToSouth;\r\n        var northIndicesWestToEast = edgeIndices.northIndicesWestToEast;\r\n\r\n        indicesAndEdges = byWidth[height] = {\r\n            indices: indices,\r\n            westIndicesSouthToNorth: westIndicesSouthToNorth,\r\n            southIndicesEastToWest: southIndicesEastToWest,\r\n            eastIndicesNorthToSouth: eastIndicesNorthToSouth,\r\n            northIndicesWestToEast: northIndicesWestToEast\r\n        };\r\n    }\r\n\r\n    return indicesAndEdges;\r\n};\r\n\r\nvar regularGridAndSkirtAndEdgeIndicesCache = [];\r\n\r\n/**\r\n * @private\r\n */\r\nTerrainProvider.getRegularGridAndSkirtIndicesAndEdgeIndices = function (width, height) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (width * height >= CesiumMath.FOUR_GIGABYTES) {\r\n        throw new DeveloperError('The total number of vertices (width * height) must be less than 4,294,967,296.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var byWidth = regularGridAndSkirtAndEdgeIndicesCache[width];\r\n    if (!defined(byWidth)) {\r\n        regularGridAndSkirtAndEdgeIndicesCache[width] = byWidth = [];\r\n    }\r\n\r\n    var indicesAndEdges = byWidth[height];\r\n    if (!defined(indicesAndEdges)) {\r\n        var gridVertexCount = width * height;\r\n        var gridIndexCount = (width - 1) * (height - 1) * 6;\r\n        var edgeVertexCount = width * 2 + height * 2;\r\n        var edgeIndexCount = Math.max(0, edgeVertexCount - 4) * 6;\r\n        var vertexCount = gridVertexCount + edgeVertexCount;\r\n        var indexCount = gridIndexCount + edgeIndexCount;\r\n\r\n        var edgeIndices = getEdgeIndices(width, height);\r\n        var westIndicesSouthToNorth = edgeIndices.westIndicesSouthToNorth;\r\n        var southIndicesEastToWest = edgeIndices.southIndicesEastToWest;\r\n        var eastIndicesNorthToSouth = edgeIndices.eastIndicesNorthToSouth;\r\n        var northIndicesWestToEast = edgeIndices.northIndicesWestToEast;\r\n\r\n        var indices = IndexDatatype.createTypedArray(vertexCount, indexCount);\r\n        addRegularGridIndices(width, height, indices, 0);\r\n        TerrainProvider.addSkirtIndices(westIndicesSouthToNorth, southIndicesEastToWest, eastIndicesNorthToSouth, northIndicesWestToEast, gridVertexCount, indices, gridIndexCount);\r\n\r\n        indicesAndEdges = byWidth[height] = {\r\n            indices: indices,\r\n            westIndicesSouthToNorth: westIndicesSouthToNorth,\r\n            southIndicesEastToWest: southIndicesEastToWest,\r\n            eastIndicesNorthToSouth: eastIndicesNorthToSouth,\r\n            northIndicesWestToEast: northIndicesWestToEast,\r\n            indexCountWithoutSkirts: gridIndexCount\r\n        };\r\n    }\r\n\r\n    return indicesAndEdges;\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nTerrainProvider.addSkirtIndices = function (westIndicesSouthToNorth, southIndicesEastToWest, eastIndicesNorthToSouth, northIndicesWestToEast, vertexCount, indices, offset) {\r\n    var vertexIndex = vertexCount;\r\n    offset = addSkirtIndices(westIndicesSouthToNorth, vertexIndex, indices, offset);\r\n    vertexIndex += westIndicesSouthToNorth.length;\r\n    offset = addSkirtIndices(southIndicesEastToWest, vertexIndex, indices, offset);\r\n    vertexIndex += southIndicesEastToWest.length;\r\n    offset = addSkirtIndices(eastIndicesNorthToSouth, vertexIndex, indices, offset);\r\n    vertexIndex += eastIndicesNorthToSouth.length;\r\n    addSkirtIndices(northIndicesWestToEast, vertexIndex, indices, offset);\r\n};\r\n\r\nfunction getEdgeIndices(width, height) {\r\n    var westIndicesSouthToNorth = new Array(height);\r\n    var southIndicesEastToWest = new Array(width);\r\n    var eastIndicesNorthToSouth = new Array(height);\r\n    var northIndicesWestToEast = new Array(width);\r\n\r\n    var i;\r\n    for (i = 0; i < width; ++i) {\r\n        northIndicesWestToEast[i] = i;\r\n        southIndicesEastToWest[i] = width * height - 1 - i;\r\n    }\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        eastIndicesNorthToSouth[i] = (i + 1) * width - 1;\r\n        westIndicesSouthToNorth[i] = (height - i - 1) * width;\r\n    }\r\n\r\n    return {\r\n        westIndicesSouthToNorth: westIndicesSouthToNorth,\r\n        southIndicesEastToWest: southIndicesEastToWest,\r\n        eastIndicesNorthToSouth: eastIndicesNorthToSouth,\r\n        northIndicesWestToEast: northIndicesWestToEast\r\n    };\r\n}\r\n\r\nfunction addRegularGridIndices(width, height, indices, offset) {\r\n    var index = 0;\r\n    for (var j = 0; j < height - 1; ++j) {\r\n        for (var i = 0; i < width - 1; ++i) {\r\n            var upperLeft = index;\r\n            var lowerLeft = upperLeft + width;\r\n            var lowerRight = lowerLeft + 1;\r\n            var upperRight = upperLeft + 1;\r\n\r\n            indices[offset++] = upperLeft;\r\n            indices[offset++] = lowerLeft;\r\n            indices[offset++] = upperRight;\r\n            indices[offset++] = upperRight;\r\n            indices[offset++] = lowerLeft;\r\n            indices[offset++] = lowerRight;\r\n\r\n            ++index;\r\n        }\r\n        ++index;\r\n    }\r\n}\r\n\r\nfunction addSkirtIndices(edgeIndices, vertexIndex, indices, offset) {\r\n    var previousIndex = edgeIndices[0];\r\n\r\n    var length = edgeIndices.length;\r\n    for (var i = 1; i < length; ++i) {\r\n        var index = edgeIndices[i];\r\n\r\n        indices[offset++] = previousIndex;\r\n        indices[offset++] = index;\r\n        indices[offset++] = vertexIndex;\r\n\r\n        indices[offset++] = vertexIndex;\r\n        indices[offset++] = index;\r\n        indices[offset++] = vertexIndex + 1;\r\n\r\n        previousIndex = index;\r\n        ++vertexIndex;\r\n    }\r\n\r\n    return offset;\r\n}\r\n\r\n/**\r\n * Specifies the quality of terrain created from heightmaps.  A value of 1.0 will\r\n * ensure that adjacent heightmap vertices are separated by no more than\r\n * {@link Globe.maximumScreenSpaceError} screen pixels and will probably go very slowly.\r\n * A value of 0.5 will cut the estimated level zero geometric error in half, allowing twice the\r\n * screen pixels between adjacent heightmap vertices and thus rendering more quickly.\r\n * @type {Number}\r\n */\r\nTerrainProvider.heightmapTerrainQuality = 0.25;\r\n\r\n/**\r\n * Determines an appropriate geometric error estimate when the geometry comes from a heightmap.\r\n *\r\n * @param {Ellipsoid} ellipsoid The ellipsoid to which the terrain is attached.\r\n * @param {Number} tileImageWidth The width, in pixels, of the heightmap associated with a single tile.\r\n * @param {Number} numberOfTilesAtLevelZero The number of tiles in the horizontal direction at tile level zero.\r\n * @returns {Number} An estimated geometric error.\r\n */\r\nTerrainProvider.getEstimatedLevelZeroGeometricErrorForAHeightmap = function (ellipsoid, tileImageWidth, numberOfTilesAtLevelZero) {\r\n    return (ellipsoid.maximumRadius * 2 * Math.PI * TerrainProvider.heightmapTerrainQuality) / (tileImageWidth * numberOfTilesAtLevelZero);\r\n};\r\n\r\n/**\r\n * Requests the geometry for a given tile.  This function should not be called before\r\n * {@link TerrainProvider#ready} returns true.  The result must include terrain data and\r\n * may optionally include a water mask and an indication of which child tiles are available.\r\n * @function\r\n *\r\n * @param {Number} x The X coordinate of the tile for which to request geometry.\r\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\r\n * @param {Number} level The level of the tile for which to request geometry.\r\n * @param {Request} [request] The request object. Intended for internal use only.\r\n *\r\n * @returns {Promise.<TerrainData>|undefined} A promise for the requested geometry.  If this method\r\n *          returns undefined instead of a promise, it is an indication that too many requests are already\r\n *          pending and the request will be retried later.\r\n */\r\nTerrainProvider.prototype.requestTileGeometry = DeveloperError.throwInstantiationError;\r\n\r\n/**\r\n * Gets the maximum geometric error allowed in a tile at a given level.  This function should not be\r\n * called before {@link TerrainProvider#ready} returns true.\r\n * @function\r\n *\r\n * @param {Number} level The tile level for which to get the maximum geometric error.\r\n * @returns {Number} The maximum geometric error.\r\n */\r\nTerrainProvider.prototype.getLevelMaximumGeometricError = DeveloperError.throwInstantiationError;\r\n\r\n/**\r\n * Determines whether data for a tile is available to be loaded.\r\n * @function\r\n *\r\n * @param {Number} x The X coordinate of the tile for which to request geometry.\r\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\r\n * @param {Number} level The level of the tile for which to request geometry.\r\n * @returns {Boolean|undefined} Undefined if not supported by the terrain provider, otherwise true or false.\r\n */\r\nTerrainProvider.prototype.getTileDataAvailable = DeveloperError.throwInstantiationError;\r\n\r\n/**\r\n * Makes sure we load availability data for a tile\r\n * @function\r\n *\r\n * @param {Number} x The X coordinate of the tile for which to request geometry.\r\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\r\n * @param {Number} level The level of the tile for which to request geometry.\r\n * @returns {undefined|Promise<void>} Undefined if nothing need to be loaded or a Promise that resolves when all required tiles are loaded\r\n */\r\nTerrainProvider.prototype.loadTileDataAvailability = DeveloperError.throwInstantiationError;\r\nexport default TerrainProvider;\r\n","import AxisAlignedBoundingBox from '../Core/AxisAlignedBoundingBox.js';\r\nimport Cartesian2 from '../Core/Cartesian2.js';\r\nimport Cartesian3 from '../Core/Cartesian3.js';\r\nimport Cartographic from '../Core/Cartographic.js';\r\nimport defined from '../Core/defined.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\nimport EllipsoidalOccluder from '../Core/EllipsoidalOccluder.js';\r\nimport IndexDatatype from '../Core/IndexDatatype.js';\r\nimport CesiumMath from '../Core/Math.js';\r\nimport Matrix4 from '../Core/Matrix4.js';\r\nimport Rectangle from '../Core/Rectangle.js';\r\nimport TerrainEncoding from '../Core/TerrainEncoding.js';\r\nimport TerrainProvider from '../Core/TerrainProvider.js';\r\nimport Transforms from '../Core/Transforms.js';\r\nimport WebMercatorProjection from '../Core/WebMercatorProjection.js';\r\nimport createTaskProcessorWorker from './createTaskProcessorWorker.js';\r\n\r\nvar maxShort = 32767;\r\n\r\nvar cartesian3Scratch = new Cartesian3();\r\nvar scratchMinimum = new Cartesian3();\r\nvar scratchMaximum = new Cartesian3();\r\nvar cartographicScratch = new Cartographic();\r\nvar toPack = new Cartesian2();\r\n\r\nfunction createVerticesFromQuantizedTerrainMesh(parameters, transferableObjects) {\r\n    var quantizedVertices = parameters.quantizedVertices;\r\n    var quantizedVertexCount = quantizedVertices.length / 3;\r\n    var octEncodedNormals = parameters.octEncodedNormals;\r\n    var edgeVertexCount = parameters.westIndices.length + parameters.eastIndices.length + parameters.southIndices.length + parameters.northIndices.length;\r\n    var includeWebMercatorT = parameters.includeWebMercatorT;\r\n\r\n    var exaggeration = parameters.exaggeration;\r\n    var exaggerationRelativeHeight = parameters.exaggerationRelativeHeight;\r\n    var hasExaggeration = exaggeration !== 1.0;\r\n    var includeGeodeticSurfaceNormals = hasExaggeration;\r\n\r\n    var rectangle = Rectangle.clone(parameters.rectangle);\r\n    var west = rectangle.west;\r\n    var south = rectangle.south;\r\n    var east = rectangle.east;\r\n    var north = rectangle.north;\r\n\r\n    var ellipsoid = Ellipsoid.clone(parameters.ellipsoid);\r\n\r\n    var minimumHeight = parameters.minimumHeight;\r\n    var maximumHeight = parameters.maximumHeight;\r\n\r\n    var center = parameters.relativeToCenter;\r\n    var fromENU = Transforms.eastNorthUpToFixedFrame(center, ellipsoid);\r\n    var toENU = Matrix4.inverseTransformation(fromENU, new Matrix4());\r\n\r\n    var southMercatorY;\r\n    var oneOverMercatorHeight;\r\n    if (includeWebMercatorT) {\r\n        southMercatorY = WebMercatorProjection.geodeticLatitudeToMercatorAngle(south);\r\n        oneOverMercatorHeight = 1.0 / (WebMercatorProjection.geodeticLatitudeToMercatorAngle(north) - southMercatorY);\r\n    }\r\n\r\n    var uBuffer = quantizedVertices.subarray(0, quantizedVertexCount);\r\n    var vBuffer = quantizedVertices.subarray(quantizedVertexCount, 2 * quantizedVertexCount);\r\n    var heightBuffer = quantizedVertices.subarray(quantizedVertexCount * 2, 3 * quantizedVertexCount);\r\n    var hasVertexNormals = defined(octEncodedNormals);\r\n\r\n    var uvs = new Array(quantizedVertexCount);\r\n    var heights = new Array(quantizedVertexCount);\r\n    var positions = new Array(quantizedVertexCount);\r\n    var webMercatorTs = includeWebMercatorT ? new Array(quantizedVertexCount) : [];\r\n    var geodeticSurfaceNormals = includeGeodeticSurfaceNormals ? new Array(quantizedVertexCount) : [];\r\n\r\n    var minimum = scratchMinimum;\r\n    minimum.x = Number.POSITIVE_INFINITY;\r\n    minimum.y = Number.POSITIVE_INFINITY;\r\n    minimum.z = Number.POSITIVE_INFINITY;\r\n\r\n    var maximum = scratchMaximum;\r\n    maximum.x = Number.NEGATIVE_INFINITY;\r\n    maximum.y = Number.NEGATIVE_INFINITY;\r\n    maximum.z = Number.NEGATIVE_INFINITY;\r\n\r\n    var minLongitude = Number.POSITIVE_INFINITY;\r\n    var maxLongitude = Number.NEGATIVE_INFINITY;\r\n    var minLatitude = Number.POSITIVE_INFINITY;\r\n    var maxLatitude = Number.NEGATIVE_INFINITY;\r\n\r\n    for (var i = 0; i < quantizedVertexCount; ++i) {\r\n        var rawU = uBuffer[i];\r\n        var rawV = vBuffer[i];\r\n\r\n        var u = rawU / maxShort;\r\n        var v = rawV / maxShort;\r\n        var height = CesiumMath.lerp(minimumHeight, maximumHeight, heightBuffer[i] / maxShort);\r\n\r\n        cartographicScratch.longitude = CesiumMath.lerp(west, east, u);\r\n        cartographicScratch.latitude = CesiumMath.lerp(south, north, v);\r\n        cartographicScratch.height = height;\r\n\r\n        minLongitude = Math.min(cartographicScratch.longitude, minLongitude);\r\n        maxLongitude = Math.max(cartographicScratch.longitude, maxLongitude);\r\n        minLatitude = Math.min(cartographicScratch.latitude, minLatitude);\r\n        maxLatitude = Math.max(cartographicScratch.latitude, maxLatitude);\r\n\r\n        var position = ellipsoid.cartographicToCartesian(cartographicScratch);\r\n\r\n        uvs[i] = new Cartesian2(u, v);\r\n        heights[i] = height;\r\n        positions[i] = position;\r\n\r\n        if (includeWebMercatorT) {\r\n            webMercatorTs[i] = (WebMercatorProjection.geodeticLatitudeToMercatorAngle(cartographicScratch.latitude) - southMercatorY) * oneOverMercatorHeight;\r\n        }\r\n\r\n        if (includeGeodeticSurfaceNormals) {\r\n            geodeticSurfaceNormals[i] = ellipsoid.geodeticSurfaceNormal(position);\r\n        }\r\n\r\n        Matrix4.multiplyByPoint(toENU, position, cartesian3Scratch);\r\n\r\n        Cartesian3.minimumByComponent(cartesian3Scratch, minimum, minimum);\r\n        Cartesian3.maximumByComponent(cartesian3Scratch, maximum, maximum);\r\n    }\r\n\r\n    var westIndicesSouthToNorth = copyAndSort(parameters.westIndices, function (a, b) {\r\n        return uvs[a].y - uvs[b].y;\r\n    });\r\n    var eastIndicesNorthToSouth = copyAndSort(parameters.eastIndices, function (a, b) {\r\n        return uvs[b].y - uvs[a].y;\r\n    });\r\n    var southIndicesEastToWest = copyAndSort(parameters.southIndices, function (a, b) {\r\n        return uvs[b].x - uvs[a].x;\r\n    });\r\n    var northIndicesWestToEast = copyAndSort(parameters.northIndices, function (a, b) {\r\n        return uvs[a].x - uvs[b].x;\r\n    });\r\n\r\n    var occludeePointInScaledSpace;\r\n    if (minimumHeight < 0.0) {\r\n        // Horizon culling point needs to be recomputed since the tile is at least partly under the ellipsoid.\r\n        var occluder = new EllipsoidalOccluder(ellipsoid);\r\n        occludeePointInScaledSpace = occluder.computeHorizonCullingPointPossiblyUnderEllipsoid(center, positions, minimumHeight);\r\n    }\r\n\r\n    var hMin = minimumHeight;\r\n    hMin = Math.min(hMin, findMinMaxSkirts(parameters.westIndices, parameters.westSkirtHeight, heights, uvs, rectangle, ellipsoid, toENU, minimum, maximum));\r\n    hMin = Math.min(hMin, findMinMaxSkirts(parameters.southIndices, parameters.southSkirtHeight, heights, uvs, rectangle, ellipsoid, toENU, minimum, maximum));\r\n    hMin = Math.min(hMin, findMinMaxSkirts(parameters.eastIndices, parameters.eastSkirtHeight, heights, uvs, rectangle, ellipsoid, toENU, minimum, maximum));\r\n    hMin = Math.min(hMin, findMinMaxSkirts(parameters.northIndices, parameters.northSkirtHeight, heights, uvs, rectangle, ellipsoid, toENU, minimum, maximum));\r\n\r\n    var aaBox = new AxisAlignedBoundingBox(minimum, maximum, center);\r\n    var encoding = new TerrainEncoding(\r\n        center,\r\n        aaBox,\r\n        hMin,\r\n        maximumHeight,\r\n        fromENU,\r\n        hasVertexNormals,\r\n        includeWebMercatorT,\r\n        includeGeodeticSurfaceNormals,\r\n        exaggeration,\r\n        exaggerationRelativeHeight\r\n    );\r\n    var vertexStride = encoding.stride;\r\n    var size = quantizedVertexCount * vertexStride + edgeVertexCount * vertexStride;\r\n    var vertexBuffer = new Float32Array(size);\r\n\r\n    var bufferIndex = 0;\r\n    for (var j = 0; j < quantizedVertexCount; ++j) {\r\n        if (hasVertexNormals) {\r\n            var n = j * 2.0;\r\n            toPack.x = octEncodedNormals[n];\r\n            toPack.y = octEncodedNormals[n + 1];\r\n        }\r\n\r\n        bufferIndex = encoding.encode(vertexBuffer, bufferIndex, positions[j], uvs[j], heights[j], toPack, webMercatorTs[j], geodeticSurfaceNormals[j]);\r\n    }\r\n\r\n    var edgeTriangleCount = Math.max(0, (edgeVertexCount - 4) * 2);\r\n    var indexBufferLength = parameters.indices.length + edgeTriangleCount * 3;\r\n    var indexBuffer = IndexDatatype.createTypedArray(quantizedVertexCount + edgeVertexCount, indexBufferLength);\r\n    indexBuffer.set(parameters.indices, 0);\r\n\r\n    var percentage = 0.0001;\r\n    var lonOffset = (maxLongitude - minLongitude) * percentage;\r\n    var latOffset = (maxLatitude - minLatitude) * percentage;\r\n    var westLongitudeOffset = -lonOffset;\r\n    var westLatitudeOffset = 0.0;\r\n    var eastLongitudeOffset = lonOffset;\r\n    var eastLatitudeOffset = 0.0;\r\n    var northLongitudeOffset = 0.0;\r\n    var northLatitudeOffset = latOffset;\r\n    var southLongitudeOffset = 0.0;\r\n    var southLatitudeOffset = -latOffset;\r\n\r\n    // Add skirts.\r\n    var vertexBufferIndex = quantizedVertexCount * vertexStride;\r\n    addSkirt(\r\n        vertexBuffer,\r\n        vertexBufferIndex,\r\n        westIndicesSouthToNorth,\r\n        encoding,\r\n        heights,\r\n        uvs,\r\n        octEncodedNormals,\r\n        ellipsoid,\r\n        rectangle,\r\n        parameters.westSkirtHeight,\r\n        southMercatorY,\r\n        oneOverMercatorHeight,\r\n        westLongitudeOffset,\r\n        westLatitudeOffset\r\n    );\r\n    vertexBufferIndex += parameters.westIndices.length * vertexStride;\r\n    addSkirt(\r\n        vertexBuffer,\r\n        vertexBufferIndex,\r\n        southIndicesEastToWest,\r\n        encoding,\r\n        heights,\r\n        uvs,\r\n        octEncodedNormals,\r\n        ellipsoid,\r\n        rectangle,\r\n        parameters.southSkirtHeight,\r\n        southMercatorY,\r\n        oneOverMercatorHeight,\r\n        southLongitudeOffset,\r\n        southLatitudeOffset\r\n    );\r\n    vertexBufferIndex += parameters.southIndices.length * vertexStride;\r\n    addSkirt(\r\n        vertexBuffer,\r\n        vertexBufferIndex,\r\n        eastIndicesNorthToSouth,\r\n        encoding,\r\n        heights,\r\n        uvs,\r\n        octEncodedNormals,\r\n        ellipsoid,\r\n        rectangle,\r\n        parameters.eastSkirtHeight,\r\n        southMercatorY,\r\n        oneOverMercatorHeight,\r\n        eastLongitudeOffset,\r\n        eastLatitudeOffset\r\n    );\r\n    vertexBufferIndex += parameters.eastIndices.length * vertexStride;\r\n    addSkirt(\r\n        vertexBuffer,\r\n        vertexBufferIndex,\r\n        northIndicesWestToEast,\r\n        encoding,\r\n        heights,\r\n        uvs,\r\n        octEncodedNormals,\r\n        ellipsoid,\r\n        rectangle,\r\n        parameters.northSkirtHeight,\r\n        southMercatorY,\r\n        oneOverMercatorHeight,\r\n        northLongitudeOffset,\r\n        northLatitudeOffset\r\n    );\r\n\r\n    TerrainProvider.addSkirtIndices(\r\n        westIndicesSouthToNorth,\r\n        southIndicesEastToWest,\r\n        eastIndicesNorthToSouth,\r\n        northIndicesWestToEast,\r\n        quantizedVertexCount,\r\n        indexBuffer,\r\n        parameters.indices.length\r\n    );\r\n\r\n    transferableObjects.push(vertexBuffer.buffer, indexBuffer.buffer);\r\n\r\n    return {\r\n        vertices: vertexBuffer.buffer,\r\n        indices: indexBuffer.buffer,\r\n        westIndicesSouthToNorth: westIndicesSouthToNorth,\r\n        southIndicesEastToWest: southIndicesEastToWest,\r\n        eastIndicesNorthToSouth: eastIndicesNorthToSouth,\r\n        northIndicesWestToEast: northIndicesWestToEast,\r\n        vertexStride: vertexStride,\r\n        center: center,\r\n        minimumHeight: minimumHeight,\r\n        maximumHeight: maximumHeight,\r\n        occludeePointInScaledSpace: occludeePointInScaledSpace,\r\n        encoding: encoding,\r\n        indexCountWithoutSkirts: parameters.indices.length\r\n    };\r\n}\r\n\r\nfunction findMinMaxSkirts(edgeIndices, edgeHeight, heights, uvs, rectangle, ellipsoid, toENU, minimum, maximum) {\r\n    var hMin = Number.POSITIVE_INFINITY;\r\n\r\n    var north = rectangle.north;\r\n    var south = rectangle.south;\r\n    var east = rectangle.east;\r\n    var west = rectangle.west;\r\n\r\n    if (east < west) {\r\n        east += CesiumMath.TWO_PI;\r\n    }\r\n\r\n    var length = edgeIndices.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        var index = edgeIndices[i];\r\n        var h = heights[index];\r\n        var uv = uvs[index];\r\n\r\n        cartographicScratch.longitude = CesiumMath.lerp(west, east, uv.x);\r\n        cartographicScratch.latitude = CesiumMath.lerp(south, north, uv.y);\r\n        cartographicScratch.height = h - edgeHeight;\r\n\r\n        var position = ellipsoid.cartographicToCartesian(cartographicScratch, cartesian3Scratch);\r\n        Matrix4.multiplyByPoint(toENU, position, position);\r\n\r\n        Cartesian3.minimumByComponent(position, minimum, minimum);\r\n        Cartesian3.maximumByComponent(position, maximum, maximum);\r\n\r\n        hMin = Math.min(hMin, cartographicScratch.height);\r\n    }\r\n    return hMin;\r\n}\r\n\r\nfunction addSkirt(\r\n    vertexBuffer,\r\n    vertexBufferIndex,\r\n    edgeVertices,\r\n    encoding,\r\n    heights,\r\n    uvs,\r\n    octEncodedNormals,\r\n    ellipsoid,\r\n    rectangle,\r\n    skirtLength,\r\n    southMercatorY,\r\n    oneOverMercatorHeight,\r\n    longitudeOffset,\r\n    latitudeOffset\r\n) {\r\n    var hasVertexNormals = defined(octEncodedNormals);\r\n\r\n    var north = rectangle.north;\r\n    var south = rectangle.south;\r\n    var east = rectangle.east;\r\n    var west = rectangle.west;\r\n\r\n    if (east < west) {\r\n        east += CesiumMath.TWO_PI;\r\n    }\r\n\r\n    var length = edgeVertices.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        var index = edgeVertices[i];\r\n        var h = heights[index];\r\n        var uv = uvs[index];\r\n\r\n        cartographicScratch.longitude = CesiumMath.lerp(west, east, uv.x) + longitudeOffset;\r\n        cartographicScratch.latitude = CesiumMath.lerp(south, north, uv.y) + latitudeOffset;\r\n        cartographicScratch.height = h - skirtLength;\r\n\r\n        var position = ellipsoid.cartographicToCartesian(cartographicScratch, cartesian3Scratch);\r\n\r\n        if (hasVertexNormals) {\r\n            var n = index * 2.0;\r\n            toPack.x = octEncodedNormals[n];\r\n            toPack.y = octEncodedNormals[n + 1];\r\n        }\r\n\r\n        var webMercatorT;\r\n        if (encoding.hasWebMercatorT) {\r\n            webMercatorT = (WebMercatorProjection.geodeticLatitudeToMercatorAngle(cartographicScratch.latitude) - southMercatorY) * oneOverMercatorHeight;\r\n        }\r\n\r\n        var geodeticSurfaceNormal;\r\n        if (encoding.hasGeodeticSurfaceNormals) {\r\n            geodeticSurfaceNormal = ellipsoid.geodeticSurfaceNormal(position);\r\n        }\r\n\r\n        vertexBufferIndex = encoding.encode(vertexBuffer, vertexBufferIndex, position, uv, cartographicScratch.height, toPack, webMercatorT, geodeticSurfaceNormal);\r\n    }\r\n}\r\n\r\nfunction copyAndSort(typedArray, comparator) {\r\n    var copy;\r\n    if (typeof typedArray.slice === 'function') {\r\n        copy = typedArray.slice();\r\n        if (typeof copy.sort !== 'function') {\r\n            // Sliced typed array isn't sortable, so we can't use it.\r\n            copy = undefined;\r\n        }\r\n    }\r\n\r\n    if (!defined(copy)) {\r\n        copy = Array.prototype.slice.call(typedArray);\r\n    }\r\n\r\n    copy.sort(comparator);\r\n\r\n    return copy;\r\n}\r\nexport default createTaskProcessorWorker(createVerticesFromQuantizedTerrainMesh);\r\n"],"names":["DeveloperError","CesiumMath","defined","IndexDatatype","Cartesian3","Cartographic","Cartesian2","Rectangle","Ellipsoid","Transforms","Matrix4","WebMercatorProjection","EllipsoidalOccluder","AxisAlignedBoundingBox","TerrainEncoding"],"mappings":"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"}