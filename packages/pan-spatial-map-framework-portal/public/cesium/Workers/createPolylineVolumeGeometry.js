define(["./when-ae2e0b60","./Cartesian2-38b35910","./arrayRemoveDuplicates-bdf50aa0","./BoundingRectangle-74602a7c","./Transforms-07a9fab5","./ComponentDatatype-e44126e4","./PolylineVolumeGeometryLibrary-c00aade2","./Check-f996273c","./GeometryAttribute-586bf52c","./GeometryAttributes-5ce4955a","./GeometryPipeline-88f05837","./IndexDatatype-516320ea","./Math-5bbcea10","./PolygonPipeline-06aa4301","./VertexFormat-90d15264","./combine-276652d0","./RuntimeError-ac2797b4","./WebGLConstants-35626ea2","./EllipsoidTangentPlane-19622103","./AxisAlignedBoundingBox-d272def4","./IntersectionTests-f49c7cd3","./Plane-45ad3143","./PolylinePipeline-f47a23a0","./EllipsoidGeodesic-0207b202","./EllipsoidRhumbLine-af7b5ebe","./AttributeCompression-25f42564","./EncodedCartesian3-d40e98d6"],function(c,T,S,G,I,D,w,e,R,O,N,W,a,B,u,t,n,i,o,r,l,s,p,d,g,h,f){"use strict";function m(e){var t=(e=c.defaultValue(e,c.defaultValue.EMPTY_OBJECT)).polylinePositions,n=e.shapePositions,e=(this._positions=t,this._shape=n,this._ellipsoid=T.Ellipsoid.clone(c.defaultValue(e.ellipsoid,T.Ellipsoid.WGS84)),this._cornerType=c.defaultValue(e.cornerType,w.CornerType.ROUNDED),this._vertexFormat=u.VertexFormat.clone(c.defaultValue(e.vertexFormat,u.VertexFormat.DEFAULT)),this._granularity=c.defaultValue(e.granularity,a.CesiumMath.RADIANS_PER_DEGREE),this._workerName="createPolylineVolumeGeometry",1+t.length*T.Cartesian3.packedLength);e+=1+n.length*T.Cartesian2.packedLength,this.packedLength=e+T.Ellipsoid.packedLength+u.VertexFormat.packedLength+2}m.pack=function(e,t,n){n=c.defaultValue(n,0);var a,i=e._positions,o=i.length;for(t[n++]=o,a=0;a<o;++a,n+=T.Cartesian3.packedLength)T.Cartesian3.pack(i[a],t,n);var r=e._shape,o=r.length;for(t[n++]=o,a=0;a<o;++a,n+=T.Cartesian2.packedLength)T.Cartesian2.pack(r[a],t,n);return T.Ellipsoid.pack(e._ellipsoid,t,n),n+=T.Ellipsoid.packedLength,u.VertexFormat.pack(e._vertexFormat,t,n),n+=u.VertexFormat.packedLength,t[n++]=e._cornerType,t[n]=e._granularity,t};var b=T.Ellipsoid.clone(T.Ellipsoid.UNIT_SPHERE),v=new u.VertexFormat,y={polylinePositions:void 0,shapePositions:void 0,ellipsoid:b,vertexFormat:v,cornerType:void 0,granularity:void 0},U=(m.unpack=function(e,t,n){t=c.defaultValue(t,0);for(var a=e[t++],i=new Array(a),o=0;o<a;++o,t+=T.Cartesian3.packedLength)i[o]=T.Cartesian3.unpack(e,t);var a=e[t++],r=new Array(a);for(o=0;o<a;++o,t+=T.Cartesian2.packedLength)r[o]=T.Cartesian2.unpack(e,t);var l=T.Ellipsoid.unpack(e,t,b),d=(t+=T.Ellipsoid.packedLength,u.VertexFormat.unpack(e,t,v)),s=(t+=u.VertexFormat.packedLength,e[t++]),p=e[t];return c.defined(n)?(n._positions=i,n._shape=r,n._ellipsoid=T.Ellipsoid.clone(l,n._ellipsoid),n._vertexFormat=u.VertexFormat.clone(d,n._vertexFormat),n._cornerType=s,n._granularity=p,n):(y.polylinePositions=i,y.shapePositions=r,y.cornerType=s,y.granularity=p,new m(y))},new G.BoundingRectangle);return m.createGeometry=function(d){var c=d._positions,c=S.arrayRemoveDuplicates(c,T.Cartesian3.equalsEpsilon),u=d._shape,u=w.PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(u);if(!(c.length<2||u.length<3)){B.PolygonPipeline.computeWindingOrder2D(u)===B.WindingOrder.CLOCKWISE&&u.reverse();var e,m,y,g,h,t=G.BoundingRectangle.fromPoints(u,U),c=w.PolylineVolumeGeometryLibrary.computePositions(c,u,t,d,!0),f=u,u=t,t=d._vertexFormat,d=new O.GeometryAttributes,n=(t.position&&(d.position=new R.GeometryAttribute({componentDatatype:D.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:c})),f.length),b=c.length/3,v=(b-2*n)/(2*n),P=B.PolygonPipeline.triangulate(f),a=(v-1)*n*6+2*P.length,i=W.IndexDatatype.createTypedArray(b,a),E=2*n,o=0;for(p=0;p<v-1;p++){for(e=0;e<n-1;e++)h=(m=2*e+p*n*2)+E,g=(y=m+1)+E,i[o++]=y,i[o++]=m,i[o++]=g,i[o++]=g,i[o++]=m,i[o++]=h;g=(y=(m=2*n-2+p*n*2)+1)+E,h=m+E,i[o++]=y,i[o++]=m,i[o++]=g,i[o++]=g,i[o++]=m,i[o++]=h}if(t.st||t.tangent||t.bitangent){for(var _,r,l=new Float32Array(2*b),k=1/(v-1),C=1/u.height,L=u.height/2,s=0,p=0;p<v;p++){for(r=C*(f[0].y+L),l[s++]=_=p*k,l[s++]=r,e=1;e<n;e++)r=C*(f[e].y+L),l[s++]=_,l[s++]=r,l[s++]=_,l[s++]=r;r=C*(f[0].y+L),l[s++]=_,l[s++]=r}for(e=0;e<n;e++)r=C*(f[e].y+L),l[s++]=_=0,l[s++]=r;for(e=0;e<n;e++)r=C*(f[e].y+L),l[s++]=_=(v-1)*k,l[s++]=r;d.st=new R.GeometryAttribute({componentDatatype:D.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:new Float32Array(l)})}var V=b-2*n;for(p=0;p<P.length;p+=3){var F=P[p]+V,x=P[p+1]+V,A=P[p+2]+V;i[o++]=F,i[o++]=x,i[o++]=A,i[o++]=A+n,i[o++]=x+n,i[o++]=F+n}if(a=new R.Geometry({attributes:d,indices:i,boundingSphere:I.BoundingSphere.fromVertices(c),primitiveType:R.PrimitiveType.TRIANGLES}),t.normal&&(a=N.GeometryPipeline.computeNormal(a)),t.tangent||t.bitangent){try{a=N.GeometryPipeline.computeTangentAndBitangent(a)}catch(e){w.oneTimeWarning("polyline-volume-tangent-bitangent","Unable to compute tangents and bitangents for polyline volume geometry")}t.tangent||(a.attributes.tangent=void 0),t.bitangent||(a.attributes.bitangent=void 0),t.st||(a.attributes.st=void 0)}return a}},function(e,t){return(e=c.defined(t)?m.unpack(e,t):e)._ellipsoid=T.Ellipsoid.clone(e._ellipsoid),m.createGeometry(e)}});
