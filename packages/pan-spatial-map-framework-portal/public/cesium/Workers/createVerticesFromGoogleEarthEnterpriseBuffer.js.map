{"version":3,"file":"createVerticesFromGoogleEarthEnterpriseBuffer.js","sources":["../../../../Source/WorkersES6/createVerticesFromGoogleEarthEnterpriseBuffer.js"],"sourcesContent":["import AxisAlignedBoundingBox from '../Core/AxisAlignedBoundingBox.js';\r\nimport BoundingSphere from '../Core/BoundingSphere.js';\r\nimport Cartesian2 from '../Core/Cartesian2.js';\r\nimport Cartesian3 from '../Core/Cartesian3.js';\r\nimport Cartographic from '../Core/Cartographic.js';\r\nimport defaultValue from '../Core/defaultValue.js';\r\nimport defined from '../Core/defined.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\nimport EllipsoidalOccluder from '../Core/EllipsoidalOccluder.js';\r\nimport CesiumMath from '../Core/Math.js';\r\nimport Matrix4 from '../Core/Matrix4.js';\r\nimport OrientedBoundingBox from '../Core/OrientedBoundingBox.js';\r\nimport Rectangle from '../Core/Rectangle.js';\r\nimport RuntimeError from '../Core/RuntimeError.js';\r\nimport TerrainEncoding from '../Core/TerrainEncoding.js';\r\nimport Transforms from '../Core/Transforms.js';\r\nimport WebMercatorProjection from '../Core/WebMercatorProjection.js';\r\nimport createTaskProcessorWorker from './createTaskProcessorWorker.js';\r\n\r\nvar sizeOfUint16 = Uint16Array.BYTES_PER_ELEMENT;\r\nvar sizeOfInt32 = Int32Array.BYTES_PER_ELEMENT;\r\nvar sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;\r\nvar sizeOfFloat = Float32Array.BYTES_PER_ELEMENT;\r\nvar sizeOfDouble = Float64Array.BYTES_PER_ELEMENT;\r\n\r\nfunction indexOfEpsilon(arr, elem, elemType) {\r\n    elemType = defaultValue(elemType, CesiumMath);\r\n    var count = arr.length;\r\n    for (var i = 0; i < count; ++i) {\r\n        if (elemType.equalsEpsilon(arr[i], elem, CesiumMath.EPSILON12)) {\r\n            return i;\r\n        }\r\n    }\r\n\r\n    return -1;\r\n}\r\n\r\nfunction createVerticesFromGoogleEarthEnterpriseBuffer(parameters, transferableObjects) {\r\n    parameters.ellipsoid = Ellipsoid.clone(parameters.ellipsoid);\r\n    parameters.rectangle = Rectangle.clone(parameters.rectangle);\r\n\r\n    var statistics = processBuffer(\r\n        parameters.buffer,\r\n        parameters.relativeToCenter,\r\n        parameters.ellipsoid,\r\n        parameters.rectangle,\r\n        parameters.nativeRectangle,\r\n        parameters.exaggeration,\r\n        parameters.exaggerationRelativeHeight,\r\n        parameters.skirtHeight,\r\n        parameters.includeWebMercatorT,\r\n        parameters.negativeAltitudeExponentBias,\r\n        parameters.negativeElevationThreshold\r\n    );\r\n    var vertices = statistics.vertices;\r\n    transferableObjects.push(vertices.buffer);\r\n    var indices = statistics.indices;\r\n    transferableObjects.push(indices.buffer);\r\n\r\n    return {\r\n        vertices: vertices.buffer,\r\n        indices: indices.buffer,\r\n        numberOfAttributes: statistics.encoding.stride,\r\n        minimumHeight: statistics.minimumHeight,\r\n        maximumHeight: statistics.maximumHeight,\r\n        boundingSphere3D: statistics.boundingSphere3D,\r\n        orientedBoundingBox: statistics.orientedBoundingBox,\r\n        occludeePointInScaledSpace: statistics.occludeePointInScaledSpace,\r\n        encoding: statistics.encoding,\r\n        vertexCountWithoutSkirts: statistics.vertexCountWithoutSkirts,\r\n        indexCountWithoutSkirts: statistics.indexCountWithoutSkirts,\r\n        westIndicesSouthToNorth: statistics.westIndicesSouthToNorth,\r\n        southIndicesEastToWest: statistics.southIndicesEastToWest,\r\n        eastIndicesNorthToSouth: statistics.eastIndicesNorthToSouth,\r\n        northIndicesWestToEast: statistics.northIndicesWestToEast\r\n    };\r\n}\r\n\r\nvar scratchCartographic = new Cartographic();\r\nvar scratchCartesian = new Cartesian3();\r\nvar minimumScratch = new Cartesian3();\r\nvar maximumScratch = new Cartesian3();\r\nvar matrix4Scratch = new Matrix4();\r\n\r\nfunction processBuffer(\r\n    buffer,\r\n    relativeToCenter,\r\n    ellipsoid,\r\n    rectangle,\r\n    nativeRectangle,\r\n    exaggeration,\r\n    exaggerationRelativeHeight,\r\n    skirtHeight,\r\n    includeWebMercatorT,\r\n    negativeAltitudeExponentBias,\r\n    negativeElevationThreshold\r\n) {\r\n    var geographicWest;\r\n    var geographicSouth;\r\n    var geographicEast;\r\n    var geographicNorth;\r\n    var rectangleWidth, rectangleHeight;\r\n\r\n    if (!defined(rectangle)) {\r\n        geographicWest = CesiumMath.toRadians(nativeRectangle.west);\r\n        geographicSouth = CesiumMath.toRadians(nativeRectangle.south);\r\n        geographicEast = CesiumMath.toRadians(nativeRectangle.east);\r\n        geographicNorth = CesiumMath.toRadians(nativeRectangle.north);\r\n        rectangleWidth = CesiumMath.toRadians(rectangle.width);\r\n        rectangleHeight = CesiumMath.toRadians(rectangle.height);\r\n    } else {\r\n        geographicWest = rectangle.west;\r\n        geographicSouth = rectangle.south;\r\n        geographicEast = rectangle.east;\r\n        geographicNorth = rectangle.north;\r\n        rectangleWidth = rectangle.width;\r\n        rectangleHeight = rectangle.height;\r\n    }\r\n\r\n    // Keep track of quad borders so we can remove duplicates around the borders\r\n    var quadBorderLatitudes = [geographicSouth, geographicNorth];\r\n    var quadBorderLongitudes = [geographicWest, geographicEast];\r\n\r\n    var fromENU = Transforms.eastNorthUpToFixedFrame(relativeToCenter, ellipsoid);\r\n    var toENU = Matrix4.inverseTransformation(fromENU, matrix4Scratch);\r\n\r\n    var southMercatorY;\r\n    var oneOverMercatorHeight;\r\n    if (includeWebMercatorT) {\r\n        southMercatorY = WebMercatorProjection.geodeticLatitudeToMercatorAngle(geographicSouth);\r\n        oneOverMercatorHeight = 1.0 / (WebMercatorProjection.geodeticLatitudeToMercatorAngle(geographicNorth) - southMercatorY);\r\n    }\r\n\r\n    var hasExaggeration = exaggeration !== 1.0;\r\n    var includeGeodeticSurfaceNormals = hasExaggeration;\r\n\r\n    var dv = new DataView(buffer);\r\n\r\n    var minHeight = Number.POSITIVE_INFINITY;\r\n    var maxHeight = Number.NEGATIVE_INFINITY;\r\n\r\n    var minimum = minimumScratch;\r\n    minimum.x = Number.POSITIVE_INFINITY;\r\n    minimum.y = Number.POSITIVE_INFINITY;\r\n    minimum.z = Number.POSITIVE_INFINITY;\r\n\r\n    var maximum = maximumScratch;\r\n    maximum.x = Number.NEGATIVE_INFINITY;\r\n    maximum.y = Number.NEGATIVE_INFINITY;\r\n    maximum.z = Number.NEGATIVE_INFINITY;\r\n\r\n    // Compute sizes\r\n    var offset = 0;\r\n    var size = 0;\r\n    var indicesSize = 0;\r\n    var quadSize;\r\n    var quad;\r\n    for (quad = 0; quad < 4; ++quad) {\r\n        var o = offset;\r\n        quadSize = dv.getUint32(o, true);\r\n        o += sizeOfUint32;\r\n\r\n        var x = CesiumMath.toRadians(dv.getFloat64(o, true) * 180.0);\r\n        o += sizeOfDouble;\r\n        if (indexOfEpsilon(quadBorderLongitudes, x) === -1) {\r\n            quadBorderLongitudes.push(x);\r\n        }\r\n\r\n        var y = CesiumMath.toRadians(dv.getFloat64(o, true) * 180.0);\r\n        o += sizeOfDouble;\r\n        if (indexOfEpsilon(quadBorderLatitudes, y) === -1) {\r\n            quadBorderLatitudes.push(y);\r\n        }\r\n\r\n        o += 2 * sizeOfDouble; // stepX + stepY\r\n\r\n        var c = dv.getInt32(o, true); // Read point count\r\n        o += sizeOfInt32;\r\n        size += c;\r\n\r\n        c = dv.getInt32(o, true); // Read index count\r\n        indicesSize += c * 3;\r\n\r\n        offset += quadSize + sizeOfUint32; // Jump to next quad\r\n    }\r\n\r\n    // Quad Border points to remove duplicates\r\n    var quadBorderPoints = [];\r\n    var quadBorderIndices = [];\r\n\r\n    // Create arrays\r\n    var positions = new Array(size);\r\n    var uvs = new Array(size);\r\n    var heights = new Array(size);\r\n    var webMercatorTs = includeWebMercatorT ? new Array(size) : [];\r\n    var geodeticSurfaceNormals = includeGeodeticSurfaceNormals ? new Array(size) : [];\r\n    var indices = new Array(indicesSize);\r\n\r\n    // Points are laid out in rows starting at SW, so storing border points as we\r\n    //  come across them all points will be adjacent.\r\n    var westBorder = [];\r\n    var southBorder = [];\r\n    var eastBorder = [];\r\n    var northBorder = [];\r\n\r\n    // Each tile is split into 4 parts\r\n    var pointOffset = 0;\r\n    var indicesOffset = 0;\r\n    offset = 0;\r\n    for (quad = 0; quad < 4; ++quad) {\r\n        quadSize = dv.getUint32(offset, true);\r\n        offset += sizeOfUint32;\r\n        var startQuad = offset;\r\n\r\n        var originX = CesiumMath.toRadians(dv.getFloat64(offset, true) * 180.0);\r\n        offset += sizeOfDouble;\r\n\r\n        var originY = CesiumMath.toRadians(dv.getFloat64(offset, true) * 180.0);\r\n        offset += sizeOfDouble;\r\n\r\n        var stepX = CesiumMath.toRadians(dv.getFloat64(offset, true) * 180.0);\r\n        var halfStepX = stepX * 0.5;\r\n        offset += sizeOfDouble;\r\n\r\n        var stepY = CesiumMath.toRadians(dv.getFloat64(offset, true) * 180.0);\r\n        var halfStepY = stepY * 0.5;\r\n        offset += sizeOfDouble;\r\n\r\n        var numPoints = dv.getInt32(offset, true);\r\n        offset += sizeOfInt32;\r\n\r\n        var numFaces = dv.getInt32(offset, true);\r\n        offset += sizeOfInt32;\r\n\r\n        //var level = dv.getInt32(offset, true);\r\n        offset += sizeOfInt32;\r\n\r\n        // Keep track of quad indices to overall tile indices\r\n        var indicesMapping = new Array(numPoints);\r\n        for (var i = 0; i < numPoints; ++i) {\r\n            var longitude = originX + dv.getUint8(offset++) * stepX;\r\n            scratchCartographic.longitude = longitude;\r\n            var latitude = originY + dv.getUint8(offset++) * stepY;\r\n            scratchCartographic.latitude = latitude;\r\n\r\n            var height = dv.getFloat32(offset, true);\r\n            offset += sizeOfFloat;\r\n\r\n            // In order to support old clients, negative altitude values are stored as\r\n            // height/-2^32. Old clients see the value as really close to 0 but new clients multiply\r\n            // by -2^32 to get the real negative altitude value.\r\n            if (height !== 0 && height < negativeElevationThreshold) {\r\n                height *= -Math.pow(2, negativeAltitudeExponentBias);\r\n            }\r\n\r\n            // Height is stored in units of (1/EarthRadius) or (1/6371010.0)\r\n            height *= 6371010.0;\r\n\r\n            scratchCartographic.height = height;\r\n\r\n            // Is it along a quad border - if so check if already exists and use that index\r\n            if (indexOfEpsilon(quadBorderLongitudes, longitude) !== -1 || indexOfEpsilon(quadBorderLatitudes, latitude) !== -1) {\r\n                var index = indexOfEpsilon(quadBorderPoints, scratchCartographic, Cartographic);\r\n                if (index === -1) {\r\n                    quadBorderPoints.push(Cartographic.clone(scratchCartographic));\r\n                    quadBorderIndices.push(pointOffset);\r\n                } else {\r\n                    indicesMapping[i] = quadBorderIndices[index];\r\n                    continue;\r\n                }\r\n            }\r\n            indicesMapping[i] = pointOffset;\r\n\r\n            if (Math.abs(longitude - geographicWest) < halfStepX) {\r\n                westBorder.push({\r\n                    index: pointOffset,\r\n                    cartographic: Cartographic.clone(scratchCartographic)\r\n                });\r\n            } else if (Math.abs(longitude - geographicEast) < halfStepX) {\r\n                eastBorder.push({\r\n                    index: pointOffset,\r\n                    cartographic: Cartographic.clone(scratchCartographic)\r\n                });\r\n            } else if (Math.abs(latitude - geographicSouth) < halfStepY) {\r\n                southBorder.push({\r\n                    index: pointOffset,\r\n                    cartographic: Cartographic.clone(scratchCartographic)\r\n                });\r\n            } else if (Math.abs(latitude - geographicNorth) < halfStepY) {\r\n                northBorder.push({\r\n                    index: pointOffset,\r\n                    cartographic: Cartographic.clone(scratchCartographic)\r\n                });\r\n            }\r\n\r\n            minHeight = Math.min(height, minHeight);\r\n            maxHeight = Math.max(height, maxHeight);\r\n            heights[pointOffset] = height;\r\n\r\n            var pos = ellipsoid.cartographicToCartesian(scratchCartographic);\r\n            positions[pointOffset] = pos;\r\n\r\n            if (includeWebMercatorT) {\r\n                webMercatorTs[pointOffset] = (WebMercatorProjection.geodeticLatitudeToMercatorAngle(latitude) - southMercatorY) * oneOverMercatorHeight;\r\n            }\r\n\r\n            if (includeGeodeticSurfaceNormals) {\r\n                var normal = ellipsoid.geodeticSurfaceNormal(pos);\r\n                geodeticSurfaceNormals[pointOffset] = normal;\r\n            }\r\n\r\n            Matrix4.multiplyByPoint(toENU, pos, scratchCartesian);\r\n\r\n            Cartesian3.minimumByComponent(scratchCartesian, minimum, minimum);\r\n            Cartesian3.maximumByComponent(scratchCartesian, maximum, maximum);\r\n\r\n            var u = (longitude - geographicWest) / (geographicEast - geographicWest);\r\n            u = CesiumMath.clamp(u, 0.0, 1.0);\r\n            var v = (latitude - geographicSouth) / (geographicNorth - geographicSouth);\r\n            v = CesiumMath.clamp(v, 0.0, 1.0);\r\n\r\n            uvs[pointOffset] = new Cartesian2(u, v);\r\n            ++pointOffset;\r\n        }\r\n\r\n        var facesElementCount = numFaces * 3;\r\n        for (var j = 0; j < facesElementCount; ++j, ++indicesOffset) {\r\n            indices[indicesOffset] = indicesMapping[dv.getUint16(offset, true)];\r\n            offset += sizeOfUint16;\r\n        }\r\n\r\n        if (quadSize !== offset - startQuad) {\r\n            throw new RuntimeError('Invalid terrain tile.');\r\n        }\r\n    }\r\n\r\n    positions.length = pointOffset;\r\n    uvs.length = pointOffset;\r\n    heights.length = pointOffset;\r\n    if (includeWebMercatorT) {\r\n        webMercatorTs.length = pointOffset;\r\n    }\r\n    if (includeGeodeticSurfaceNormals) {\r\n        geodeticSurfaceNormals.length = pointOffset;\r\n    }\r\n\r\n    var vertexCountWithoutSkirts = pointOffset;\r\n    var indexCountWithoutSkirts = indicesOffset;\r\n\r\n    // Add skirt points\r\n    var skirtOptions = {\r\n        hMin: minHeight,\r\n        lastBorderPoint: undefined,\r\n        skirtHeight: skirtHeight,\r\n        toENU: toENU,\r\n        ellipsoid: ellipsoid,\r\n        minimum: minimum,\r\n        maximum: maximum\r\n    };\r\n\r\n    // Sort counter clockwise from NW corner\r\n    // Corner points are in the east/west arrays\r\n    westBorder.sort(function (a, b) {\r\n        return b.cartographic.latitude - a.cartographic.latitude;\r\n    });\r\n    southBorder.sort(function (a, b) {\r\n        return a.cartographic.longitude - b.cartographic.longitude;\r\n    });\r\n    eastBorder.sort(function (a, b) {\r\n        return a.cartographic.latitude - b.cartographic.latitude;\r\n    });\r\n    northBorder.sort(function (a, b) {\r\n        return b.cartographic.longitude - a.cartographic.longitude;\r\n    });\r\n\r\n    var percentage = 0.00001;\r\n    addSkirt(positions, heights, uvs, webMercatorTs, geodeticSurfaceNormals, indices, skirtOptions, westBorder, -percentage * rectangleWidth, true, -percentage * rectangleHeight);\r\n    addSkirt(positions, heights, uvs, webMercatorTs, geodeticSurfaceNormals, indices, skirtOptions, southBorder, -percentage * rectangleHeight, false);\r\n    addSkirt(positions, heights, uvs, webMercatorTs, geodeticSurfaceNormals, indices, skirtOptions, eastBorder, percentage * rectangleWidth, true, percentage * rectangleHeight);\r\n    addSkirt(positions, heights, uvs, webMercatorTs, geodeticSurfaceNormals, indices, skirtOptions, northBorder, percentage * rectangleHeight, false);\r\n\r\n    // Since the corner between the north and west sides is in the west array, generate the last\r\n    //  two triangles between the last north vertex and the first west vertex\r\n    if (westBorder.length > 0 && northBorder.length > 0) {\r\n        var firstBorderIndex = westBorder[0].index;\r\n        var firstSkirtIndex = vertexCountWithoutSkirts;\r\n        var lastBorderIndex = northBorder[northBorder.length - 1].index;\r\n        var lastSkirtIndex = positions.length - 1;\r\n\r\n        indices.push(lastBorderIndex, lastSkirtIndex, firstSkirtIndex, firstSkirtIndex, firstBorderIndex, lastBorderIndex);\r\n    }\r\n\r\n    size = positions.length; // Get new size with skirt vertices\r\n\r\n    var boundingSphere3D = BoundingSphere.fromPoints(positions);\r\n    var orientedBoundingBox;\r\n    if (defined(rectangle)) {\r\n        orientedBoundingBox = OrientedBoundingBox.fromRectangle(rectangle, minHeight, maxHeight, ellipsoid);\r\n    }\r\n\r\n    var occluder = new EllipsoidalOccluder(ellipsoid);\r\n    var occludeePointInScaledSpace = occluder.computeHorizonCullingPointPossiblyUnderEllipsoid(relativeToCenter, positions, minHeight);\r\n\r\n    var aaBox = new AxisAlignedBoundingBox(minimum, maximum, relativeToCenter);\r\n    var encoding = new TerrainEncoding(\r\n        relativeToCenter,\r\n        aaBox,\r\n        skirtOptions.hMin,\r\n        maxHeight,\r\n        fromENU,\r\n        false,\r\n        includeWebMercatorT,\r\n        includeGeodeticSurfaceNormals,\r\n        exaggeration,\r\n        exaggerationRelativeHeight\r\n    );\r\n    var vertices = new Float32Array(size * encoding.stride);\r\n\r\n    var bufferIndex = 0;\r\n    for (var k = 0; k < size; ++k) {\r\n        bufferIndex = encoding.encode(vertices, bufferIndex, positions[k], uvs[k], heights[k], undefined, webMercatorTs[k], geodeticSurfaceNormals[k]);\r\n    }\r\n\r\n    var westIndicesSouthToNorth = westBorder\r\n        .map(function (vertex) {\r\n            return vertex.index;\r\n        })\r\n        .reverse();\r\n    var southIndicesEastToWest = southBorder\r\n        .map(function (vertex) {\r\n            return vertex.index;\r\n        })\r\n        .reverse();\r\n    var eastIndicesNorthToSouth = eastBorder\r\n        .map(function (vertex) {\r\n            return vertex.index;\r\n        })\r\n        .reverse();\r\n    var northIndicesWestToEast = northBorder\r\n        .map(function (vertex) {\r\n            return vertex.index;\r\n        })\r\n        .reverse();\r\n\r\n    southIndicesEastToWest.unshift(eastIndicesNorthToSouth[eastIndicesNorthToSouth.length - 1]);\r\n    southIndicesEastToWest.push(westIndicesSouthToNorth[0]);\r\n\r\n    northIndicesWestToEast.unshift(westIndicesSouthToNorth[westIndicesSouthToNorth.length - 1]);\r\n    northIndicesWestToEast.push(eastIndicesNorthToSouth[0]);\r\n\r\n    return {\r\n        vertices: vertices,\r\n        indices: new Uint16Array(indices),\r\n        maximumHeight: maxHeight,\r\n        minimumHeight: minHeight,\r\n        encoding: encoding,\r\n        boundingSphere3D: boundingSphere3D,\r\n        orientedBoundingBox: orientedBoundingBox,\r\n        occludeePointInScaledSpace: occludeePointInScaledSpace,\r\n        vertexCountWithoutSkirts: vertexCountWithoutSkirts,\r\n        indexCountWithoutSkirts: indexCountWithoutSkirts,\r\n        westIndicesSouthToNorth: westIndicesSouthToNorth,\r\n        southIndicesEastToWest: southIndicesEastToWest,\r\n        eastIndicesNorthToSouth: eastIndicesNorthToSouth,\r\n        northIndicesWestToEast: northIndicesWestToEast\r\n    };\r\n}\r\n\r\nfunction addSkirt(positions, heights, uvs, webMercatorTs, geodeticSurfaceNormals, indices, skirtOptions, borderPoints, fudgeFactor, eastOrWest, cornerFudge) {\r\n    var count = borderPoints.length;\r\n    for (var j = 0; j < count; ++j) {\r\n        var borderPoint = borderPoints[j];\r\n        var borderCartographic = borderPoint.cartographic;\r\n        var borderIndex = borderPoint.index;\r\n        var currentIndex = positions.length;\r\n\r\n        var longitude = borderCartographic.longitude;\r\n        var latitude = borderCartographic.latitude;\r\n        latitude = CesiumMath.clamp(latitude, -CesiumMath.PI_OVER_TWO, CesiumMath.PI_OVER_TWO); // Don't go over the poles\r\n        var height = borderCartographic.height - skirtOptions.skirtHeight;\r\n        skirtOptions.hMin = Math.min(skirtOptions.hMin, height);\r\n\r\n        Cartographic.fromRadians(longitude, latitude, height, scratchCartographic);\r\n\r\n        // Adjust sides to angle out\r\n        if (eastOrWest) {\r\n            scratchCartographic.longitude += fudgeFactor;\r\n        }\r\n\r\n        // Adjust top or bottom to angle out\r\n        // Since corners are in the east/west arrays angle the first and last points as well\r\n        if (!eastOrWest) {\r\n            scratchCartographic.latitude += fudgeFactor;\r\n        } else if (j === count - 1) {\r\n            scratchCartographic.latitude += cornerFudge;\r\n        } else if (j === 0) {\r\n            scratchCartographic.latitude -= cornerFudge;\r\n        }\r\n\r\n        var pos = skirtOptions.ellipsoid.cartographicToCartesian(scratchCartographic);\r\n        positions.push(pos);\r\n        heights.push(height);\r\n        uvs.push(Cartesian2.clone(uvs[borderIndex])); // Copy UVs from border point\r\n        if (webMercatorTs.length > 0) {\r\n            webMercatorTs.push(webMercatorTs[borderIndex]);\r\n        }\r\n        if (geodeticSurfaceNormals.length > 0) {\r\n            geodeticSurfaceNormals.push(geodeticSurfaceNormals[borderIndex]);\r\n        }\r\n\r\n        Matrix4.multiplyByPoint(skirtOptions.toENU, pos, scratchCartesian);\r\n\r\n        var minimum = skirtOptions.minimum;\r\n        var maximum = skirtOptions.maximum;\r\n        Cartesian3.minimumByComponent(scratchCartesian, minimum, minimum);\r\n        Cartesian3.maximumByComponent(scratchCartesian, maximum, maximum);\r\n\r\n        var lastBorderPoint = skirtOptions.lastBorderPoint;\r\n        if (defined(lastBorderPoint)) {\r\n            var lastBorderIndex = lastBorderPoint.index;\r\n            indices.push(lastBorderIndex, currentIndex - 1, currentIndex, currentIndex, borderIndex, lastBorderIndex);\r\n        }\r\n\r\n        skirtOptions.lastBorderPoint = borderPoint;\r\n    }\r\n}\r\nexport default createTaskProcessorWorker(createVerticesFromGoogleEarthEnterpriseBuffer);\r\n"],"names":["defaultValue","CesiumMath","Ellipsoid","Rectangle","Cartographic","Cartesian3","Matrix4","defined","Transforms","WebMercatorProjection","Cartesian2","RuntimeError","BoundingSphere","OrientedBoundingBox","EllipsoidalOccluder","AxisAlignedBoundingBox","TerrainEncoding"],"mappings":"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"}