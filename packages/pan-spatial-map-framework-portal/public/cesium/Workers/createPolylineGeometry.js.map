{"version":3,"file":"createPolylineGeometry.js","sources":["../../../../Source/Core/PolylineGeometry.js","../../../../Source/WorkersES6/createPolylineGeometry.js"],"sourcesContent":["import ArcType from './ArcType.js';\r\nimport arrayRemoveDuplicates from './arrayRemoveDuplicates.js';\r\nimport BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Color from './Color.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport GeometryType from './GeometryType.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport CesiumMath from './Math.js';\r\nimport PolylinePipeline from './PolylinePipeline.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\nimport VertexFormat from './VertexFormat.js';\r\n\r\nvar scratchInterpolateColorsArray = [];\r\n\r\nfunction interpolateColors(p0, p1, color0, color1, numPoints) {\r\n    var colors = scratchInterpolateColorsArray;\r\n    colors.length = numPoints;\r\n    var i;\r\n\r\n    var r0 = color0.red;\r\n    var g0 = color0.green;\r\n    var b0 = color0.blue;\r\n    var a0 = color0.alpha;\r\n\r\n    var r1 = color1.red;\r\n    var g1 = color1.green;\r\n    var b1 = color1.blue;\r\n    var a1 = color1.alpha;\r\n\r\n    if (Color.equals(color0, color1)) {\r\n        for (i = 0; i < numPoints; i++) {\r\n            colors[i] = Color.clone(color0);\r\n        }\r\n        return colors;\r\n    }\r\n\r\n    var redPerVertex = (r1 - r0) / numPoints;\r\n    var greenPerVertex = (g1 - g0) / numPoints;\r\n    var bluePerVertex = (b1 - b0) / numPoints;\r\n    var alphaPerVertex = (a1 - a0) / numPoints;\r\n\r\n    for (i = 0; i < numPoints; i++) {\r\n        colors[i] = new Color(r0 + i * redPerVertex, g0 + i * greenPerVertex, b0 + i * bluePerVertex, a0 + i * alphaPerVertex);\r\n    }\r\n\r\n    return colors;\r\n}\r\n\r\n/**\r\n * A description of a polyline modeled as a line strip; the first two positions define a line segment,\r\n * and each additional position defines a line segment from the previous position. The polyline is capable of\r\n * displaying with a material.\r\n *\r\n * @alias PolylineGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.positions An array of {@link Cartesian3} defining the positions in the polyline as a line strip.\r\n * @param {Number} [options.width=1.0] The width in pixels.\r\n * @param {Color[]} [options.colors] An Array of {@link Color} defining the per vertex or per segment colors.\r\n * @param {Boolean} [options.colorsPerVertex=false] A boolean that determines whether the colors will be flat across each segment of the line or interpolated across the vertices.\r\n * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polyline segments must follow.\r\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude if options.arcType is not ArcType.NONE. Determines the number of positions in the buffer.\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n *\r\n * @exception {DeveloperError} At least two positions are required.\r\n * @exception {DeveloperError} width must be greater than or equal to one.\r\n * @exception {DeveloperError} colors has an invalid length.\r\n *\r\n * @see PolylineGeometry#createGeometry\r\n *\r\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Polyline.html|Cesium Sandcastle Polyline Demo}\r\n *\r\n * @example\r\n * // A polyline with two connected line segments\r\n * var polyline = new Cesium.PolylineGeometry({\r\n *   positions : Cesium.Cartesian3.fromDegreesArray([\r\n *     0.0, 0.0,\r\n *     5.0, 0.0,\r\n *     5.0, 5.0\r\n *   ]),\r\n *   width : 10.0\r\n * });\r\n * var geometry = Cesium.PolylineGeometry.createGeometry(polyline);\r\n */\r\nfunction PolylineGeometry(options) {\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n    var positions = options.positions;\r\n    var colors = options.colors;\r\n    var width = defaultValue(options.width, 1.0);\r\n    var colorsPerVertex = defaultValue(options.colorsPerVertex, false);\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(positions) || positions.length < 2) {\r\n        throw new DeveloperError('At least two positions are required.');\r\n    }\r\n    if (typeof width !== 'number') {\r\n        throw new DeveloperError('width must be a number');\r\n    }\r\n    if (defined(colors) && ((colorsPerVertex && colors.length < positions.length) || (!colorsPerVertex && colors.length < positions.length - 1))) {\r\n        throw new DeveloperError('colors has an invalid length.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    this._positions = positions;\r\n    this._colors = colors;\r\n    this._width = width;\r\n    this._colorsPerVertex = colorsPerVertex;\r\n    this._vertexFormat = VertexFormat.clone(defaultValue(options.vertexFormat, VertexFormat.DEFAULT));\r\n\r\n    this._arcType = defaultValue(options.arcType, ArcType.GEODESIC);\r\n    this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n    this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\r\n    this._workerName = 'createPolylineGeometry';\r\n\r\n    var numComponents = 1 + positions.length * Cartesian3.packedLength;\r\n    numComponents += defined(colors) ? 1 + colors.length * Color.packedLength : 1;\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    this.packedLength = numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 4;\r\n}\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {PolylineGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nPolylineGeometry.pack = function (value, array, startingIndex) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(value)) {\r\n        throw new DeveloperError('value is required');\r\n    }\r\n    if (!defined(array)) {\r\n        throw new DeveloperError('array is required');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    var i;\r\n\r\n    var positions = value._positions;\r\n    var length = positions.length;\r\n    array[startingIndex++] = length;\r\n\r\n    for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n        Cartesian3.pack(positions[i], array, startingIndex);\r\n    }\r\n\r\n    var colors = value._colors;\r\n    length = defined(colors) ? colors.length : 0.0;\r\n    array[startingIndex++] = length;\r\n\r\n    for (i = 0; i < length; ++i, startingIndex += Color.packedLength) {\r\n        Color.pack(colors[i], array, startingIndex);\r\n    }\r\n\r\n    Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n    startingIndex += Ellipsoid.packedLength;\r\n\r\n    VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n    startingIndex += VertexFormat.packedLength;\r\n\r\n    array[startingIndex++] = value._width;\r\n    array[startingIndex++] = value._colorsPerVertex ? 1.0 : 0.0;\r\n    array[startingIndex++] = value._arcType;\r\n    array[startingIndex] = value._granularity;\r\n\r\n    return array;\r\n};\r\n\r\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\nvar scratchVertexFormat = new VertexFormat();\r\nvar scratchOptions = {\r\n    positions: undefined,\r\n    colors: undefined,\r\n    ellipsoid: scratchEllipsoid,\r\n    vertexFormat: scratchVertexFormat,\r\n    width: undefined,\r\n    colorsPerVertex: undefined,\r\n    arcType: undefined,\r\n    granularity: undefined\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {PolylineGeometry} [result] The object into which to store the result.\r\n * @returns {PolylineGeometry} The modified result parameter or a new PolylineGeometry instance if one was not provided.\r\n */\r\nPolylineGeometry.unpack = function (array, startingIndex, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(array)) {\r\n        throw new DeveloperError('array is required');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    var i;\r\n\r\n    var length = array[startingIndex++];\r\n    var positions = new Array(length);\r\n\r\n    for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n        positions[i] = Cartesian3.unpack(array, startingIndex);\r\n    }\r\n\r\n    length = array[startingIndex++];\r\n    var colors = length > 0 ? new Array(length) : undefined;\r\n\r\n    for (i = 0; i < length; ++i, startingIndex += Color.packedLength) {\r\n        colors[i] = Color.unpack(array, startingIndex);\r\n    }\r\n\r\n    var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n    startingIndex += Ellipsoid.packedLength;\r\n\r\n    var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\r\n    startingIndex += VertexFormat.packedLength;\r\n\r\n    var width = array[startingIndex++];\r\n    var colorsPerVertex = array[startingIndex++] === 1.0;\r\n    var arcType = array[startingIndex++];\r\n    var granularity = array[startingIndex];\r\n\r\n    if (!defined(result)) {\r\n        scratchOptions.positions = positions;\r\n        scratchOptions.colors = colors;\r\n        scratchOptions.width = width;\r\n        scratchOptions.colorsPerVertex = colorsPerVertex;\r\n        scratchOptions.arcType = arcType;\r\n        scratchOptions.granularity = granularity;\r\n        return new PolylineGeometry(scratchOptions);\r\n    }\r\n\r\n    result._positions = positions;\r\n    result._colors = colors;\r\n    result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n    result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n    result._width = width;\r\n    result._colorsPerVertex = colorsPerVertex;\r\n    result._arcType = arcType;\r\n    result._granularity = granularity;\r\n\r\n    return result;\r\n};\r\n\r\nvar scratchCartesian3 = new Cartesian3();\r\nvar scratchPosition = new Cartesian3();\r\nvar scratchPrevPosition = new Cartesian3();\r\nvar scratchNextPosition = new Cartesian3();\r\n\r\n/**\r\n * Computes the geometric representation of a polyline, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {PolylineGeometry} polylineGeometry A description of the polyline.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nPolylineGeometry.createGeometry = function (polylineGeometry) {\r\n    var width = polylineGeometry._width;\r\n    var vertexFormat = polylineGeometry._vertexFormat;\r\n    var colors = polylineGeometry._colors;\r\n    var colorsPerVertex = polylineGeometry._colorsPerVertex;\r\n    var arcType = polylineGeometry._arcType;\r\n    var granularity = polylineGeometry._granularity;\r\n    var ellipsoid = polylineGeometry._ellipsoid;\r\n\r\n    var i;\r\n    var j;\r\n    var k;\r\n\r\n    var removedIndices = [];\r\n    var positions = arrayRemoveDuplicates(polylineGeometry._positions, Cartesian3.equalsEpsilon, false, removedIndices);\r\n\r\n    if (defined(colors) && removedIndices.length > 0) {\r\n        var removedArrayIndex = 0;\r\n        var nextRemovedIndex = removedIndices[0];\r\n        colors = colors.filter(function (color, index) {\r\n            var remove = false;\r\n            if (colorsPerVertex) {\r\n                remove = index === nextRemovedIndex || (index === 0 && nextRemovedIndex === 1);\r\n            } else {\r\n                remove = index + 1 === nextRemovedIndex;\r\n            }\r\n\r\n            if (remove) {\r\n                removedArrayIndex++;\r\n                nextRemovedIndex = removedIndices[removedArrayIndex];\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n    }\r\n\r\n    var positionsLength = positions.length;\r\n\r\n    // A width of a pixel or less is not a valid geometry, but in order to support external data\r\n    // that may have errors we treat this as an empty geometry.\r\n    if (positionsLength < 2 || width <= 0.0) {\r\n        return undefined;\r\n    }\r\n\r\n    if (arcType === ArcType.GEODESIC || arcType === ArcType.RHUMB) {\r\n        var subdivisionSize;\r\n        var numberOfPointsFunction;\r\n        if (arcType === ArcType.GEODESIC) {\r\n            subdivisionSize = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\r\n            numberOfPointsFunction = PolylinePipeline.numberOfPoints;\r\n        } else {\r\n            subdivisionSize = granularity;\r\n            numberOfPointsFunction = PolylinePipeline.numberOfPointsRhumbLine;\r\n        }\r\n\r\n        var heights = PolylinePipeline.extractHeights(positions, ellipsoid);\r\n\r\n        if (defined(colors)) {\r\n            var colorLength = 1;\r\n            for (i = 0; i < positionsLength - 1; ++i) {\r\n                colorLength += numberOfPointsFunction(positions[i], positions[i + 1], subdivisionSize);\r\n            }\r\n\r\n            var newColors = new Array(colorLength);\r\n            var newColorIndex = 0;\r\n\r\n            for (i = 0; i < positionsLength - 1; ++i) {\r\n                var p0 = positions[i];\r\n                var p1 = positions[i + 1];\r\n                var c0 = colors[i];\r\n\r\n                var numColors = numberOfPointsFunction(p0, p1, subdivisionSize);\r\n                if (colorsPerVertex && i < colorLength) {\r\n                    var c1 = colors[i + 1];\r\n                    var interpolatedColors = interpolateColors(p0, p1, c0, c1, numColors);\r\n                    var interpolatedColorsLength = interpolatedColors.length;\r\n                    for (j = 0; j < interpolatedColorsLength; ++j) {\r\n                        newColors[newColorIndex++] = interpolatedColors[j];\r\n                    }\r\n                } else {\r\n                    for (j = 0; j < numColors; ++j) {\r\n                        newColors[newColorIndex++] = Color.clone(c0);\r\n                    }\r\n                }\r\n            }\r\n\r\n            newColors[newColorIndex] = Color.clone(colors[colors.length - 1]);\r\n            colors = newColors;\r\n\r\n            scratchInterpolateColorsArray.length = 0;\r\n        }\r\n\r\n        if (arcType === ArcType.GEODESIC) {\r\n            positions = PolylinePipeline.generateCartesianArc({\r\n                positions: positions,\r\n                minDistance: subdivisionSize,\r\n                ellipsoid: ellipsoid,\r\n                height: heights\r\n            });\r\n        } else {\r\n            positions = PolylinePipeline.generateCartesianRhumbArc({\r\n                positions: positions,\r\n                granularity: subdivisionSize,\r\n                ellipsoid: ellipsoid,\r\n                height: heights\r\n            });\r\n        }\r\n    }\r\n\r\n    positionsLength = positions.length;\r\n    var size = positionsLength * 4.0 - 4.0;\r\n\r\n    var finalPositions = new Float64Array(size * 3);\r\n    var prevPositions = new Float64Array(size * 3);\r\n    var nextPositions = new Float64Array(size * 3);\r\n    var expandAndWidth = new Float32Array(size * 2);\r\n    var st = vertexFormat.st ? new Float32Array(size * 2) : undefined;\r\n    var finalColors = defined(colors) ? new Uint8Array(size * 4) : undefined;\r\n\r\n    var positionIndex = 0;\r\n    var expandAndWidthIndex = 0;\r\n    var stIndex = 0;\r\n    var colorIndex = 0;\r\n    var position;\r\n\r\n    for (j = 0; j < positionsLength; ++j) {\r\n        if (j === 0) {\r\n            position = scratchCartesian3;\r\n            Cartesian3.subtract(positions[0], positions[1], position);\r\n            Cartesian3.add(positions[0], position, position);\r\n        } else {\r\n            position = positions[j - 1];\r\n        }\r\n\r\n        Cartesian3.clone(position, scratchPrevPosition);\r\n        Cartesian3.clone(positions[j], scratchPosition);\r\n\r\n        if (j === positionsLength - 1) {\r\n            position = scratchCartesian3;\r\n            Cartesian3.subtract(positions[positionsLength - 1], positions[positionsLength - 2], position);\r\n            Cartesian3.add(positions[positionsLength - 1], position, position);\r\n        } else {\r\n            position = positions[j + 1];\r\n        }\r\n\r\n        Cartesian3.clone(position, scratchNextPosition);\r\n\r\n        var color0, color1;\r\n        if (defined(finalColors)) {\r\n            if (j !== 0 && !colorsPerVertex) {\r\n                color0 = colors[j - 1];\r\n            } else {\r\n                color0 = colors[j];\r\n            }\r\n\r\n            if (j !== positionsLength - 1) {\r\n                color1 = colors[j];\r\n            }\r\n        }\r\n\r\n        var startK = j === 0 ? 2 : 0;\r\n        var endK = j === positionsLength - 1 ? 2 : 4;\r\n\r\n        for (k = startK; k < endK; ++k) {\r\n            Cartesian3.pack(scratchPosition, finalPositions, positionIndex);\r\n            Cartesian3.pack(scratchPrevPosition, prevPositions, positionIndex);\r\n            Cartesian3.pack(scratchNextPosition, nextPositions, positionIndex);\r\n            positionIndex += 3;\r\n\r\n            var direction = k - 2 < 0 ? -1.0 : 1.0;\r\n            expandAndWidth[expandAndWidthIndex++] = 2 * (k % 2) - 1; // expand direction\r\n            expandAndWidth[expandAndWidthIndex++] = direction * width;\r\n\r\n            if (vertexFormat.st) {\r\n                st[stIndex++] = j / (positionsLength - 1);\r\n                st[stIndex++] = Math.max(expandAndWidth[expandAndWidthIndex - 2], 0.0);\r\n            }\r\n\r\n            if (defined(finalColors)) {\r\n                var color = k < 2 ? color0 : color1;\r\n\r\n                finalColors[colorIndex++] = Color.floatToByte(color.red);\r\n                finalColors[colorIndex++] = Color.floatToByte(color.green);\r\n                finalColors[colorIndex++] = Color.floatToByte(color.blue);\r\n                finalColors[colorIndex++] = Color.floatToByte(color.alpha);\r\n            }\r\n        }\r\n    }\r\n\r\n    var attributes = new GeometryAttributes();\r\n\r\n    attributes.position = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.DOUBLE,\r\n        componentsPerAttribute: 3,\r\n        values: finalPositions\r\n    });\r\n\r\n    attributes.prevPosition = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.DOUBLE,\r\n        componentsPerAttribute: 3,\r\n        values: prevPositions\r\n    });\r\n\r\n    attributes.nextPosition = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.DOUBLE,\r\n        componentsPerAttribute: 3,\r\n        values: nextPositions\r\n    });\r\n\r\n    attributes.expandAndWidth = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.FLOAT,\r\n        componentsPerAttribute: 2,\r\n        values: expandAndWidth\r\n    });\r\n\r\n    if (vertexFormat.st) {\r\n        attributes.st = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 2,\r\n            values: st\r\n        });\r\n    }\r\n\r\n    if (defined(finalColors)) {\r\n        attributes.color = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n            componentsPerAttribute: 4,\r\n            values: finalColors,\r\n            normalize: true\r\n        });\r\n    }\r\n\r\n    var indices = IndexDatatype.createTypedArray(size, positionsLength * 6 - 6);\r\n    var index = 0;\r\n    var indicesIndex = 0;\r\n    var length = positionsLength - 1.0;\r\n    for (j = 0; j < length; ++j) {\r\n        indices[indicesIndex++] = index;\r\n        indices[indicesIndex++] = index + 2;\r\n        indices[indicesIndex++] = index + 1;\r\n\r\n        indices[indicesIndex++] = index + 1;\r\n        indices[indicesIndex++] = index + 2;\r\n        indices[indicesIndex++] = index + 3;\r\n\r\n        index += 4;\r\n    }\r\n\r\n    return new Geometry({\r\n        attributes: attributes,\r\n        indices: indices,\r\n        primitiveType: PrimitiveType.TRIANGLES,\r\n        boundingSphere: BoundingSphere.fromPoints(positions),\r\n        geometryType: GeometryType.POLYLINES\r\n    });\r\n};\r\nexport default PolylineGeometry;\r\n","import defined from '../Core/defined.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\nimport PolylineGeometry from '../Core/PolylineGeometry.js';\r\n\r\nfunction createPolylineGeometry(polylineGeometry, offset) {\r\n    if (defined(offset)) {\r\n        polylineGeometry = PolylineGeometry.unpack(polylineGeometry, offset);\r\n    }\r\n    polylineGeometry._ellipsoid = Ellipsoid.clone(polylineGeometry._ellipsoid);\r\n    return PolylineGeometry.createGeometry(polylineGeometry);\r\n}\r\nexport default createPolylineGeometry;\r\n"],"names":["Color","defaultValue","defined","DeveloperError","VertexFormat","ArcType","CesiumMath","Ellipsoid","Cartesian3","arrayRemoveDuplicates","PolylinePipeline","GeometryAttributes","GeometryAttribute","ComponentDatatype","IndexDatatype","Geometry","PrimitiveType","BoundingSphere","GeometryType"],"mappings":"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"}