{"version":3,"file":"EllipseGeometry-fa40e9a0.js","sources":["../../../../Source/Core/EllipseGeometry.js"],"sourcesContent":["import arrayFill from './arrayFill.js';\r\nimport BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian2 from './Cartesian2.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Cartographic from './Cartographic.js';\r\nimport Check from './Check.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport EllipseGeometryLibrary from './EllipseGeometryLibrary.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport GeographicProjection from './GeographicProjection.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport GeometryInstance from './GeometryInstance.js';\r\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\r\nimport GeometryPipeline from './GeometryPipeline.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport CesiumMath from './Math.js';\r\nimport Matrix3 from './Matrix3.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\nimport Quaternion from './Quaternion.js';\r\nimport Rectangle from './Rectangle.js';\r\nimport VertexFormat from './VertexFormat.js';\r\n\r\nvar scratchCartesian1 = new Cartesian3();\r\nvar scratchCartesian2 = new Cartesian3();\r\nvar scratchCartesian3 = new Cartesian3();\r\nvar scratchCartesian4 = new Cartesian3();\r\nvar texCoordScratch = new Cartesian2();\r\nvar textureMatrixScratch = new Matrix3();\r\nvar tangentMatrixScratch = new Matrix3();\r\nvar quaternionScratch = new Quaternion();\r\n\r\nvar scratchNormal = new Cartesian3();\r\nvar scratchTangent = new Cartesian3();\r\nvar scratchBitangent = new Cartesian3();\r\n\r\nvar scratchCartographic = new Cartographic();\r\nvar projectedCenterScratch = new Cartesian3();\r\n\r\nvar scratchMinTexCoord = new Cartesian2();\r\nvar scratchMaxTexCoord = new Cartesian2();\r\n\r\nfunction computeTopBottomAttributes(positions, options, extrude) {\r\n    var vertexFormat = options.vertexFormat;\r\n    var center = options.center;\r\n    var semiMajorAxis = options.semiMajorAxis;\r\n    var semiMinorAxis = options.semiMinorAxis;\r\n    var ellipsoid = options.ellipsoid;\r\n    var stRotation = options.stRotation;\r\n    var size = extrude ? (positions.length / 3) * 2 : positions.length / 3;\r\n    var shadowVolume = options.shadowVolume;\r\n\r\n    var textureCoordinates = vertexFormat.st ? new Float32Array(size * 2) : undefined;\r\n    var normals = vertexFormat.normal ? new Float32Array(size * 3) : undefined;\r\n    var tangents = vertexFormat.tangent ? new Float32Array(size * 3) : undefined;\r\n    var bitangents = vertexFormat.bitangent ? new Float32Array(size * 3) : undefined;\r\n\r\n    var extrudeNormals = shadowVolume ? new Float32Array(size * 3) : undefined;\r\n\r\n    var textureCoordIndex = 0;\r\n\r\n    // Raise positions to a height above the ellipsoid and compute the\r\n    // texture coordinates, normals, tangents, and bitangents.\r\n    var normal = scratchNormal;\r\n    var tangent = scratchTangent;\r\n    var bitangent = scratchBitangent;\r\n\r\n    var projection = new GeographicProjection(ellipsoid);\r\n    var projectedCenter = projection.project(ellipsoid.cartesianToCartographic(center, scratchCartographic), projectedCenterScratch);\r\n\r\n    var geodeticNormal = ellipsoid.scaleToGeodeticSurface(center, scratchCartesian1);\r\n    ellipsoid.geodeticSurfaceNormal(geodeticNormal, geodeticNormal);\r\n\r\n    var textureMatrix = textureMatrixScratch;\r\n    var tangentMatrix = tangentMatrixScratch;\r\n    if (stRotation !== 0) {\r\n        var rotation = Quaternion.fromAxisAngle(geodeticNormal, stRotation, quaternionScratch);\r\n        textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrix);\r\n\r\n        rotation = Quaternion.fromAxisAngle(geodeticNormal, -stRotation, quaternionScratch);\r\n        tangentMatrix = Matrix3.fromQuaternion(rotation, tangentMatrix);\r\n    } else {\r\n        textureMatrix = Matrix3.clone(Matrix3.IDENTITY, textureMatrix);\r\n        tangentMatrix = Matrix3.clone(Matrix3.IDENTITY, tangentMatrix);\r\n    }\r\n\r\n    var minTexCoord = Cartesian2.fromElements(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, scratchMinTexCoord);\r\n    var maxTexCoord = Cartesian2.fromElements(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, scratchMaxTexCoord);\r\n\r\n    var length = positions.length;\r\n    var bottomOffset = extrude ? length : 0;\r\n    var stOffset = (bottomOffset / 3) * 2;\r\n    for (var i = 0; i < length; i += 3) {\r\n        var i1 = i + 1;\r\n        var i2 = i + 2;\r\n        var position = Cartesian3.fromArray(positions, i, scratchCartesian1);\r\n\r\n        if (vertexFormat.st) {\r\n            var rotatedPoint = Matrix3.multiplyByVector(textureMatrix, position, scratchCartesian2);\r\n            var projectedPoint = projection.project(ellipsoid.cartesianToCartographic(rotatedPoint, scratchCartographic), scratchCartesian3);\r\n            Cartesian3.subtract(projectedPoint, projectedCenter, projectedPoint);\r\n\r\n            texCoordScratch.x = (projectedPoint.x + semiMajorAxis) / (2.0 * semiMajorAxis);\r\n            texCoordScratch.y = (projectedPoint.y + semiMinorAxis) / (2.0 * semiMinorAxis);\r\n\r\n            minTexCoord.x = Math.min(texCoordScratch.x, minTexCoord.x);\r\n            minTexCoord.y = Math.min(texCoordScratch.y, minTexCoord.y);\r\n            maxTexCoord.x = Math.max(texCoordScratch.x, maxTexCoord.x);\r\n            maxTexCoord.y = Math.max(texCoordScratch.y, maxTexCoord.y);\r\n\r\n            if (extrude) {\r\n                textureCoordinates[textureCoordIndex + stOffset] = texCoordScratch.x;\r\n                textureCoordinates[textureCoordIndex + 1 + stOffset] = texCoordScratch.y;\r\n            }\r\n\r\n            textureCoordinates[textureCoordIndex++] = texCoordScratch.x;\r\n            textureCoordinates[textureCoordIndex++] = texCoordScratch.y;\r\n        }\r\n\r\n        if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent || shadowVolume) {\r\n            normal = ellipsoid.geodeticSurfaceNormal(position, normal);\r\n\r\n            if (shadowVolume) {\r\n                extrudeNormals[i + bottomOffset] = -normal.x;\r\n                extrudeNormals[i1 + bottomOffset] = -normal.y;\r\n                extrudeNormals[i2 + bottomOffset] = -normal.z;\r\n            }\r\n\r\n            if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\r\n                if (vertexFormat.tangent || vertexFormat.bitangent) {\r\n                    tangent = Cartesian3.normalize(Cartesian3.cross(Cartesian3.UNIT_Z, normal, tangent), tangent);\r\n                    Matrix3.multiplyByVector(tangentMatrix, tangent, tangent);\r\n                }\r\n                if (vertexFormat.normal) {\r\n                    normals[i] = normal.x;\r\n                    normals[i1] = normal.y;\r\n                    normals[i2] = normal.z;\r\n                    if (extrude) {\r\n                        normals[i + bottomOffset] = -normal.x;\r\n                        normals[i1 + bottomOffset] = -normal.y;\r\n                        normals[i2 + bottomOffset] = -normal.z;\r\n                    }\r\n                }\r\n\r\n                if (vertexFormat.tangent) {\r\n                    tangents[i] = tangent.x;\r\n                    tangents[i1] = tangent.y;\r\n                    tangents[i2] = tangent.z;\r\n                    if (extrude) {\r\n                        tangents[i + bottomOffset] = -tangent.x;\r\n                        tangents[i1 + bottomOffset] = -tangent.y;\r\n                        tangents[i2 + bottomOffset] = -tangent.z;\r\n                    }\r\n                }\r\n\r\n                if (vertexFormat.bitangent) {\r\n                    bitangent = Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\r\n                    bitangents[i] = bitangent.x;\r\n                    bitangents[i1] = bitangent.y;\r\n                    bitangents[i2] = bitangent.z;\r\n                    if (extrude) {\r\n                        bitangents[i + bottomOffset] = bitangent.x;\r\n                        bitangents[i1 + bottomOffset] = bitangent.y;\r\n                        bitangents[i2 + bottomOffset] = bitangent.z;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (vertexFormat.st) {\r\n        length = textureCoordinates.length;\r\n        for (var k = 0; k < length; k += 2) {\r\n            textureCoordinates[k] = (textureCoordinates[k] - minTexCoord.x) / (maxTexCoord.x - minTexCoord.x);\r\n            textureCoordinates[k + 1] = (textureCoordinates[k + 1] - minTexCoord.y) / (maxTexCoord.y - minTexCoord.y);\r\n        }\r\n    }\r\n\r\n    var attributes = new GeometryAttributes();\r\n\r\n    if (vertexFormat.position) {\r\n        var finalPositions = EllipseGeometryLibrary.raisePositionsToHeight(positions, options, extrude);\r\n        attributes.position = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute: 3,\r\n            values: finalPositions\r\n        });\r\n    }\r\n\r\n    if (vertexFormat.st) {\r\n        attributes.st = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 2,\r\n            values: textureCoordinates\r\n        });\r\n    }\r\n\r\n    if (vertexFormat.normal) {\r\n        attributes.normal = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 3,\r\n            values: normals\r\n        });\r\n    }\r\n\r\n    if (vertexFormat.tangent) {\r\n        attributes.tangent = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 3,\r\n            values: tangents\r\n        });\r\n    }\r\n\r\n    if (vertexFormat.bitangent) {\r\n        attributes.bitangent = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 3,\r\n            values: bitangents\r\n        });\r\n    }\r\n\r\n    if (shadowVolume) {\r\n        attributes.extrudeDirection = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 3,\r\n            values: extrudeNormals\r\n        });\r\n    }\r\n\r\n    if (extrude && defined(options.offsetAttribute)) {\r\n        var offsetAttribute = new Uint8Array(size);\r\n        if (options.offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n            offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\r\n        } else {\r\n            var offsetValue = options.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n            offsetAttribute = arrayFill(offsetAttribute, offsetValue);\r\n        }\r\n\r\n        attributes.applyOffset = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n            componentsPerAttribute: 1,\r\n            values: offsetAttribute\r\n        });\r\n    }\r\n\r\n    return attributes;\r\n}\r\n\r\nfunction topIndices(numPts) {\r\n    // numTriangles in half = 3 + 8 + 12 + ... = -1 + 4 + (4 + 4) + (4 + 4 + 4) + ... = -1 + 4 * (1 + 2 + 3 + ...)\r\n    //              = -1 + 4 * ((n * ( n + 1)) / 2)\r\n    // total triangles = 2 * numTrangles in half\r\n    // indices = total triangles * 3;\r\n    // Substitute numPts for n above\r\n\r\n    var indices = new Array(12 * (numPts * (numPts + 1)) - 6);\r\n    var indicesIndex = 0;\r\n    var prevIndex;\r\n    var numInterior;\r\n    var positionIndex;\r\n    var i;\r\n    var j;\r\n    // Indices triangles to the 'right' of the north vector\r\n\r\n    prevIndex = 0;\r\n    positionIndex = 1;\r\n    for (i = 0; i < 3; i++) {\r\n        indices[indicesIndex++] = positionIndex++;\r\n        indices[indicesIndex++] = prevIndex;\r\n        indices[indicesIndex++] = positionIndex;\r\n    }\r\n\r\n    for (i = 2; i < numPts + 1; ++i) {\r\n        positionIndex = i * (i + 1) - 1;\r\n        prevIndex = (i - 1) * i - 1;\r\n\r\n        indices[indicesIndex++] = positionIndex++;\r\n        indices[indicesIndex++] = prevIndex;\r\n        indices[indicesIndex++] = positionIndex;\r\n\r\n        numInterior = 2 * i;\r\n        for (j = 0; j < numInterior - 1; ++j) {\r\n            indices[indicesIndex++] = positionIndex;\r\n            indices[indicesIndex++] = prevIndex++;\r\n            indices[indicesIndex++] = prevIndex;\r\n\r\n            indices[indicesIndex++] = positionIndex++;\r\n            indices[indicesIndex++] = prevIndex;\r\n            indices[indicesIndex++] = positionIndex;\r\n        }\r\n\r\n        indices[indicesIndex++] = positionIndex++;\r\n        indices[indicesIndex++] = prevIndex;\r\n        indices[indicesIndex++] = positionIndex;\r\n    }\r\n\r\n    // Indices for center column of triangles\r\n    numInterior = numPts * 2;\r\n    ++positionIndex;\r\n    ++prevIndex;\r\n    for (i = 0; i < numInterior - 1; ++i) {\r\n        indices[indicesIndex++] = positionIndex;\r\n        indices[indicesIndex++] = prevIndex++;\r\n        indices[indicesIndex++] = prevIndex;\r\n\r\n        indices[indicesIndex++] = positionIndex++;\r\n        indices[indicesIndex++] = prevIndex;\r\n        indices[indicesIndex++] = positionIndex;\r\n    }\r\n\r\n    indices[indicesIndex++] = positionIndex;\r\n    indices[indicesIndex++] = prevIndex++;\r\n    indices[indicesIndex++] = prevIndex;\r\n\r\n    indices[indicesIndex++] = positionIndex++;\r\n    indices[indicesIndex++] = prevIndex++;\r\n    indices[indicesIndex++] = prevIndex;\r\n\r\n    // Reverse the process creating indices to the 'left' of the north vector\r\n    ++prevIndex;\r\n    for (i = numPts - 1; i > 1; --i) {\r\n        indices[indicesIndex++] = prevIndex++;\r\n        indices[indicesIndex++] = prevIndex;\r\n        indices[indicesIndex++] = positionIndex;\r\n\r\n        numInterior = 2 * i;\r\n        for (j = 0; j < numInterior - 1; ++j) {\r\n            indices[indicesIndex++] = positionIndex;\r\n            indices[indicesIndex++] = prevIndex++;\r\n            indices[indicesIndex++] = prevIndex;\r\n\r\n            indices[indicesIndex++] = positionIndex++;\r\n            indices[indicesIndex++] = prevIndex;\r\n            indices[indicesIndex++] = positionIndex;\r\n        }\r\n\r\n        indices[indicesIndex++] = prevIndex++;\r\n        indices[indicesIndex++] = prevIndex++;\r\n        indices[indicesIndex++] = positionIndex++;\r\n    }\r\n\r\n    for (i = 0; i < 3; i++) {\r\n        indices[indicesIndex++] = prevIndex++;\r\n        indices[indicesIndex++] = prevIndex;\r\n        indices[indicesIndex++] = positionIndex;\r\n    }\r\n    return indices;\r\n}\r\n\r\nvar boundingSphereCenter = new Cartesian3();\r\n\r\nfunction computeEllipse(options) {\r\n    var center = options.center;\r\n    boundingSphereCenter = Cartesian3.multiplyByScalar(options.ellipsoid.geodeticSurfaceNormal(center, boundingSphereCenter), options.height, boundingSphereCenter);\r\n    boundingSphereCenter = Cartesian3.add(center, boundingSphereCenter, boundingSphereCenter);\r\n    var boundingSphere = new BoundingSphere(boundingSphereCenter, options.semiMajorAxis);\r\n    var cep = EllipseGeometryLibrary.computeEllipsePositions(options, true, false);\r\n    var positions = cep.positions;\r\n    var numPts = cep.numPts;\r\n    var attributes = computeTopBottomAttributes(positions, options, false);\r\n    var indices = topIndices(numPts);\r\n    indices = IndexDatatype.createTypedArray(positions.length / 3, indices);\r\n    return {\r\n        boundingSphere: boundingSphere,\r\n        attributes: attributes,\r\n        indices: indices\r\n    };\r\n}\r\n\r\nfunction computeWallAttributes(positions, options) {\r\n    var vertexFormat = options.vertexFormat;\r\n    var center = options.center;\r\n    var semiMajorAxis = options.semiMajorAxis;\r\n    var semiMinorAxis = options.semiMinorAxis;\r\n    var ellipsoid = options.ellipsoid;\r\n    var height = options.height;\r\n    var extrudedHeight = options.extrudedHeight;\r\n    var stRotation = options.stRotation;\r\n    var size = (positions.length / 3) * 2;\r\n\r\n    var finalPositions = new Float64Array(size * 3);\r\n    var textureCoordinates = vertexFormat.st ? new Float32Array(size * 2) : undefined;\r\n    var normals = vertexFormat.normal ? new Float32Array(size * 3) : undefined;\r\n    var tangents = vertexFormat.tangent ? new Float32Array(size * 3) : undefined;\r\n    var bitangents = vertexFormat.bitangent ? new Float32Array(size * 3) : undefined;\r\n\r\n    var shadowVolume = options.shadowVolume;\r\n    var extrudeNormals = shadowVolume ? new Float32Array(size * 3) : undefined;\r\n\r\n    var textureCoordIndex = 0;\r\n\r\n    // Raise positions to a height above the ellipsoid and compute the\r\n    // texture coordinates, normals, tangents, and bitangents.\r\n    var normal = scratchNormal;\r\n    var tangent = scratchTangent;\r\n    var bitangent = scratchBitangent;\r\n\r\n    var projection = new GeographicProjection(ellipsoid);\r\n    var projectedCenter = projection.project(ellipsoid.cartesianToCartographic(center, scratchCartographic), projectedCenterScratch);\r\n\r\n    var geodeticNormal = ellipsoid.scaleToGeodeticSurface(center, scratchCartesian1);\r\n    ellipsoid.geodeticSurfaceNormal(geodeticNormal, geodeticNormal);\r\n    var rotation = Quaternion.fromAxisAngle(geodeticNormal, stRotation, quaternionScratch);\r\n    var textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrixScratch);\r\n\r\n    var minTexCoord = Cartesian2.fromElements(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, scratchMinTexCoord);\r\n    var maxTexCoord = Cartesian2.fromElements(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, scratchMaxTexCoord);\r\n\r\n    var length = positions.length;\r\n    var stOffset = (length / 3) * 2;\r\n    for (var i = 0; i < length; i += 3) {\r\n        var i1 = i + 1;\r\n        var i2 = i + 2;\r\n        var position = Cartesian3.fromArray(positions, i, scratchCartesian1);\r\n        var extrudedPosition;\r\n\r\n        if (vertexFormat.st) {\r\n            var rotatedPoint = Matrix3.multiplyByVector(textureMatrix, position, scratchCartesian2);\r\n            var projectedPoint = projection.project(ellipsoid.cartesianToCartographic(rotatedPoint, scratchCartographic), scratchCartesian3);\r\n            Cartesian3.subtract(projectedPoint, projectedCenter, projectedPoint);\r\n\r\n            texCoordScratch.x = (projectedPoint.x + semiMajorAxis) / (2.0 * semiMajorAxis);\r\n            texCoordScratch.y = (projectedPoint.y + semiMinorAxis) / (2.0 * semiMinorAxis);\r\n\r\n            minTexCoord.x = Math.min(texCoordScratch.x, minTexCoord.x);\r\n            minTexCoord.y = Math.min(texCoordScratch.y, minTexCoord.y);\r\n            maxTexCoord.x = Math.max(texCoordScratch.x, maxTexCoord.x);\r\n            maxTexCoord.y = Math.max(texCoordScratch.y, maxTexCoord.y);\r\n\r\n            textureCoordinates[textureCoordIndex + stOffset] = texCoordScratch.x;\r\n            textureCoordinates[textureCoordIndex + 1 + stOffset] = texCoordScratch.y;\r\n\r\n            textureCoordinates[textureCoordIndex++] = texCoordScratch.x;\r\n            textureCoordinates[textureCoordIndex++] = texCoordScratch.y;\r\n        }\r\n\r\n        position = ellipsoid.scaleToGeodeticSurface(position, position);\r\n        extrudedPosition = Cartesian3.clone(position, scratchCartesian2);\r\n        normal = ellipsoid.geodeticSurfaceNormal(position, normal);\r\n\r\n        if (shadowVolume) {\r\n            extrudeNormals[i + length] = -normal.x;\r\n            extrudeNormals[i1 + length] = -normal.y;\r\n            extrudeNormals[i2 + length] = -normal.z;\r\n        }\r\n\r\n        var scaledNormal = Cartesian3.multiplyByScalar(normal, height, scratchCartesian4);\r\n        position = Cartesian3.add(position, scaledNormal, position);\r\n        scaledNormal = Cartesian3.multiplyByScalar(normal, extrudedHeight, scaledNormal);\r\n        extrudedPosition = Cartesian3.add(extrudedPosition, scaledNormal, extrudedPosition);\r\n\r\n        if (vertexFormat.position) {\r\n            finalPositions[i + length] = extrudedPosition.x;\r\n            finalPositions[i1 + length] = extrudedPosition.y;\r\n            finalPositions[i2 + length] = extrudedPosition.z;\r\n\r\n            finalPositions[i] = position.x;\r\n            finalPositions[i1] = position.y;\r\n            finalPositions[i2] = position.z;\r\n        }\r\n\r\n        if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\r\n            bitangent = Cartesian3.clone(normal, bitangent);\r\n            var next = Cartesian3.fromArray(positions, (i + 3) % length, scratchCartesian4);\r\n            Cartesian3.subtract(next, position, next);\r\n            var bottom = Cartesian3.subtract(extrudedPosition, position, scratchCartesian3);\r\n\r\n            normal = Cartesian3.normalize(Cartesian3.cross(bottom, next, normal), normal);\r\n\r\n            if (vertexFormat.normal) {\r\n                normals[i] = normal.x;\r\n                normals[i1] = normal.y;\r\n                normals[i2] = normal.z;\r\n\r\n                normals[i + length] = normal.x;\r\n                normals[i1 + length] = normal.y;\r\n                normals[i2 + length] = normal.z;\r\n            }\r\n\r\n            if (vertexFormat.tangent) {\r\n                tangent = Cartesian3.normalize(Cartesian3.cross(bitangent, normal, tangent), tangent);\r\n                tangents[i] = tangent.x;\r\n                tangents[i1] = tangent.y;\r\n                tangents[i2] = tangent.z;\r\n\r\n                tangents[i + length] = tangent.x;\r\n                tangents[i + 1 + length] = tangent.y;\r\n                tangents[i + 2 + length] = tangent.z;\r\n            }\r\n\r\n            if (vertexFormat.bitangent) {\r\n                bitangents[i] = bitangent.x;\r\n                bitangents[i1] = bitangent.y;\r\n                bitangents[i2] = bitangent.z;\r\n\r\n                bitangents[i + length] = bitangent.x;\r\n                bitangents[i1 + length] = bitangent.y;\r\n                bitangents[i2 + length] = bitangent.z;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (vertexFormat.st) {\r\n        length = textureCoordinates.length;\r\n        for (var k = 0; k < length; k += 2) {\r\n            textureCoordinates[k] = (textureCoordinates[k] - minTexCoord.x) / (maxTexCoord.x - minTexCoord.x);\r\n            textureCoordinates[k + 1] = (textureCoordinates[k + 1] - minTexCoord.y) / (maxTexCoord.y - minTexCoord.y);\r\n        }\r\n    }\r\n\r\n    var attributes = new GeometryAttributes();\r\n\r\n    if (vertexFormat.position) {\r\n        attributes.position = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute: 3,\r\n            values: finalPositions\r\n        });\r\n    }\r\n\r\n    if (vertexFormat.st) {\r\n        attributes.st = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 2,\r\n            values: textureCoordinates\r\n        });\r\n    }\r\n\r\n    if (vertexFormat.normal) {\r\n        attributes.normal = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 3,\r\n            values: normals\r\n        });\r\n    }\r\n\r\n    if (vertexFormat.tangent) {\r\n        attributes.tangent = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 3,\r\n            values: tangents\r\n        });\r\n    }\r\n\r\n    if (vertexFormat.bitangent) {\r\n        attributes.bitangent = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 3,\r\n            values: bitangents\r\n        });\r\n    }\r\n\r\n    if (shadowVolume) {\r\n        attributes.extrudeDirection = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 3,\r\n            values: extrudeNormals\r\n        });\r\n    }\r\n\r\n    if (defined(options.offsetAttribute)) {\r\n        var offsetAttribute = new Uint8Array(size);\r\n        if (options.offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n            offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\r\n        } else {\r\n            var offsetValue = options.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n            offsetAttribute = arrayFill(offsetAttribute, offsetValue);\r\n        }\r\n        attributes.applyOffset = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n            componentsPerAttribute: 1,\r\n            values: offsetAttribute\r\n        });\r\n    }\r\n\r\n    return attributes;\r\n}\r\n\r\nfunction computeWallIndices(positions) {\r\n    var length = positions.length / 3;\r\n    var indices = IndexDatatype.createTypedArray(length, length * 6);\r\n    var index = 0;\r\n    for (var i = 0; i < length; i++) {\r\n        var UL = i;\r\n        var LL = i + length;\r\n        var UR = (UL + 1) % length;\r\n        var LR = UR + length;\r\n        indices[index++] = UL;\r\n        indices[index++] = LL;\r\n        indices[index++] = UR;\r\n        indices[index++] = UR;\r\n        indices[index++] = LL;\r\n        indices[index++] = LR;\r\n    }\r\n\r\n    return indices;\r\n}\r\n\r\nvar topBoundingSphere = new BoundingSphere();\r\nvar bottomBoundingSphere = new BoundingSphere();\r\n\r\nfunction computeExtrudedEllipse(options) {\r\n    var center = options.center;\r\n    var ellipsoid = options.ellipsoid;\r\n    var semiMajorAxis = options.semiMajorAxis;\r\n    var scaledNormal = Cartesian3.multiplyByScalar(ellipsoid.geodeticSurfaceNormal(center, scratchCartesian1), options.height, scratchCartesian1);\r\n    topBoundingSphere.center = Cartesian3.add(center, scaledNormal, topBoundingSphere.center);\r\n    topBoundingSphere.radius = semiMajorAxis;\r\n\r\n    scaledNormal = Cartesian3.multiplyByScalar(ellipsoid.geodeticSurfaceNormal(center, scaledNormal), options.extrudedHeight, scaledNormal);\r\n    bottomBoundingSphere.center = Cartesian3.add(center, scaledNormal, bottomBoundingSphere.center);\r\n    bottomBoundingSphere.radius = semiMajorAxis;\r\n\r\n    var cep = EllipseGeometryLibrary.computeEllipsePositions(options, true, true);\r\n    var positions = cep.positions;\r\n    var numPts = cep.numPts;\r\n    var outerPositions = cep.outerPositions;\r\n    var boundingSphere = BoundingSphere.union(topBoundingSphere, bottomBoundingSphere);\r\n    var topBottomAttributes = computeTopBottomAttributes(positions, options, true);\r\n    var indices = topIndices(numPts);\r\n    var length = indices.length;\r\n    indices.length = length * 2;\r\n    var posLength = positions.length / 3;\r\n    for (var i = 0; i < length; i += 3) {\r\n        indices[i + length] = indices[i + 2] + posLength;\r\n        indices[i + 1 + length] = indices[i + 1] + posLength;\r\n        indices[i + 2 + length] = indices[i] + posLength;\r\n    }\r\n\r\n    var topBottomIndices = IndexDatatype.createTypedArray((posLength * 2) / 3, indices);\r\n\r\n    var topBottomGeo = new Geometry({\r\n        attributes: topBottomAttributes,\r\n        indices: topBottomIndices,\r\n        primitiveType: PrimitiveType.TRIANGLES\r\n    });\r\n\r\n    var wallAttributes = computeWallAttributes(outerPositions, options);\r\n    indices = computeWallIndices(outerPositions);\r\n    var wallIndices = IndexDatatype.createTypedArray((outerPositions.length * 2) / 3, indices);\r\n\r\n    var wallGeo = new Geometry({\r\n        attributes: wallAttributes,\r\n        indices: wallIndices,\r\n        primitiveType: PrimitiveType.TRIANGLES\r\n    });\r\n\r\n    var geo = GeometryPipeline.combineInstances([\r\n        new GeometryInstance({\r\n            geometry: topBottomGeo\r\n        }),\r\n        new GeometryInstance({\r\n            geometry: wallGeo\r\n        })\r\n    ]);\r\n\r\n    return {\r\n        boundingSphere: boundingSphere,\r\n        attributes: geo[0].attributes,\r\n        indices: geo[0].indices\r\n    };\r\n}\r\n\r\nfunction computeRectangle(center, semiMajorAxis, semiMinorAxis, rotation, granularity, ellipsoid, result) {\r\n    var cep = EllipseGeometryLibrary.computeEllipsePositions(\r\n        {\r\n            center: center,\r\n            semiMajorAxis: semiMajorAxis,\r\n            semiMinorAxis: semiMinorAxis,\r\n            rotation: rotation,\r\n            granularity: granularity\r\n        },\r\n        false,\r\n        true\r\n    );\r\n    var positionsFlat = cep.outerPositions;\r\n    var positionsCount = positionsFlat.length / 3;\r\n    var positions = new Array(positionsCount);\r\n    for (var i = 0; i < positionsCount; ++i) {\r\n        positions[i] = Cartesian3.fromArray(positionsFlat, i * 3);\r\n    }\r\n    var rectangle = Rectangle.fromCartesianArray(positions, ellipsoid, result);\r\n    // Rectangle width goes beyond 180 degrees when the ellipse crosses a pole.\r\n    // When this happens, make the rectangle into a \"circle\" around the pole\r\n    if (rectangle.width > CesiumMath.PI) {\r\n        rectangle.north = rectangle.north > 0.0 ? CesiumMath.PI_OVER_TWO - CesiumMath.EPSILON7 : rectangle.north;\r\n        rectangle.south = rectangle.south < 0.0 ? CesiumMath.EPSILON7 - CesiumMath.PI_OVER_TWO : rectangle.south;\r\n        rectangle.east = CesiumMath.PI;\r\n        rectangle.west = -CesiumMath.PI;\r\n    }\r\n    return rectangle;\r\n}\r\n\r\n/**\r\n * A description of an ellipse on an ellipsoid. Ellipse geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\r\n *\r\n * @alias EllipseGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3} options.center The ellipse's center point in the fixed frame.\r\n * @param {Number} options.semiMajorAxis The length of the ellipse's semi-major axis in meters.\r\n * @param {Number} options.semiMinorAxis The length of the ellipse's semi-minor axis in meters.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the ellipse will be on.\r\n * @param {Number} [options.height=0.0] The distance in meters between the ellipse and the ellipsoid surface.\r\n * @param {Number} [options.extrudedHeight] The distance in meters between the ellipse's extruded face and the ellipsoid surface.\r\n * @param {Number} [options.rotation=0.0] The angle of rotation counter-clockwise from north.\r\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates counter-clockwise from north.\r\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The angular distance between points on the ellipse in radians.\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n *\r\n * @exception {DeveloperError} semiMajorAxis and semiMinorAxis must be greater than zero.\r\n * @exception {DeveloperError} semiMajorAxis must be greater than or equal to the semiMinorAxis.\r\n * @exception {DeveloperError} granularity must be greater than zero.\r\n *\r\n *\r\n * @example\r\n * // Create an ellipse.\r\n * var ellipse = new Cesium.EllipseGeometry({\r\n *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\r\n *   semiMajorAxis : 500000.0,\r\n *   semiMinorAxis : 300000.0,\r\n *   rotation : Cesium.Math.toRadians(60.0)\r\n * });\r\n * var geometry = Cesium.EllipseGeometry.createGeometry(ellipse);\r\n *\r\n * @see EllipseGeometry.createGeometry\r\n */\r\nfunction EllipseGeometry(options) {\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n    var center = options.center;\r\n    var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n    var semiMajorAxis = options.semiMajorAxis;\r\n    var semiMinorAxis = options.semiMinorAxis;\r\n    var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n    var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined('options.center', center);\r\n    Check.typeOf.number('options.semiMajorAxis', semiMajorAxis);\r\n    Check.typeOf.number('options.semiMinorAxis', semiMinorAxis);\r\n    if (semiMajorAxis < semiMinorAxis) {\r\n        throw new DeveloperError('semiMajorAxis must be greater than or equal to the semiMinorAxis.');\r\n    }\r\n    if (granularity <= 0.0) {\r\n        throw new DeveloperError('granularity must be greater than zero.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var height = defaultValue(options.height, 0.0);\r\n    var extrudedHeight = defaultValue(options.extrudedHeight, height);\r\n\r\n    this._center = Cartesian3.clone(center);\r\n    this._semiMajorAxis = semiMajorAxis;\r\n    this._semiMinorAxis = semiMinorAxis;\r\n    this._ellipsoid = Ellipsoid.clone(ellipsoid);\r\n    this._rotation = defaultValue(options.rotation, 0.0);\r\n    this._stRotation = defaultValue(options.stRotation, 0.0);\r\n    this._height = Math.max(extrudedHeight, height);\r\n    this._granularity = granularity;\r\n    this._vertexFormat = VertexFormat.clone(vertexFormat);\r\n    this._extrudedHeight = Math.min(extrudedHeight, height);\r\n    this._shadowVolume = defaultValue(options.shadowVolume, false);\r\n    this._workerName = 'createEllipseGeometry';\r\n    this._offsetAttribute = options.offsetAttribute;\r\n\r\n    this._rectangle = undefined;\r\n    this._textureCoordinateRotationPoints = undefined;\r\n}\r\n\r\n/**\r\n * The number of elements used to pack the object into an array.\r\n * @type {Number}\r\n */\r\nEllipseGeometry.packedLength = Cartesian3.packedLength + Ellipsoid.packedLength + VertexFormat.packedLength + 9;\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {EllipseGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nEllipseGeometry.pack = function (value, array, startingIndex) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined('value', value);\r\n    Check.defined('array', array);\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    Cartesian3.pack(value._center, array, startingIndex);\r\n    startingIndex += Cartesian3.packedLength;\r\n\r\n    Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n    startingIndex += Ellipsoid.packedLength;\r\n\r\n    VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n    startingIndex += VertexFormat.packedLength;\r\n\r\n    array[startingIndex++] = value._semiMajorAxis;\r\n    array[startingIndex++] = value._semiMinorAxis;\r\n    array[startingIndex++] = value._rotation;\r\n    array[startingIndex++] = value._stRotation;\r\n    array[startingIndex++] = value._height;\r\n    array[startingIndex++] = value._granularity;\r\n    array[startingIndex++] = value._extrudedHeight;\r\n    array[startingIndex++] = value._shadowVolume ? 1.0 : 0.0;\r\n    array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n    return array;\r\n};\r\n\r\nvar scratchCenter = new Cartesian3();\r\nvar scratchEllipsoid = new Ellipsoid();\r\nvar scratchVertexFormat = new VertexFormat();\r\nvar scratchOptions = {\r\n    center: scratchCenter,\r\n    ellipsoid: scratchEllipsoid,\r\n    vertexFormat: scratchVertexFormat,\r\n    semiMajorAxis: undefined,\r\n    semiMinorAxis: undefined,\r\n    rotation: undefined,\r\n    stRotation: undefined,\r\n    height: undefined,\r\n    granularity: undefined,\r\n    extrudedHeight: undefined,\r\n    shadowVolume: undefined,\r\n    offsetAttribute: undefined\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {EllipseGeometry} [result] The object into which to store the result.\r\n * @returns {EllipseGeometry} The modified result parameter or a new EllipseGeometry instance if one was not provided.\r\n */\r\nEllipseGeometry.unpack = function (array, startingIndex, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined('array', array);\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    var center = Cartesian3.unpack(array, startingIndex, scratchCenter);\r\n    startingIndex += Cartesian3.packedLength;\r\n\r\n    var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n    startingIndex += Ellipsoid.packedLength;\r\n\r\n    var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\r\n    startingIndex += VertexFormat.packedLength;\r\n\r\n    var semiMajorAxis = array[startingIndex++];\r\n    var semiMinorAxis = array[startingIndex++];\r\n    var rotation = array[startingIndex++];\r\n    var stRotation = array[startingIndex++];\r\n    var height = array[startingIndex++];\r\n    var granularity = array[startingIndex++];\r\n    var extrudedHeight = array[startingIndex++];\r\n    var shadowVolume = array[startingIndex++] === 1.0;\r\n    var offsetAttribute = array[startingIndex];\r\n\r\n    if (!defined(result)) {\r\n        scratchOptions.height = height;\r\n        scratchOptions.extrudedHeight = extrudedHeight;\r\n        scratchOptions.granularity = granularity;\r\n        scratchOptions.stRotation = stRotation;\r\n        scratchOptions.rotation = rotation;\r\n        scratchOptions.semiMajorAxis = semiMajorAxis;\r\n        scratchOptions.semiMinorAxis = semiMinorAxis;\r\n        scratchOptions.shadowVolume = shadowVolume;\r\n        scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n        return new EllipseGeometry(scratchOptions);\r\n    }\r\n\r\n    result._center = Cartesian3.clone(center, result._center);\r\n    result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n    result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n    result._semiMajorAxis = semiMajorAxis;\r\n    result._semiMinorAxis = semiMinorAxis;\r\n    result._rotation = rotation;\r\n    result._stRotation = stRotation;\r\n    result._height = height;\r\n    result._granularity = granularity;\r\n    result._extrudedHeight = extrudedHeight;\r\n    result._shadowVolume = shadowVolume;\r\n    result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Computes the bounding rectangle based on the provided options\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3} options.center The ellipse's center point in the fixed frame.\r\n * @param {Number} options.semiMajorAxis The length of the ellipse's semi-major axis in meters.\r\n * @param {Number} options.semiMinorAxis The length of the ellipse's semi-minor axis in meters.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the ellipse will be on.\r\n * @param {Number} [options.rotation=0.0] The angle of rotation counter-clockwise from north.\r\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The angular distance between points on the ellipse in radians.\r\n * @param {Rectangle} [result] An object in which to store the result\r\n *\r\n * @returns {Rectangle} The result rectangle\r\n */\r\nEllipseGeometry.computeRectangle = function (options, result) {\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n    var center = options.center;\r\n    var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n    var semiMajorAxis = options.semiMajorAxis;\r\n    var semiMinorAxis = options.semiMinorAxis;\r\n    var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n    var rotation = defaultValue(options.rotation, 0.0);\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined('options.center', center);\r\n    Check.typeOf.number('options.semiMajorAxis', semiMajorAxis);\r\n    Check.typeOf.number('options.semiMinorAxis', semiMinorAxis);\r\n    if (semiMajorAxis < semiMinorAxis) {\r\n        throw new DeveloperError('semiMajorAxis must be greater than or equal to the semiMinorAxis.');\r\n    }\r\n    if (granularity <= 0.0) {\r\n        throw new DeveloperError('granularity must be greater than zero.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    return computeRectangle(center, semiMajorAxis, semiMinorAxis, rotation, granularity, ellipsoid, result);\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of a ellipse on an ellipsoid, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {EllipseGeometry} ellipseGeometry A description of the ellipse.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nEllipseGeometry.createGeometry = function (ellipseGeometry) {\r\n    if (ellipseGeometry._semiMajorAxis <= 0.0 || ellipseGeometry._semiMinorAxis <= 0.0) {\r\n        return;\r\n    }\r\n\r\n    var height = ellipseGeometry._height;\r\n    var extrudedHeight = ellipseGeometry._extrudedHeight;\r\n    var extrude = !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\r\n\r\n    ellipseGeometry._center = ellipseGeometry._ellipsoid.scaleToGeodeticSurface(ellipseGeometry._center, ellipseGeometry._center);\r\n    var options = {\r\n        center: ellipseGeometry._center,\r\n        semiMajorAxis: ellipseGeometry._semiMajorAxis,\r\n        semiMinorAxis: ellipseGeometry._semiMinorAxis,\r\n        ellipsoid: ellipseGeometry._ellipsoid,\r\n        rotation: ellipseGeometry._rotation,\r\n        height: height,\r\n        granularity: ellipseGeometry._granularity,\r\n        vertexFormat: ellipseGeometry._vertexFormat,\r\n        stRotation: ellipseGeometry._stRotation\r\n    };\r\n    var geometry;\r\n    if (extrude) {\r\n        options.extrudedHeight = extrudedHeight;\r\n        options.shadowVolume = ellipseGeometry._shadowVolume;\r\n        options.offsetAttribute = ellipseGeometry._offsetAttribute;\r\n        geometry = computeExtrudedEllipse(options);\r\n    } else {\r\n        geometry = computeEllipse(options);\r\n\r\n        if (defined(ellipseGeometry._offsetAttribute)) {\r\n            var length = geometry.attributes.position.values.length;\r\n            var applyOffset = new Uint8Array(length / 3);\r\n            var offsetValue = ellipseGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n            arrayFill(applyOffset, offsetValue);\r\n            geometry.attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute: 1,\r\n                values: applyOffset\r\n            });\r\n        }\r\n    }\r\n\r\n    return new Geometry({\r\n        attributes: geometry.attributes,\r\n        indices: geometry.indices,\r\n        primitiveType: PrimitiveType.TRIANGLES,\r\n        boundingSphere: geometry.boundingSphere,\r\n        offsetAttribute: ellipseGeometry._offsetAttribute\r\n    });\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nEllipseGeometry.createShadowVolume = function (ellipseGeometry, minHeightFunc, maxHeightFunc) {\r\n    var granularity = ellipseGeometry._granularity;\r\n    var ellipsoid = ellipseGeometry._ellipsoid;\r\n\r\n    var minHeight = minHeightFunc(granularity, ellipsoid);\r\n    var maxHeight = maxHeightFunc(granularity, ellipsoid);\r\n\r\n    return new EllipseGeometry({\r\n        center: ellipseGeometry._center,\r\n        semiMajorAxis: ellipseGeometry._semiMajorAxis,\r\n        semiMinorAxis: ellipseGeometry._semiMinorAxis,\r\n        ellipsoid: ellipsoid,\r\n        rotation: ellipseGeometry._rotation,\r\n        stRotation: ellipseGeometry._stRotation,\r\n        granularity: granularity,\r\n        extrudedHeight: minHeight,\r\n        height: maxHeight,\r\n        vertexFormat: VertexFormat.POSITION_ONLY,\r\n        shadowVolume: true\r\n    });\r\n};\r\n\r\nfunction textureCoordinateRotationPoints(ellipseGeometry) {\r\n    var stRotation = -ellipseGeometry._stRotation;\r\n    if (stRotation === 0.0) {\r\n        return [0, 0, 0, 1, 1, 0];\r\n    }\r\n\r\n    var cep = EllipseGeometryLibrary.computeEllipsePositions(\r\n        {\r\n            center: ellipseGeometry._center,\r\n            semiMajorAxis: ellipseGeometry._semiMajorAxis,\r\n            semiMinorAxis: ellipseGeometry._semiMinorAxis,\r\n            rotation: ellipseGeometry._rotation,\r\n            granularity: ellipseGeometry._granularity\r\n        },\r\n        false,\r\n        true\r\n    );\r\n    var positionsFlat = cep.outerPositions;\r\n    var positionsCount = positionsFlat.length / 3;\r\n    var positions = new Array(positionsCount);\r\n    for (var i = 0; i < positionsCount; ++i) {\r\n        positions[i] = Cartesian3.fromArray(positionsFlat, i * 3);\r\n    }\r\n\r\n    var ellipsoid = ellipseGeometry._ellipsoid;\r\n    var boundingRectangle = ellipseGeometry.rectangle;\r\n    return Geometry._textureCoordinateRotationPoints(positions, stRotation, ellipsoid, boundingRectangle);\r\n}\r\n\r\nObject.defineProperties(EllipseGeometry.prototype, {\r\n    /**\r\n     * @private\r\n     */\r\n    rectangle: {\r\n        get: function () {\r\n            if (!defined(this._rectangle)) {\r\n                this._rectangle = computeRectangle(this._center, this._semiMajorAxis, this._semiMinorAxis, this._rotation, this._granularity, this._ellipsoid);\r\n            }\r\n            return this._rectangle;\r\n        }\r\n    },\r\n    /**\r\n     * For remapping texture coordinates when rendering EllipseGeometries as GroundPrimitives.\r\n     * @private\r\n     */\r\n    textureCoordinateRotationPoints: {\r\n        get: function () {\r\n            if (!defined(this._textureCoordinateRotationPoints)) {\r\n                this._textureCoordinateRotationPoints = textureCoordinateRotationPoints(this);\r\n            }\r\n            return this._textureCoordinateRotationPoints;\r\n        }\r\n    }\r\n});\r\nexport default EllipseGeometry;\r\n"],"names":["Cartesian3","Cartesian2","Matrix3","Quaternion","Cartographic","GeographicProjection","GeometryAttributes","EllipseGeometryLibrary","GeometryAttribute","ComponentDatatype","defined","GeometryOffsetAttribute","arrayFill","BoundingSphere","IndexDatatype","Geometry","PrimitiveType","GeometryPipeline","GeometryInstance","Rectangle","CesiumMath","defaultValue","Ellipsoid","VertexFormat","Check","DeveloperError"],"mappings":"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"}