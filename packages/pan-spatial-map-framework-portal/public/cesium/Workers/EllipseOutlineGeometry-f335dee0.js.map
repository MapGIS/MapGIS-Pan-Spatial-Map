{"version":3,"file":"EllipseOutlineGeometry-f335dee0.js","sources":["../../../../Source/Core/EllipseOutlineGeometry.js"],"sourcesContent":["import arrayFill from './arrayFill.js';\r\nimport BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport EllipseGeometryLibrary from './EllipseGeometryLibrary.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport CesiumMath from './Math.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\n\r\nvar scratchCartesian1 = new Cartesian3();\r\nvar boundingSphereCenter = new Cartesian3();\r\n\r\nfunction computeEllipse(options) {\r\n    var center = options.center;\r\n    boundingSphereCenter = Cartesian3.multiplyByScalar(options.ellipsoid.geodeticSurfaceNormal(center, boundingSphereCenter), options.height, boundingSphereCenter);\r\n    boundingSphereCenter = Cartesian3.add(center, boundingSphereCenter, boundingSphereCenter);\r\n    var boundingSphere = new BoundingSphere(boundingSphereCenter, options.semiMajorAxis);\r\n    var positions = EllipseGeometryLibrary.computeEllipsePositions(options, false, true).outerPositions;\r\n\r\n    var attributes = new GeometryAttributes({\r\n        position: new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute: 3,\r\n            values: EllipseGeometryLibrary.raisePositionsToHeight(positions, options, false)\r\n        })\r\n    });\r\n\r\n    var length = positions.length / 3;\r\n    var indices = IndexDatatype.createTypedArray(length, length * 2);\r\n    var index = 0;\r\n    for (var i = 0; i < length; ++i) {\r\n        indices[index++] = i;\r\n        indices[index++] = (i + 1) % length;\r\n    }\r\n\r\n    return {\r\n        boundingSphere: boundingSphere,\r\n        attributes: attributes,\r\n        indices: indices\r\n    };\r\n}\r\n\r\nvar topBoundingSphere = new BoundingSphere();\r\nvar bottomBoundingSphere = new BoundingSphere();\r\nfunction computeExtrudedEllipse(options) {\r\n    var center = options.center;\r\n    var ellipsoid = options.ellipsoid;\r\n    var semiMajorAxis = options.semiMajorAxis;\r\n    var scaledNormal = Cartesian3.multiplyByScalar(ellipsoid.geodeticSurfaceNormal(center, scratchCartesian1), options.height, scratchCartesian1);\r\n    topBoundingSphere.center = Cartesian3.add(center, scaledNormal, topBoundingSphere.center);\r\n    topBoundingSphere.radius = semiMajorAxis;\r\n\r\n    scaledNormal = Cartesian3.multiplyByScalar(ellipsoid.geodeticSurfaceNormal(center, scaledNormal), options.extrudedHeight, scaledNormal);\r\n    bottomBoundingSphere.center = Cartesian3.add(center, scaledNormal, bottomBoundingSphere.center);\r\n    bottomBoundingSphere.radius = semiMajorAxis;\r\n\r\n    var positions = EllipseGeometryLibrary.computeEllipsePositions(options, false, true).outerPositions;\r\n    var attributes = new GeometryAttributes({\r\n        position: new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute: 3,\r\n            values: EllipseGeometryLibrary.raisePositionsToHeight(positions, options, true)\r\n        })\r\n    });\r\n\r\n    positions = attributes.position.values;\r\n    var boundingSphere = BoundingSphere.union(topBoundingSphere, bottomBoundingSphere);\r\n    var length = positions.length / 3;\r\n\r\n    if (defined(options.offsetAttribute)) {\r\n        var applyOffset = new Uint8Array(length);\r\n        if (options.offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n            applyOffset = arrayFill(applyOffset, 1, 0, length / 2);\r\n        } else {\r\n            var offsetValue = options.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n            applyOffset = arrayFill(applyOffset, offsetValue);\r\n        }\r\n\r\n        attributes.applyOffset = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n            componentsPerAttribute: 1,\r\n            values: applyOffset\r\n        });\r\n    }\r\n\r\n    var numberOfVerticalLines = defaultValue(options.numberOfVerticalLines, 16);\r\n    numberOfVerticalLines = CesiumMath.clamp(numberOfVerticalLines, 0, length / 2);\r\n\r\n    var indices = IndexDatatype.createTypedArray(length, length * 2 + numberOfVerticalLines * 2);\r\n\r\n    length /= 2;\r\n    var index = 0;\r\n    var i;\r\n    for (i = 0; i < length; ++i) {\r\n        indices[index++] = i;\r\n        indices[index++] = (i + 1) % length;\r\n        indices[index++] = i + length;\r\n        indices[index++] = ((i + 1) % length) + length;\r\n    }\r\n\r\n    var numSide;\r\n    if (numberOfVerticalLines > 0) {\r\n        var numSideLines = Math.min(numberOfVerticalLines, length);\r\n        numSide = Math.round(length / numSideLines);\r\n\r\n        var maxI = Math.min(numSide * numberOfVerticalLines, length);\r\n        for (i = 0; i < maxI; i += numSide) {\r\n            indices[index++] = i;\r\n            indices[index++] = i + length;\r\n        }\r\n    }\r\n\r\n    return {\r\n        boundingSphere: boundingSphere,\r\n        attributes: attributes,\r\n        indices: indices\r\n    };\r\n}\r\n\r\n/**\r\n * A description of the outline of an ellipse on an ellipsoid.\r\n *\r\n * @alias EllipseOutlineGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3} options.center The ellipse's center point in the fixed frame.\r\n * @param {Number} options.semiMajorAxis The length of the ellipse's semi-major axis in meters.\r\n * @param {Number} options.semiMinorAxis The length of the ellipse's semi-minor axis in meters.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the ellipse will be on.\r\n * @param {Number} [options.height=0.0] The distance in meters between the ellipse and the ellipsoid surface.\r\n * @param {Number} [options.extrudedHeight] The distance in meters between the ellipse's extruded face and the ellipsoid surface.\r\n * @param {Number} [options.rotation=0.0] The angle from north (counter-clockwise) in radians.\r\n * @param {Number} [options.granularity=0.02] The angular distance between points on the ellipse in radians.\r\n * @param {Number} [options.numberOfVerticalLines=16] Number of lines to draw between the top and bottom surface of an extruded ellipse.\r\n *\r\n * @exception {DeveloperError} semiMajorAxis and semiMinorAxis must be greater than zero.\r\n * @exception {DeveloperError} semiMajorAxis must be greater than or equal to the semiMinorAxis.\r\n * @exception {DeveloperError} granularity must be greater than zero.\r\n *\r\n * @see EllipseOutlineGeometry.createGeometry\r\n *\r\n * @example\r\n * var ellipse = new Cesium.EllipseOutlineGeometry({\r\n *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\r\n *   semiMajorAxis : 500000.0,\r\n *   semiMinorAxis : 300000.0,\r\n *   rotation : Cesium.Math.toRadians(60.0)\r\n * });\r\n * var geometry = Cesium.EllipseOutlineGeometry.createGeometry(ellipse);\r\n */\r\nfunction EllipseOutlineGeometry(options) {\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n    var center = options.center;\r\n    var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n    var semiMajorAxis = options.semiMajorAxis;\r\n    var semiMinorAxis = options.semiMinorAxis;\r\n    var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(center)) {\r\n        throw new DeveloperError('center is required.');\r\n    }\r\n    if (!defined(semiMajorAxis)) {\r\n        throw new DeveloperError('semiMajorAxis is required.');\r\n    }\r\n    if (!defined(semiMinorAxis)) {\r\n        throw new DeveloperError('semiMinorAxis is required.');\r\n    }\r\n    if (semiMajorAxis < semiMinorAxis) {\r\n        throw new DeveloperError('semiMajorAxis must be greater than or equal to the semiMinorAxis.');\r\n    }\r\n    if (granularity <= 0.0) {\r\n        throw new DeveloperError('granularity must be greater than zero.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var height = defaultValue(options.height, 0.0);\r\n    var extrudedHeight = defaultValue(options.extrudedHeight, height);\r\n\r\n    this._center = Cartesian3.clone(center);\r\n    this._semiMajorAxis = semiMajorAxis;\r\n    this._semiMinorAxis = semiMinorAxis;\r\n    this._ellipsoid = Ellipsoid.clone(ellipsoid);\r\n    this._rotation = defaultValue(options.rotation, 0.0);\r\n    this._height = Math.max(extrudedHeight, height);\r\n    this._granularity = granularity;\r\n    this._extrudedHeight = Math.min(extrudedHeight, height);\r\n    this._numberOfVerticalLines = Math.max(defaultValue(options.numberOfVerticalLines, 16), 0);\r\n    this._offsetAttribute = options.offsetAttribute;\r\n    this._workerName = 'createEllipseOutlineGeometry';\r\n}\r\n\r\n/**\r\n * The number of elements used to pack the object into an array.\r\n * @type {Number}\r\n */\r\nEllipseOutlineGeometry.packedLength = Cartesian3.packedLength + Ellipsoid.packedLength + 8;\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {EllipseOutlineGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nEllipseOutlineGeometry.pack = function (value, array, startingIndex) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(value)) {\r\n        throw new DeveloperError('value is required');\r\n    }\r\n    if (!defined(array)) {\r\n        throw new DeveloperError('array is required');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    Cartesian3.pack(value._center, array, startingIndex);\r\n    startingIndex += Cartesian3.packedLength;\r\n\r\n    Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n    startingIndex += Ellipsoid.packedLength;\r\n\r\n    array[startingIndex++] = value._semiMajorAxis;\r\n    array[startingIndex++] = value._semiMinorAxis;\r\n    array[startingIndex++] = value._rotation;\r\n    array[startingIndex++] = value._height;\r\n    array[startingIndex++] = value._granularity;\r\n    array[startingIndex++] = value._extrudedHeight;\r\n    array[startingIndex++] = value._numberOfVerticalLines;\r\n    array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n    return array;\r\n};\r\n\r\nvar scratchCenter = new Cartesian3();\r\nvar scratchEllipsoid = new Ellipsoid();\r\nvar scratchOptions = {\r\n    center: scratchCenter,\r\n    ellipsoid: scratchEllipsoid,\r\n    semiMajorAxis: undefined,\r\n    semiMinorAxis: undefined,\r\n    rotation: undefined,\r\n    height: undefined,\r\n    granularity: undefined,\r\n    extrudedHeight: undefined,\r\n    numberOfVerticalLines: undefined,\r\n    offsetAttribute: undefined\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {EllipseOutlineGeometry} [result] The object into which to store the result.\r\n * @returns {EllipseOutlineGeometry} The modified result parameter or a new EllipseOutlineGeometry instance if one was not provided.\r\n */\r\nEllipseOutlineGeometry.unpack = function (array, startingIndex, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(array)) {\r\n        throw new DeveloperError('array is required');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    var center = Cartesian3.unpack(array, startingIndex, scratchCenter);\r\n    startingIndex += Cartesian3.packedLength;\r\n\r\n    var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n    startingIndex += Ellipsoid.packedLength;\r\n\r\n    var semiMajorAxis = array[startingIndex++];\r\n    var semiMinorAxis = array[startingIndex++];\r\n    var rotation = array[startingIndex++];\r\n    var height = array[startingIndex++];\r\n    var granularity = array[startingIndex++];\r\n    var extrudedHeight = array[startingIndex++];\r\n    var numberOfVerticalLines = array[startingIndex++];\r\n    var offsetAttribute = array[startingIndex];\r\n\r\n    if (!defined(result)) {\r\n        scratchOptions.height = height;\r\n        scratchOptions.extrudedHeight = extrudedHeight;\r\n        scratchOptions.granularity = granularity;\r\n        scratchOptions.rotation = rotation;\r\n        scratchOptions.semiMajorAxis = semiMajorAxis;\r\n        scratchOptions.semiMinorAxis = semiMinorAxis;\r\n        scratchOptions.numberOfVerticalLines = numberOfVerticalLines;\r\n        scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n        return new EllipseOutlineGeometry(scratchOptions);\r\n    }\r\n\r\n    result._center = Cartesian3.clone(center, result._center);\r\n    result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n    result._semiMajorAxis = semiMajorAxis;\r\n    result._semiMinorAxis = semiMinorAxis;\r\n    result._rotation = rotation;\r\n    result._height = height;\r\n    result._granularity = granularity;\r\n    result._extrudedHeight = extrudedHeight;\r\n    result._numberOfVerticalLines = numberOfVerticalLines;\r\n    result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of an outline of an ellipse on an ellipsoid, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {EllipseOutlineGeometry} ellipseGeometry A description of the ellipse.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nEllipseOutlineGeometry.createGeometry = function (ellipseGeometry) {\r\n    if (ellipseGeometry._semiMajorAxis <= 0.0 || ellipseGeometry._semiMinorAxis <= 0.0) {\r\n        return;\r\n    }\r\n\r\n    var height = ellipseGeometry._height;\r\n    var extrudedHeight = ellipseGeometry._extrudedHeight;\r\n    var extrude = !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\r\n\r\n    ellipseGeometry._center = ellipseGeometry._ellipsoid.scaleToGeodeticSurface(ellipseGeometry._center, ellipseGeometry._center);\r\n    var options = {\r\n        center: ellipseGeometry._center,\r\n        semiMajorAxis: ellipseGeometry._semiMajorAxis,\r\n        semiMinorAxis: ellipseGeometry._semiMinorAxis,\r\n        ellipsoid: ellipseGeometry._ellipsoid,\r\n        rotation: ellipseGeometry._rotation,\r\n        height: height,\r\n        granularity: ellipseGeometry._granularity,\r\n        numberOfVerticalLines: ellipseGeometry._numberOfVerticalLines\r\n    };\r\n    var geometry;\r\n    if (extrude) {\r\n        options.extrudedHeight = extrudedHeight;\r\n        options.offsetAttribute = ellipseGeometry._offsetAttribute;\r\n        geometry = computeExtrudedEllipse(options);\r\n    } else {\r\n        geometry = computeEllipse(options);\r\n\r\n        if (defined(ellipseGeometry._offsetAttribute)) {\r\n            var length = geometry.attributes.position.values.length;\r\n            var applyOffset = new Uint8Array(length / 3);\r\n            var offsetValue = ellipseGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n            arrayFill(applyOffset, offsetValue);\r\n            geometry.attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute: 1,\r\n                values: applyOffset\r\n            });\r\n        }\r\n    }\r\n\r\n    return new Geometry({\r\n        attributes: geometry.attributes,\r\n        indices: geometry.indices,\r\n        primitiveType: PrimitiveType.LINES,\r\n        boundingSphere: geometry.boundingSphere,\r\n        offsetAttribute: ellipseGeometry._offsetAttribute\r\n    });\r\n};\r\nexport default EllipseOutlineGeometry;\r\n"],"names":["Cartesian3","BoundingSphere","EllipseGeometryLibrary","GeometryAttributes","GeometryAttribute","ComponentDatatype","IndexDatatype","defined","GeometryOffsetAttribute","arrayFill","defaultValue","CesiumMath","Ellipsoid","DeveloperError","Geometry","PrimitiveType"],"mappings":"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"}