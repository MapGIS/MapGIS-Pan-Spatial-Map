{"version":3,"file":"EllipseGeometryLibrary-40b37a71.js","sources":["../../../../Source/Core/EllipseGeometryLibrary.js"],"sourcesContent":["import Cartesian3 from './Cartesian3.js';\r\nimport CesiumMath from './Math.js';\r\nimport Matrix3 from './Matrix3.js';\r\nimport Quaternion from './Quaternion.js';\r\n\r\nvar EllipseGeometryLibrary = {};\r\n\r\nvar rotAxis = new Cartesian3();\r\nvar tempVec = new Cartesian3();\r\nvar unitQuat = new Quaternion();\r\nvar rotMtx = new Matrix3();\r\n\r\nfunction pointOnEllipsoid(theta, rotation, northVec, eastVec, aSqr, ab, bSqr, mag, unitPos, result) {\r\n    var azimuth = theta + rotation;\r\n\r\n    Cartesian3.multiplyByScalar(eastVec, Math.cos(azimuth), rotAxis);\r\n    Cartesian3.multiplyByScalar(northVec, Math.sin(azimuth), tempVec);\r\n    Cartesian3.add(rotAxis, tempVec, rotAxis);\r\n\r\n    var cosThetaSquared = Math.cos(theta);\r\n    cosThetaSquared = cosThetaSquared * cosThetaSquared;\r\n\r\n    var sinThetaSquared = Math.sin(theta);\r\n    sinThetaSquared = sinThetaSquared * sinThetaSquared;\r\n\r\n    var radius = ab / Math.sqrt(bSqr * cosThetaSquared + aSqr * sinThetaSquared);\r\n    var angle = radius / mag;\r\n\r\n    // Create the quaternion to rotate the position vector to the boundary of the ellipse.\r\n    Quaternion.fromAxisAngle(rotAxis, angle, unitQuat);\r\n    Matrix3.fromQuaternion(unitQuat, rotMtx);\r\n\r\n    Matrix3.multiplyByVector(rotMtx, unitPos, result);\r\n    Cartesian3.normalize(result, result);\r\n    Cartesian3.multiplyByScalar(result, mag, result);\r\n    return result;\r\n}\r\n\r\nvar scratchCartesian1 = new Cartesian3();\r\nvar scratchCartesian2 = new Cartesian3();\r\nvar scratchCartesian3 = new Cartesian3();\r\nvar scratchNormal = new Cartesian3();\r\n/**\r\n * Returns the positions raised to the given heights\r\n * @private\r\n */\r\nEllipseGeometryLibrary.raisePositionsToHeight = function (positions, options, extrude) {\r\n    var ellipsoid = options.ellipsoid;\r\n    var height = options.height;\r\n    var extrudedHeight = options.extrudedHeight;\r\n    var size = extrude ? (positions.length / 3) * 2 : positions.length / 3;\r\n\r\n    var finalPositions = new Float64Array(size * 3);\r\n\r\n    var length = positions.length;\r\n    var bottomOffset = extrude ? length : 0;\r\n    for (var i = 0; i < length; i += 3) {\r\n        var i1 = i + 1;\r\n        var i2 = i + 2;\r\n\r\n        var position = Cartesian3.fromArray(positions, i, scratchCartesian1);\r\n        ellipsoid.scaleToGeodeticSurface(position, position);\r\n\r\n        var extrudedPosition = Cartesian3.clone(position, scratchCartesian2);\r\n        var normal = ellipsoid.geodeticSurfaceNormal(position, scratchNormal);\r\n        var scaledNormal = Cartesian3.multiplyByScalar(normal, height, scratchCartesian3);\r\n        Cartesian3.add(position, scaledNormal, position);\r\n\r\n        if (extrude) {\r\n            Cartesian3.multiplyByScalar(normal, extrudedHeight, scaledNormal);\r\n            Cartesian3.add(extrudedPosition, scaledNormal, extrudedPosition);\r\n\r\n            finalPositions[i + bottomOffset] = extrudedPosition.x;\r\n            finalPositions[i1 + bottomOffset] = extrudedPosition.y;\r\n            finalPositions[i2 + bottomOffset] = extrudedPosition.z;\r\n        }\r\n\r\n        finalPositions[i] = position.x;\r\n        finalPositions[i1] = position.y;\r\n        finalPositions[i2] = position.z;\r\n    }\r\n\r\n    return finalPositions;\r\n};\r\n\r\nvar unitPosScratch = new Cartesian3();\r\nvar eastVecScratch = new Cartesian3();\r\nvar northVecScratch = new Cartesian3();\r\n/**\r\n * Returns an array of positions that make up the ellipse.\r\n * @private\r\n */\r\nEllipseGeometryLibrary.computeEllipsePositions = function (options, addFillPositions, addEdgePositions) {\r\n    var semiMinorAxis = options.semiMinorAxis;\r\n    var semiMajorAxis = options.semiMajorAxis;\r\n    var rotation = options.rotation;\r\n    var center = options.center;\r\n\r\n    // Computing the arc-length of the ellipse is too expensive to be practical. Estimating it using the\r\n    // arc length of the sphere is too inaccurate and creates sharp edges when either the semi-major or\r\n    // semi-minor axis is much bigger than the other. Instead, scale the angle delta to make\r\n    // the distance along the ellipse boundary more closely match the granularity.\r\n    var granularity = options.granularity * 8.0;\r\n\r\n    var aSqr = semiMinorAxis * semiMinorAxis;\r\n    var bSqr = semiMajorAxis * semiMajorAxis;\r\n    var ab = semiMajorAxis * semiMinorAxis;\r\n\r\n    var mag = Cartesian3.magnitude(center);\r\n\r\n    var unitPos = Cartesian3.normalize(center, unitPosScratch);\r\n    var eastVec = Cartesian3.cross(Cartesian3.UNIT_Z, center, eastVecScratch);\r\n    eastVec = Cartesian3.normalize(eastVec, eastVec);\r\n    var northVec = Cartesian3.cross(unitPos, eastVec, northVecScratch);\r\n\r\n    // The number of points in the first quadrant\r\n    var numPts = 1 + Math.ceil(CesiumMath.PI_OVER_TWO / granularity);\r\n\r\n    var deltaTheta = CesiumMath.PI_OVER_TWO / (numPts - 1);\r\n    var theta = CesiumMath.PI_OVER_TWO - numPts * deltaTheta;\r\n    if (theta < 0.0) {\r\n        numPts -= Math.ceil(Math.abs(theta) / deltaTheta);\r\n    }\r\n\r\n    // If the number of points were three, the ellipse\r\n    // would be tessellated like below:\r\n    //\r\n    //         *---*\r\n    //       / | \\ | \\\r\n    //     *---*---*---*\r\n    //   / | \\ | \\ | \\ | \\\r\n    //  / .*---*---*---*. \\\r\n    // * ` | \\ | \\ | \\ | `*\r\n    //  \\`.*---*---*---*.`/\r\n    //   \\ | \\ | \\ | \\ | /\r\n    //     *---*---*---*\r\n    //       \\ | \\ | /\r\n    //         *---*\r\n    // The first and last column have one position and fan to connect to the adjacent column.\r\n    // Each other vertical column contains an even number of positions.\r\n    var size = 2 * (numPts * (numPts + 2));\r\n    var positions = addFillPositions ? new Array(size * 3) : undefined;\r\n    var positionIndex = 0;\r\n    var position = scratchCartesian1;\r\n    var reflectedPosition = scratchCartesian2;\r\n\r\n    var outerPositionsLength = numPts * 4 * 3;\r\n    var outerRightIndex = outerPositionsLength - 1;\r\n    var outerLeftIndex = 0;\r\n    var outerPositions = addEdgePositions ? new Array(outerPositionsLength) : undefined;\r\n\r\n    var i;\r\n    var j;\r\n    var numInterior;\r\n    var t;\r\n    var interiorPosition;\r\n\r\n    // Compute points in the 'eastern' half of the ellipse\r\n    theta = CesiumMath.PI_OVER_TWO;\r\n    position = pointOnEllipsoid(theta, rotation, northVec, eastVec, aSqr, ab, bSqr, mag, unitPos, position);\r\n    if (addFillPositions) {\r\n        positions[positionIndex++] = position.x;\r\n        positions[positionIndex++] = position.y;\r\n        positions[positionIndex++] = position.z;\r\n    }\r\n    if (addEdgePositions) {\r\n        outerPositions[outerRightIndex--] = position.z;\r\n        outerPositions[outerRightIndex--] = position.y;\r\n        outerPositions[outerRightIndex--] = position.x;\r\n    }\r\n    theta = CesiumMath.PI_OVER_TWO - deltaTheta;\r\n    for (i = 1; i < numPts + 1; ++i) {\r\n        position = pointOnEllipsoid(theta, rotation, northVec, eastVec, aSqr, ab, bSqr, mag, unitPos, position);\r\n        reflectedPosition = pointOnEllipsoid(Math.PI - theta, rotation, northVec, eastVec, aSqr, ab, bSqr, mag, unitPos, reflectedPosition);\r\n\r\n        if (addFillPositions) {\r\n            positions[positionIndex++] = position.x;\r\n            positions[positionIndex++] = position.y;\r\n            positions[positionIndex++] = position.z;\r\n\r\n            numInterior = 2 * i + 2;\r\n            for (j = 1; j < numInterior - 1; ++j) {\r\n                t = j / (numInterior - 1);\r\n                interiorPosition = Cartesian3.lerp(position, reflectedPosition, t, scratchCartesian3);\r\n                positions[positionIndex++] = interiorPosition.x;\r\n                positions[positionIndex++] = interiorPosition.y;\r\n                positions[positionIndex++] = interiorPosition.z;\r\n            }\r\n\r\n            positions[positionIndex++] = reflectedPosition.x;\r\n            positions[positionIndex++] = reflectedPosition.y;\r\n            positions[positionIndex++] = reflectedPosition.z;\r\n        }\r\n\r\n        if (addEdgePositions) {\r\n            outerPositions[outerRightIndex--] = position.z;\r\n            outerPositions[outerRightIndex--] = position.y;\r\n            outerPositions[outerRightIndex--] = position.x;\r\n            outerPositions[outerLeftIndex++] = reflectedPosition.x;\r\n            outerPositions[outerLeftIndex++] = reflectedPosition.y;\r\n            outerPositions[outerLeftIndex++] = reflectedPosition.z;\r\n        }\r\n\r\n        theta = CesiumMath.PI_OVER_TWO - (i + 1) * deltaTheta;\r\n    }\r\n\r\n    // Compute points in the 'western' half of the ellipse\r\n    for (i = numPts; i > 1; --i) {\r\n        theta = CesiumMath.PI_OVER_TWO - (i - 1) * deltaTheta;\r\n\r\n        position = pointOnEllipsoid(-theta, rotation, northVec, eastVec, aSqr, ab, bSqr, mag, unitPos, position);\r\n        reflectedPosition = pointOnEllipsoid(theta + Math.PI, rotation, northVec, eastVec, aSqr, ab, bSqr, mag, unitPos, reflectedPosition);\r\n\r\n        if (addFillPositions) {\r\n            positions[positionIndex++] = position.x;\r\n            positions[positionIndex++] = position.y;\r\n            positions[positionIndex++] = position.z;\r\n\r\n            numInterior = 2 * (i - 1) + 2;\r\n            for (j = 1; j < numInterior - 1; ++j) {\r\n                t = j / (numInterior - 1);\r\n                interiorPosition = Cartesian3.lerp(position, reflectedPosition, t, scratchCartesian3);\r\n                positions[positionIndex++] = interiorPosition.x;\r\n                positions[positionIndex++] = interiorPosition.y;\r\n                positions[positionIndex++] = interiorPosition.z;\r\n            }\r\n\r\n            positions[positionIndex++] = reflectedPosition.x;\r\n            positions[positionIndex++] = reflectedPosition.y;\r\n            positions[positionIndex++] = reflectedPosition.z;\r\n        }\r\n\r\n        if (addEdgePositions) {\r\n            outerPositions[outerRightIndex--] = position.z;\r\n            outerPositions[outerRightIndex--] = position.y;\r\n            outerPositions[outerRightIndex--] = position.x;\r\n            outerPositions[outerLeftIndex++] = reflectedPosition.x;\r\n            outerPositions[outerLeftIndex++] = reflectedPosition.y;\r\n            outerPositions[outerLeftIndex++] = reflectedPosition.z;\r\n        }\r\n    }\r\n\r\n    theta = CesiumMath.PI_OVER_TWO;\r\n    position = pointOnEllipsoid(-theta, rotation, northVec, eastVec, aSqr, ab, bSqr, mag, unitPos, position);\r\n\r\n    var r = {};\r\n    if (addFillPositions) {\r\n        positions[positionIndex++] = position.x;\r\n        positions[positionIndex++] = position.y;\r\n        positions[positionIndex++] = position.z;\r\n        r.positions = positions;\r\n        r.numPts = numPts;\r\n    }\r\n    if (addEdgePositions) {\r\n        outerPositions[outerRightIndex--] = position.z;\r\n        outerPositions[outerRightIndex--] = position.y;\r\n        outerPositions[outerRightIndex--] = position.x;\r\n        r.outerPositions = outerPositions;\r\n    }\r\n\r\n    return r;\r\n};\r\nexport default EllipseGeometryLibrary;\r\n"],"names":["Cartesian3","Quaternion","Matrix3","CesiumMath"],"mappings":"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"}