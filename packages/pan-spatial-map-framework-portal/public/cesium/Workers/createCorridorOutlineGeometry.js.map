{"version":3,"file":"createCorridorOutlineGeometry.js","sources":["../../../../Source/Core/CorridorOutlineGeometry.js","../../../../Source/WorkersES6/createCorridorOutlineGeometry.js"],"sourcesContent":["import arrayFill from './arrayFill.js';\r\nimport arrayRemoveDuplicates from './arrayRemoveDuplicates.js';\r\nimport BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Check from './Check.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport CornerType from './CornerType.js';\r\nimport CorridorGeometryLibrary from './CorridorGeometryLibrary.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport CesiumMath from './Math.js';\r\nimport PolygonPipeline from './PolygonPipeline.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\n\r\nvar cartesian1 = new Cartesian3();\r\nvar cartesian2 = new Cartesian3();\r\nvar cartesian3 = new Cartesian3();\r\n\r\nfunction scaleToSurface(positions, ellipsoid) {\r\n    for (var i = 0; i < positions.length; i++) {\r\n        positions[i] = ellipsoid.scaleToGeodeticSurface(positions[i], positions[i]);\r\n    }\r\n    return positions;\r\n}\r\n\r\nfunction combine(computedPositions, cornerType) {\r\n    var wallIndices = [];\r\n    var positions = computedPositions.positions;\r\n    var corners = computedPositions.corners;\r\n    var endPositions = computedPositions.endPositions;\r\n    var attributes = new GeometryAttributes();\r\n    var corner;\r\n    var leftCount = 0;\r\n    var rightCount = 0;\r\n    var i;\r\n    var indicesLength = 0;\r\n    var length;\r\n    for (i = 0; i < positions.length; i += 2) {\r\n        length = positions[i].length - 3;\r\n        leftCount += length; //subtracting 3 to account for duplicate points at corners\r\n        indicesLength += (length / 3) * 4;\r\n        rightCount += positions[i + 1].length - 3;\r\n    }\r\n    leftCount += 3; //add back count for end positions\r\n    rightCount += 3;\r\n    for (i = 0; i < corners.length; i++) {\r\n        corner = corners[i];\r\n        var leftSide = corners[i].leftPositions;\r\n        if (defined(leftSide)) {\r\n            length = leftSide.length;\r\n            leftCount += length;\r\n            indicesLength += (length / 3) * 2;\r\n        } else {\r\n            length = corners[i].rightPositions.length;\r\n            rightCount += length;\r\n            indicesLength += (length / 3) * 2;\r\n        }\r\n    }\r\n\r\n    var addEndPositions = defined(endPositions);\r\n    var endPositionLength;\r\n    if (addEndPositions) {\r\n        endPositionLength = endPositions[0].length - 3;\r\n        leftCount += endPositionLength;\r\n        rightCount += endPositionLength;\r\n        endPositionLength /= 3;\r\n        indicesLength += endPositionLength * 4;\r\n    }\r\n    var size = leftCount + rightCount;\r\n    var finalPositions = new Float64Array(size);\r\n    var front = 0;\r\n    var back = size - 1;\r\n    var UL, LL, UR, LR;\r\n    var rightPos, leftPos;\r\n    var halfLength = endPositionLength / 2;\r\n\r\n    var indices = IndexDatatype.createTypedArray(size / 3, indicesLength + 4);\r\n    var index = 0;\r\n\r\n    indices[index++] = front / 3;\r\n    indices[index++] = (back - 2) / 3;\r\n    if (addEndPositions) {\r\n        // add rounded end\r\n        wallIndices.push(front / 3);\r\n        leftPos = cartesian1;\r\n        rightPos = cartesian2;\r\n        var firstEndPositions = endPositions[0];\r\n        for (i = 0; i < halfLength; i++) {\r\n            leftPos = Cartesian3.fromArray(firstEndPositions, (halfLength - 1 - i) * 3, leftPos);\r\n            rightPos = Cartesian3.fromArray(firstEndPositions, (halfLength + i) * 3, rightPos);\r\n            CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\r\n            CorridorGeometryLibrary.addAttribute(finalPositions, leftPos, undefined, back);\r\n\r\n            LL = front / 3;\r\n            LR = LL + 1;\r\n            UL = (back - 2) / 3;\r\n            UR = UL - 1;\r\n            indices[index++] = UL;\r\n            indices[index++] = UR;\r\n            indices[index++] = LL;\r\n            indices[index++] = LR;\r\n\r\n            front += 3;\r\n            back -= 3;\r\n        }\r\n    }\r\n\r\n    var posIndex = 0;\r\n    var rightEdge = positions[posIndex++]; //add first two edges\r\n    var leftEdge = positions[posIndex++];\r\n    finalPositions.set(rightEdge, front);\r\n    finalPositions.set(leftEdge, back - leftEdge.length + 1);\r\n\r\n    length = leftEdge.length - 3;\r\n    wallIndices.push(front / 3, (back - 2) / 3);\r\n    for (i = 0; i < length; i += 3) {\r\n        LL = front / 3;\r\n        LR = LL + 1;\r\n        UL = (back - 2) / 3;\r\n        UR = UL - 1;\r\n        indices[index++] = UL;\r\n        indices[index++] = UR;\r\n        indices[index++] = LL;\r\n        indices[index++] = LR;\r\n\r\n        front += 3;\r\n        back -= 3;\r\n    }\r\n\r\n    for (i = 0; i < corners.length; i++) {\r\n        var j;\r\n        corner = corners[i];\r\n        var l = corner.leftPositions;\r\n        var r = corner.rightPositions;\r\n        var start;\r\n        var outsidePoint = cartesian3;\r\n        if (defined(l)) {\r\n            back -= 3;\r\n            start = UR;\r\n            wallIndices.push(LR);\r\n            for (j = 0; j < l.length / 3; j++) {\r\n                outsidePoint = Cartesian3.fromArray(l, j * 3, outsidePoint);\r\n                indices[index++] = start - j - 1;\r\n                indices[index++] = start - j;\r\n                CorridorGeometryLibrary.addAttribute(finalPositions, outsidePoint, undefined, back);\r\n                back -= 3;\r\n            }\r\n            wallIndices.push(start - Math.floor(l.length / 6));\r\n            if (cornerType === CornerType.BEVELED) {\r\n                wallIndices.push((back - 2) / 3 + 1);\r\n            }\r\n            front += 3;\r\n        } else {\r\n            front += 3;\r\n            start = LR;\r\n            wallIndices.push(UR);\r\n            for (j = 0; j < r.length / 3; j++) {\r\n                outsidePoint = Cartesian3.fromArray(r, j * 3, outsidePoint);\r\n                indices[index++] = start + j;\r\n                indices[index++] = start + j + 1;\r\n                CorridorGeometryLibrary.addAttribute(finalPositions, outsidePoint, front);\r\n                front += 3;\r\n            }\r\n            wallIndices.push(start + Math.floor(r.length / 6));\r\n            if (cornerType === CornerType.BEVELED) {\r\n                wallIndices.push(front / 3 - 1);\r\n            }\r\n            back -= 3;\r\n        }\r\n        rightEdge = positions[posIndex++];\r\n        leftEdge = positions[posIndex++];\r\n        rightEdge.splice(0, 3); //remove duplicate points added by corner\r\n        leftEdge.splice(leftEdge.length - 3, 3);\r\n        finalPositions.set(rightEdge, front);\r\n        finalPositions.set(leftEdge, back - leftEdge.length + 1);\r\n        length = leftEdge.length - 3;\r\n\r\n        for (j = 0; j < leftEdge.length; j += 3) {\r\n            LR = front / 3;\r\n            LL = LR - 1;\r\n            UR = (back - 2) / 3;\r\n            UL = UR + 1;\r\n            indices[index++] = UL;\r\n            indices[index++] = UR;\r\n            indices[index++] = LL;\r\n            indices[index++] = LR;\r\n            front += 3;\r\n            back -= 3;\r\n        }\r\n        front -= 3;\r\n        back += 3;\r\n        wallIndices.push(front / 3, (back - 2) / 3);\r\n    }\r\n\r\n    if (addEndPositions) {\r\n        // add rounded end\r\n        front += 3;\r\n        back -= 3;\r\n        leftPos = cartesian1;\r\n        rightPos = cartesian2;\r\n        var lastEndPositions = endPositions[1];\r\n        for (i = 0; i < halfLength; i++) {\r\n            leftPos = Cartesian3.fromArray(lastEndPositions, (endPositionLength - i - 1) * 3, leftPos);\r\n            rightPos = Cartesian3.fromArray(lastEndPositions, i * 3, rightPos);\r\n            CorridorGeometryLibrary.addAttribute(finalPositions, leftPos, undefined, back);\r\n            CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\r\n\r\n            LR = front / 3;\r\n            LL = LR - 1;\r\n            UR = (back - 2) / 3;\r\n            UL = UR + 1;\r\n            indices[index++] = UL;\r\n            indices[index++] = UR;\r\n            indices[index++] = LL;\r\n            indices[index++] = LR;\r\n\r\n            front += 3;\r\n            back -= 3;\r\n        }\r\n\r\n        wallIndices.push(front / 3);\r\n    } else {\r\n        wallIndices.push(front / 3, (back - 2) / 3);\r\n    }\r\n    indices[index++] = front / 3;\r\n    indices[index++] = (back - 2) / 3;\r\n\r\n    attributes.position = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.DOUBLE,\r\n        componentsPerAttribute: 3,\r\n        values: finalPositions\r\n    });\r\n\r\n    return {\r\n        attributes: attributes,\r\n        indices: indices,\r\n        wallIndices: wallIndices\r\n    };\r\n}\r\n\r\nfunction computePositionsExtruded(params) {\r\n    var ellipsoid = params.ellipsoid;\r\n    var computedPositions = CorridorGeometryLibrary.computePositions(params);\r\n    var attr = combine(computedPositions, params.cornerType);\r\n    var wallIndices = attr.wallIndices;\r\n    var height = params.height;\r\n    var extrudedHeight = params.extrudedHeight;\r\n    var attributes = attr.attributes;\r\n    var indices = attr.indices;\r\n    var positions = attributes.position.values;\r\n    var length = positions.length;\r\n    var extrudedPositions = new Float64Array(length);\r\n    extrudedPositions.set(positions);\r\n    var newPositions = new Float64Array(length * 2);\r\n\r\n    positions = PolygonPipeline.scaleToGeodeticHeight(positions, height, ellipsoid);\r\n    extrudedPositions = PolygonPipeline.scaleToGeodeticHeight(extrudedPositions, extrudedHeight, ellipsoid);\r\n    newPositions.set(positions);\r\n    newPositions.set(extrudedPositions, length);\r\n    attributes.position.values = newPositions;\r\n\r\n    length /= 3;\r\n    if (defined(params.offsetAttribute)) {\r\n        var applyOffset = new Uint8Array(length * 2);\r\n        if (params.offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n            applyOffset = arrayFill(applyOffset, 1, 0, length);\r\n        } else {\r\n            var applyOffsetValue = params.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n            applyOffset = arrayFill(applyOffset, applyOffsetValue);\r\n        }\r\n\r\n        attributes.applyOffset = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n            componentsPerAttribute: 1,\r\n            values: applyOffset\r\n        });\r\n    }\r\n\r\n    var i;\r\n    var iLength = indices.length;\r\n    var newIndices = IndexDatatype.createTypedArray(newPositions.length / 3, (iLength + wallIndices.length) * 2);\r\n    newIndices.set(indices);\r\n    var index = iLength;\r\n    for (i = 0; i < iLength; i += 2) {\r\n        // bottom indices\r\n        var v0 = indices[i];\r\n        var v1 = indices[i + 1];\r\n        newIndices[index++] = v0 + length;\r\n        newIndices[index++] = v1 + length;\r\n    }\r\n\r\n    var UL, LL;\r\n    for (i = 0; i < wallIndices.length; i++) {\r\n        //wall indices\r\n        UL = wallIndices[i];\r\n        LL = UL + length;\r\n        newIndices[index++] = UL;\r\n        newIndices[index++] = LL;\r\n    }\r\n\r\n    return {\r\n        attributes: attributes,\r\n        indices: newIndices\r\n    };\r\n}\r\n\r\n/**\r\n * A description of a corridor outline.\r\n *\r\n * @alias CorridorOutlineGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.positions An array of positions that define the center of the corridor outline.\r\n * @param {Number} options.width The distance between the edges of the corridor outline.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n * @param {Number} [options.height=0] The distance in meters between the positions and the ellipsoid surface.\r\n * @param {Number} [options.extrudedHeight] The distance in meters between the extruded face and the ellipsoid surface.\r\n * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\r\n *\r\n * @see CorridorOutlineGeometry.createGeometry\r\n *\r\n * @example\r\n * var corridor = new Cesium.CorridorOutlineGeometry({\r\n *   positions : Cesium.Cartesian3.fromDegreesArray([-72.0, 40.0, -70.0, 35.0]),\r\n *   width : 100000\r\n * });\r\n */\r\nfunction CorridorOutlineGeometry(options) {\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n    var positions = options.positions;\r\n    var width = options.width;\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.typeOf.object('options.positions', positions);\r\n    Check.typeOf.number('options.width', width);\r\n    //>>includeEnd('debug');\r\n\r\n    var height = defaultValue(options.height, 0.0);\r\n    var extrudedHeight = defaultValue(options.extrudedHeight, height);\r\n\r\n    this._positions = positions;\r\n    this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\r\n    this._width = width;\r\n    this._height = Math.max(height, extrudedHeight);\r\n    this._extrudedHeight = Math.min(height, extrudedHeight);\r\n    this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\r\n    this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n    this._offsetAttribute = options.offsetAttribute;\r\n    this._workerName = 'createCorridorOutlineGeometry';\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    this.packedLength = 1 + positions.length * Cartesian3.packedLength + Ellipsoid.packedLength + 6;\r\n}\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {CorridorOutlineGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nCorridorOutlineGeometry.pack = function (value, array, startingIndex) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.typeOf.object('value', value);\r\n    Check.typeOf.object('array', array);\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    var positions = value._positions;\r\n    var length = positions.length;\r\n    array[startingIndex++] = length;\r\n\r\n    for (var i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n        Cartesian3.pack(positions[i], array, startingIndex);\r\n    }\r\n\r\n    Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n    startingIndex += Ellipsoid.packedLength;\r\n\r\n    array[startingIndex++] = value._width;\r\n    array[startingIndex++] = value._height;\r\n    array[startingIndex++] = value._extrudedHeight;\r\n    array[startingIndex++] = value._cornerType;\r\n    array[startingIndex++] = value._granularity;\r\n    array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n    return array;\r\n};\r\n\r\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\nvar scratchOptions = {\r\n    positions: undefined,\r\n    ellipsoid: scratchEllipsoid,\r\n    width: undefined,\r\n    height: undefined,\r\n    extrudedHeight: undefined,\r\n    cornerType: undefined,\r\n    granularity: undefined,\r\n    offsetAttribute: undefined\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {CorridorOutlineGeometry} [result] The object into which to store the result.\r\n * @returns {CorridorOutlineGeometry} The modified result parameter or a new CorridorOutlineGeometry instance if one was not provided.\r\n */\r\nCorridorOutlineGeometry.unpack = function (array, startingIndex, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.typeOf.object('array', array);\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    var length = array[startingIndex++];\r\n    var positions = new Array(length);\r\n\r\n    for (var i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n        positions[i] = Cartesian3.unpack(array, startingIndex);\r\n    }\r\n\r\n    var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n    startingIndex += Ellipsoid.packedLength;\r\n\r\n    var width = array[startingIndex++];\r\n    var height = array[startingIndex++];\r\n    var extrudedHeight = array[startingIndex++];\r\n    var cornerType = array[startingIndex++];\r\n    var granularity = array[startingIndex++];\r\n    var offsetAttribute = array[startingIndex];\r\n\r\n    if (!defined(result)) {\r\n        scratchOptions.positions = positions;\r\n        scratchOptions.width = width;\r\n        scratchOptions.height = height;\r\n        scratchOptions.extrudedHeight = extrudedHeight;\r\n        scratchOptions.cornerType = cornerType;\r\n        scratchOptions.granularity = granularity;\r\n        scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n        return new CorridorOutlineGeometry(scratchOptions);\r\n    }\r\n\r\n    result._positions = positions;\r\n    result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n    result._width = width;\r\n    result._height = height;\r\n    result._extrudedHeight = extrudedHeight;\r\n    result._cornerType = cornerType;\r\n    result._granularity = granularity;\r\n    result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of a corridor, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {CorridorOutlineGeometry} corridorOutlineGeometry A description of the corridor.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nCorridorOutlineGeometry.createGeometry = function (corridorOutlineGeometry) {\r\n    var positions = corridorOutlineGeometry._positions;\r\n    var width = corridorOutlineGeometry._width;\r\n    var ellipsoid = corridorOutlineGeometry._ellipsoid;\r\n\r\n    positions = scaleToSurface(positions, ellipsoid);\r\n    var cleanPositions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\r\n\r\n    if (cleanPositions.length < 2 || width <= 0) {\r\n        return;\r\n    }\r\n\r\n    var height = corridorOutlineGeometry._height;\r\n    var extrudedHeight = corridorOutlineGeometry._extrudedHeight;\r\n    var extrude = !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\r\n\r\n    var params = {\r\n        ellipsoid: ellipsoid,\r\n        positions: cleanPositions,\r\n        width: width,\r\n        cornerType: corridorOutlineGeometry._cornerType,\r\n        granularity: corridorOutlineGeometry._granularity,\r\n        saveAttributes: false\r\n    };\r\n    var attr;\r\n    if (extrude) {\r\n        params.height = height;\r\n        params.extrudedHeight = extrudedHeight;\r\n        params.offsetAttribute = corridorOutlineGeometry._offsetAttribute;\r\n        attr = computePositionsExtruded(params);\r\n    } else {\r\n        var computedPositions = CorridorGeometryLibrary.computePositions(params);\r\n        attr = combine(computedPositions, params.cornerType);\r\n        attr.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(attr.attributes.position.values, height, ellipsoid);\r\n\r\n        if (defined(corridorOutlineGeometry._offsetAttribute)) {\r\n            var length = attr.attributes.position.values.length;\r\n            var applyOffset = new Uint8Array(length / 3);\r\n            var offsetValue = corridorOutlineGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n            arrayFill(applyOffset, offsetValue);\r\n            attr.attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute: 1,\r\n                values: applyOffset\r\n            });\r\n        }\r\n    }\r\n    var attributes = attr.attributes;\r\n    var boundingSphere = BoundingSphere.fromVertices(attributes.position.values, undefined, 3);\r\n\r\n    return new Geometry({\r\n        attributes: attributes,\r\n        indices: attr.indices,\r\n        primitiveType: PrimitiveType.LINES,\r\n        boundingSphere: boundingSphere,\r\n        offsetAttribute: corridorOutlineGeometry._offsetAttribute\r\n    });\r\n};\r\nexport default CorridorOutlineGeometry;\r\n","import CorridorOutlineGeometry from '../Core/CorridorOutlineGeometry.js';\r\nimport defined from '../Core/defined.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\n\r\nfunction createCorridorOutlineGeometry(corridorOutlineGeometry, offset) {\r\n    if (defined(offset)) {\r\n        corridorOutlineGeometry = CorridorOutlineGeometry.unpack(corridorOutlineGeometry, offset);\r\n    }\r\n    corridorOutlineGeometry._ellipsoid = Ellipsoid.clone(corridorOutlineGeometry._ellipsoid);\r\n    return CorridorOutlineGeometry.createGeometry(corridorOutlineGeometry);\r\n}\r\nexport default createCorridorOutlineGeometry;\r\n"],"names":["Cartesian3","GeometryAttributes","defined","IndexDatatype","CorridorGeometryLibrary","CornerType","GeometryAttribute","ComponentDatatype","PolygonPipeline","GeometryOffsetAttribute","arrayFill","defaultValue","Check","Ellipsoid","CesiumMath","arrayRemoveDuplicates","BoundingSphere","Geometry","PrimitiveType"],"mappings":"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"}