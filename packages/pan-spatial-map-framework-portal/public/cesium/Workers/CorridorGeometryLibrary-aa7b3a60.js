define(["exports","./Cartesian2-38b35910","./PolylineVolumeGeometryLibrary-c00aade2","./when-ae2e0b60","./Math-5bbcea10","./Transforms-07a9fab5","./PolylinePipeline-f47a23a0"],function(e,R,V,s,Q,u,U){"use strict";var a={},G=new R.Cartesian3,d=new R.Cartesian3,p=new R.Cartesian3,m=new R.Cartesian3,I=[new R.Cartesian3,new R.Cartesian3],k=new R.Cartesian3,F=new R.Cartesian3,H=new R.Cartesian3,J=new R.Cartesian3,K=new R.Cartesian3,W=new R.Cartesian3,X=new R.Cartesian3,Y=new R.Cartesian3,Z=new R.Cartesian3,$=new R.Cartesian3,c=new u.Quaternion,g=new u.Matrix3;function q(a,e,r,n,y){var t,i=R.Cartesian3.angleBetween(R.Cartesian3.subtract(e,a,G),R.Cartesian3.subtract(r,a,d)),s=n===V.CornerType.BEVELED?1:Math.ceil(i/Q.CesiumMath.toRadians(5))+1,n=3*s,o=new Array(n),C=(o[n-3]=r.x,o[n-2]=r.y,o[n-1]=r.z,t=y?u.Matrix3.fromQuaternion(u.Quaternion.fromAxisAngle(R.Cartesian3.negate(a,G),i/s,c),g):u.Matrix3.fromQuaternion(u.Quaternion.fromAxisAngle(a,i/s,c),g),0);e=R.Cartesian3.clone(e,G);for(var l=0;l<s;l++)e=u.Matrix3.multiplyByVector(t,e,e),o[C++]=e.x,o[C++]=e.y,o[C++]=e.z;return o}function _(a,e,r,n){var t=G;return n||(e=R.Cartesian3.negate(e,e)),[(t=R.Cartesian3.add(a,e,t)).x,t.y,t.z,r.x,r.y,r.z]}function j(a,y,u,e){for(var r=new Array(a.length),n=new Array(a.length),t=R.Cartesian3.multiplyByScalar(y,u,G),c=R.Cartesian3.negate(t,d),i=0,s=a.length-1,o=0;o<a.length;o+=3){var C=R.Cartesian3.fromArray(a,o,p),l=R.Cartesian3.add(C,c,m),l=(r[i++]=l.x,r[i++]=l.y,r[i++]=l.z,R.Cartesian3.add(C,t,m));n[s--]=l.z,n[s--]=l.y,n[s--]=l.x}return e.push(r,n),e}a.addAttribute=function(a,e,r,n){var t=e.x,i=e.y,e=e.z;s.defined(r)&&(a[r]=t,a[r+1]=i,a[r+2]=e),s.defined(n)&&(a[n]=e,a[n-1]=i,a[n-2]=t)};var aa=new R.Cartesian3,ea=new R.Cartesian3;a.computePositions=function(y){for(var u,c,d,p,m,g,h,f,w=y.granularity,z=y.positions,x=y.ellipsoid,a=y.width/2,P=y.cornerType,b=y.saveAttributes,e=k,r=F,A=H,n=J,t=K,B=W,i=X,s=Y,o=Z,E=$,S=[],v=b?[]:void 0,D=b?[]:void 0,C=z[0],M=z[1],r=R.Cartesian3.normalize(R.Cartesian3.subtract(M,C,r),r),e=x.geodeticSurfaceNormal(C,e),n=R.Cartesian3.normalize(R.Cartesian3.cross(e,r,n),n),i=(b&&(v.push(n.x,n.y,n.z),D.push(e.x,e.y,e.z)),R.Cartesian3.clone(C,i)),C=M,A=R.Cartesian3.negate(r,A),T=[],N=z.length,L=1;L<N-1;L++){e=x.geodeticSurfaceNormal(C,e),M=z[L+1],r=R.Cartesian3.normalize(R.Cartesian3.subtract(M,C,r),r),t=R.Cartesian3.normalize(R.Cartesian3.add(r,A,t),t);var O=R.Cartesian3.multiplyByScalar(e,R.Cartesian3.dot(r,e),aa),l=(R.Cartesian3.subtract(r,O,O),R.Cartesian3.normalize(O,O),R.Cartesian3.multiplyByScalar(e,R.Cartesian3.dot(A,e),ea));R.Cartesian3.subtract(A,l,l),R.Cartesian3.normalize(l,l),Q.CesiumMath.equalsEpsilon(Math.abs(R.Cartesian3.dot(O,l)),1,Q.CesiumMath.EPSILON7)||(t=R.Cartesian3.cross(t,e,t),t=R.Cartesian3.cross(e,t,t),t=R.Cartesian3.normalize(t,t),O=a/Math.max(.25,R.Cartesian3.magnitude(R.Cartesian3.cross(t,A,G))),l=V.PolylineVolumeGeometryLibrary.angleIsGreaterThanPi(r,A,C,x),t=R.Cartesian3.multiplyByScalar(t,O,t),l?(s=R.Cartesian3.add(C,t,s),E=R.Cartesian3.add(s,R.Cartesian3.multiplyByScalar(n,a,E),E),o=R.Cartesian3.add(s,R.Cartesian3.multiplyByScalar(n,2*a,o),o),I[0]=R.Cartesian3.clone(i,I[0]),I[1]=R.Cartesian3.clone(E,I[1]),S=j(u=U.PolylinePipeline.generateArc({positions:I,granularity:w,ellipsoid:x}),n,a,S),b&&(v.push(n.x,n.y,n.z),D.push(e.x,e.y,e.z)),B=R.Cartesian3.clone(o,B),n=R.Cartesian3.normalize(R.Cartesian3.cross(e,r,n),n),o=R.Cartesian3.add(s,R.Cartesian3.multiplyByScalar(n,2*a,o),o),i=R.Cartesian3.add(s,R.Cartesian3.multiplyByScalar(n,a,i),i),P===V.CornerType.ROUNDED||P===V.CornerType.BEVELED?T.push({leftPositions:q(s,B,o,P,l)}):T.push({leftPositions:_(C,R.Cartesian3.negate(t,t),o,l)})):(o=R.Cartesian3.add(C,t,o),E=R.Cartesian3.add(o,R.Cartesian3.negate(R.Cartesian3.multiplyByScalar(n,a,E),E),E),s=R.Cartesian3.add(o,R.Cartesian3.negate(R.Cartesian3.multiplyByScalar(n,2*a,s),s),s),I[0]=R.Cartesian3.clone(i,I[0]),I[1]=R.Cartesian3.clone(E,I[1]),S=j(u=U.PolylinePipeline.generateArc({positions:I,granularity:w,ellipsoid:x}),n,a,S),b&&(v.push(n.x,n.y,n.z),D.push(e.x,e.y,e.z)),B=R.Cartesian3.clone(s,B),n=R.Cartesian3.normalize(R.Cartesian3.cross(e,r,n),n),s=R.Cartesian3.add(o,R.Cartesian3.negate(R.Cartesian3.multiplyByScalar(n,2*a,s),s),s),i=R.Cartesian3.add(o,R.Cartesian3.negate(R.Cartesian3.multiplyByScalar(n,a,i),i),i),P===V.CornerType.ROUNDED||P===V.CornerType.BEVELED?T.push({rightPositions:q(o,B,s,P,l)}):T.push({rightPositions:_(C,t,s,l)})),A=R.Cartesian3.negate(r,A)),C=M}return e=x.geodeticSurfaceNormal(C,e),I[0]=R.Cartesian3.clone(i,I[0]),I[1]=R.Cartesian3.clone(C,I[1]),u=U.PolylinePipeline.generateArc({positions:I,granularity:w,ellipsoid:x}),S=j(u,n,a,S),b&&(v.push(n.x,n.y,n.z),D.push(e.x,e.y,e.z)),P===V.CornerType.ROUNDED&&(y=k,d=H,p=(c=S)[1],m=R.Cartesian3.fromArray(c[1],p.length-3,F),d=R.Cartesian3.fromArray(c[0],0,d),g=q(y=R.Cartesian3.midpoint(m,d,y),m,d,V.CornerType.ROUNDED,!1),h=c.length-1,f=c[h-1],p=c[h],m=R.Cartesian3.fromArray(f,f.length-3,m),d=R.Cartesian3.fromArray(p,0,d),c=[g,q(R.Cartesian3.midpoint(m,d,y),m,d,V.CornerType.ROUNDED,!1)]),{positions:S,corners:T,lefts:v,normals:D,endPositions:c}},e.CorridorGeometryLibrary=a});
