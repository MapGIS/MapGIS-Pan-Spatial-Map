{"version":3,"file":"createRectangleOutlineGeometry.js","sources":["../../../../Source/Core/RectangleOutlineGeometry.js","../../../../Source/WorkersES6/createRectangleOutlineGeometry.js"],"sourcesContent":["import arrayFill from './arrayFill.js';\r\nimport BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Cartographic from './Cartographic.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport CesiumMath from './Math.js';\r\nimport PolygonPipeline from './PolygonPipeline.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\nimport Rectangle from './Rectangle.js';\r\nimport RectangleGeometryLibrary from './RectangleGeometryLibrary.js';\r\n\r\nvar bottomBoundingSphere = new BoundingSphere();\r\nvar topBoundingSphere = new BoundingSphere();\r\nvar positionScratch = new Cartesian3();\r\nvar rectangleScratch = new Rectangle();\r\n\r\nfunction constructRectangle(geometry, computedOptions) {\r\n    var ellipsoid = geometry._ellipsoid;\r\n    var height = computedOptions.height;\r\n    var width = computedOptions.width;\r\n    var northCap = computedOptions.northCap;\r\n    var southCap = computedOptions.southCap;\r\n\r\n    var rowHeight = height;\r\n    var widthMultiplier = 2;\r\n    var size = 0;\r\n    var corners = 4;\r\n    if (northCap) {\r\n        widthMultiplier -= 1;\r\n        rowHeight -= 1;\r\n        size += 1;\r\n        corners -= 2;\r\n    }\r\n    if (southCap) {\r\n        widthMultiplier -= 1;\r\n        rowHeight -= 1;\r\n        size += 1;\r\n        corners -= 2;\r\n    }\r\n    size += widthMultiplier * width + 2 * rowHeight - corners;\r\n\r\n    var positions = new Float64Array(size * 3);\r\n\r\n    var posIndex = 0;\r\n    var row = 0;\r\n    var col;\r\n    var position = positionScratch;\r\n    if (northCap) {\r\n        RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, row, 0, position);\r\n        positions[posIndex++] = position.x;\r\n        positions[posIndex++] = position.y;\r\n        positions[posIndex++] = position.z;\r\n    } else {\r\n        for (col = 0; col < width; col++) {\r\n            RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, row, col, position);\r\n            positions[posIndex++] = position.x;\r\n            positions[posIndex++] = position.y;\r\n            positions[posIndex++] = position.z;\r\n        }\r\n    }\r\n\r\n    col = width - 1;\r\n    for (row = 1; row < height; row++) {\r\n        RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, row, col, position);\r\n        positions[posIndex++] = position.x;\r\n        positions[posIndex++] = position.y;\r\n        positions[posIndex++] = position.z;\r\n    }\r\n\r\n    row = height - 1;\r\n    if (!southCap) {\r\n        // if southCap is true, we dont need to add any more points because the south pole point was added by the iteration above\r\n        for (col = width - 2; col >= 0; col--) {\r\n            RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, row, col, position);\r\n            positions[posIndex++] = position.x;\r\n            positions[posIndex++] = position.y;\r\n            positions[posIndex++] = position.z;\r\n        }\r\n    }\r\n\r\n    col = 0;\r\n    for (row = height - 2; row > 0; row--) {\r\n        RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, row, col, position);\r\n        positions[posIndex++] = position.x;\r\n        positions[posIndex++] = position.y;\r\n        positions[posIndex++] = position.z;\r\n    }\r\n\r\n    var indicesSize = (positions.length / 3) * 2;\r\n    var indices = IndexDatatype.createTypedArray(positions.length / 3, indicesSize);\r\n\r\n    var index = 0;\r\n    for (var i = 0; i < positions.length / 3 - 1; i++) {\r\n        indices[index++] = i;\r\n        indices[index++] = i + 1;\r\n    }\r\n    indices[index++] = positions.length / 3 - 1;\r\n    indices[index++] = 0;\r\n\r\n    var geo = new Geometry({\r\n        attributes: new GeometryAttributes(),\r\n        primitiveType: PrimitiveType.LINES\r\n    });\r\n\r\n    geo.attributes.position = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.DOUBLE,\r\n        componentsPerAttribute: 3,\r\n        values: positions\r\n    });\r\n    geo.indices = indices;\r\n\r\n    return geo;\r\n}\r\n\r\nfunction constructExtrudedRectangle(rectangleGeometry, computedOptions) {\r\n    var surfaceHeight = rectangleGeometry._surfaceHeight;\r\n    var extrudedHeight = rectangleGeometry._extrudedHeight;\r\n    var ellipsoid = rectangleGeometry._ellipsoid;\r\n    var minHeight = extrudedHeight;\r\n    var maxHeight = surfaceHeight;\r\n    var geo = constructRectangle(rectangleGeometry, computedOptions);\r\n\r\n    var height = computedOptions.height;\r\n    var width = computedOptions.width;\r\n\r\n    var topPositions = PolygonPipeline.scaleToGeodeticHeight(geo.attributes.position.values, maxHeight, ellipsoid, false);\r\n    var length = topPositions.length;\r\n    var positions = new Float64Array(length * 2);\r\n    positions.set(topPositions);\r\n    var bottomPositions = PolygonPipeline.scaleToGeodeticHeight(geo.attributes.position.values, minHeight, ellipsoid);\r\n    positions.set(bottomPositions, length);\r\n    geo.attributes.position.values = positions;\r\n\r\n    var northCap = computedOptions.northCap;\r\n    var southCap = computedOptions.southCap;\r\n    var corners = 4;\r\n    if (northCap) {\r\n        corners -= 1;\r\n    }\r\n    if (southCap) {\r\n        corners -= 1;\r\n    }\r\n\r\n    var indicesSize = (positions.length / 3 + corners) * 2;\r\n    var indices = IndexDatatype.createTypedArray(positions.length / 3, indicesSize);\r\n    length = positions.length / 6;\r\n    var index = 0;\r\n    for (var i = 0; i < length - 1; i++) {\r\n        indices[index++] = i;\r\n        indices[index++] = i + 1;\r\n        indices[index++] = i + length;\r\n        indices[index++] = i + length + 1;\r\n    }\r\n    indices[index++] = length - 1;\r\n    indices[index++] = 0;\r\n    indices[index++] = length + length - 1;\r\n    indices[index++] = length;\r\n\r\n    indices[index++] = 0;\r\n    indices[index++] = length;\r\n\r\n    var bottomCorner;\r\n    if (northCap) {\r\n        bottomCorner = height - 1;\r\n    } else {\r\n        var topRightCorner = width - 1;\r\n        indices[index++] = topRightCorner;\r\n        indices[index++] = topRightCorner + length;\r\n        bottomCorner = width + height - 2;\r\n    }\r\n\r\n    indices[index++] = bottomCorner;\r\n    indices[index++] = bottomCorner + length;\r\n\r\n    if (!southCap) {\r\n        var bottomLeftCorner = width + bottomCorner - 1;\r\n        indices[index++] = bottomLeftCorner;\r\n        indices[index] = bottomLeftCorner + length;\r\n    }\r\n\r\n    geo.indices = indices;\r\n\r\n    return geo;\r\n}\r\n\r\n/**\r\n * A description of the outline of a a cartographic rectangle on an ellipsoid centered at the origin.\r\n *\r\n * @alias RectangleOutlineGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Rectangle} options.rectangle A cartographic rectangle with north, south, east and west properties in radians.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the rectangle lies.\r\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n * @param {Number} [options.height=0.0] The distance in meters between the rectangle and the ellipsoid surface.\r\n * @param {Number} [options.rotation=0.0] The rotation of the rectangle, in radians. A positive rotation is counter-clockwise.\r\n * @param {Number} [options.extrudedHeight] The distance in meters between the rectangle's extruded face and the ellipsoid surface.\r\n *\r\n * @exception {DeveloperError} <code>options.rectangle.north</code> must be in the interval [<code>-Pi/2</code>, <code>Pi/2</code>].\r\n * @exception {DeveloperError} <code>options.rectangle.south</code> must be in the interval [<code>-Pi/2</code>, <code>Pi/2</code>].\r\n * @exception {DeveloperError} <code>options.rectangle.east</code> must be in the interval [<code>-Pi</code>, <code>Pi</code>].\r\n * @exception {DeveloperError} <code>options.rectangle.west</code> must be in the interval [<code>-Pi</code>, <code>Pi</code>].\r\n * @exception {DeveloperError} <code>options.rectangle.north</code> must be greater than <code>rectangle.south</code>.\r\n *\r\n * @see RectangleOutlineGeometry#createGeometry\r\n *\r\n * @example\r\n * var rectangle = new Cesium.RectangleOutlineGeometry({\r\n *   ellipsoid : Cesium.Ellipsoid.WGS84,\r\n *   rectangle : Cesium.Rectangle.fromDegrees(-80.0, 39.0, -74.0, 42.0),\r\n *   height : 10000.0\r\n * });\r\n * var geometry = Cesium.RectangleOutlineGeometry.createGeometry(rectangle);\r\n */\r\nfunction RectangleOutlineGeometry(options) {\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n    var rectangle = options.rectangle;\r\n    var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n    var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n    var rotation = defaultValue(options.rotation, 0.0);\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(rectangle)) {\r\n        throw new DeveloperError('rectangle is required.');\r\n    }\r\n    Rectangle.validate(rectangle);\r\n    if (rectangle.north < rectangle.south) {\r\n        throw new DeveloperError('options.rectangle.north must be greater than options.rectangle.south');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var height = defaultValue(options.height, 0.0);\r\n    var extrudedHeight = defaultValue(options.extrudedHeight, height);\r\n\r\n    this._rectangle = Rectangle.clone(rectangle);\r\n    this._granularity = granularity;\r\n    this._ellipsoid = ellipsoid;\r\n    this._surfaceHeight = Math.max(height, extrudedHeight);\r\n    this._rotation = rotation;\r\n    this._extrudedHeight = Math.min(height, extrudedHeight);\r\n    this._offsetAttribute = options.offsetAttribute;\r\n    this._workerName = 'createRectangleOutlineGeometry';\r\n}\r\n\r\n/**\r\n * The number of elements used to pack the object into an array.\r\n * @type {Number}\r\n */\r\nRectangleOutlineGeometry.packedLength = Rectangle.packedLength + Ellipsoid.packedLength + 5;\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {RectangleOutlineGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nRectangleOutlineGeometry.pack = function (value, array, startingIndex) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(value)) {\r\n        throw new DeveloperError('value is required');\r\n    }\r\n\r\n    if (!defined(array)) {\r\n        throw new DeveloperError('array is required');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    Rectangle.pack(value._rectangle, array, startingIndex);\r\n    startingIndex += Rectangle.packedLength;\r\n\r\n    Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n    startingIndex += Ellipsoid.packedLength;\r\n\r\n    array[startingIndex++] = value._granularity;\r\n    array[startingIndex++] = value._surfaceHeight;\r\n    array[startingIndex++] = value._rotation;\r\n    array[startingIndex++] = value._extrudedHeight;\r\n    array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n    return array;\r\n};\r\n\r\nvar scratchRectangle = new Rectangle();\r\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\nvar scratchOptions = {\r\n    rectangle: scratchRectangle,\r\n    ellipsoid: scratchEllipsoid,\r\n    granularity: undefined,\r\n    height: undefined,\r\n    rotation: undefined,\r\n    extrudedHeight: undefined,\r\n    offsetAttribute: undefined\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {RectangleOutlineGeometry} [result] The object into which to store the result.\r\n * @returns {RectangleOutlineGeometry} The modified result parameter or a new Quaternion instance if one was not provided.\r\n */\r\nRectangleOutlineGeometry.unpack = function (array, startingIndex, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(array)) {\r\n        throw new DeveloperError('array is required');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    var rectangle = Rectangle.unpack(array, startingIndex, scratchRectangle);\r\n    startingIndex += Rectangle.packedLength;\r\n\r\n    var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n    startingIndex += Ellipsoid.packedLength;\r\n\r\n    var granularity = array[startingIndex++];\r\n    var height = array[startingIndex++];\r\n    var rotation = array[startingIndex++];\r\n    var extrudedHeight = array[startingIndex++];\r\n    var offsetAttribute = array[startingIndex];\r\n\r\n    if (!defined(result)) {\r\n        scratchOptions.granularity = granularity;\r\n        scratchOptions.height = height;\r\n        scratchOptions.rotation = rotation;\r\n        scratchOptions.extrudedHeight = extrudedHeight;\r\n        scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n        return new RectangleOutlineGeometry(scratchOptions);\r\n    }\r\n\r\n    result._rectangle = Rectangle.clone(rectangle, result._rectangle);\r\n    result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n    result._surfaceHeight = height;\r\n    result._rotation = rotation;\r\n    result._extrudedHeight = extrudedHeight;\r\n    result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n    return result;\r\n};\r\n\r\nvar nwScratch = new Cartographic();\r\n/**\r\n * Computes the geometric representation of an outline of a rectangle, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {RectangleOutlineGeometry} rectangleGeometry A description of the rectangle outline.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n *\r\n * @exception {DeveloperError} Rotated rectangle is invalid.\r\n */\r\nRectangleOutlineGeometry.createGeometry = function (rectangleGeometry) {\r\n    var rectangle = rectangleGeometry._rectangle;\r\n    var ellipsoid = rectangleGeometry._ellipsoid;\r\n    var computedOptions = RectangleGeometryLibrary.computeOptions(rectangle, rectangleGeometry._granularity, rectangleGeometry._rotation, 0, rectangleScratch, nwScratch);\r\n\r\n    var geometry;\r\n    var boundingSphere;\r\n\r\n    if (CesiumMath.equalsEpsilon(rectangle.north, rectangle.south, CesiumMath.EPSILON10) || CesiumMath.equalsEpsilon(rectangle.east, rectangle.west, CesiumMath.EPSILON10)) {\r\n        return undefined;\r\n    }\r\n\r\n    var surfaceHeight = rectangleGeometry._surfaceHeight;\r\n    var extrudedHeight = rectangleGeometry._extrudedHeight;\r\n    var extrude = !CesiumMath.equalsEpsilon(surfaceHeight, extrudedHeight, 0, CesiumMath.EPSILON2);\r\n    var offsetValue;\r\n    if (extrude) {\r\n        geometry = constructExtrudedRectangle(rectangleGeometry, computedOptions);\r\n        if (defined(rectangleGeometry._offsetAttribute)) {\r\n            var size = geometry.attributes.position.values.length / 3;\r\n            var offsetAttribute = new Uint8Array(size);\r\n            if (rectangleGeometry._offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n                offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\r\n            } else {\r\n                offsetValue = rectangleGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                offsetAttribute = arrayFill(offsetAttribute, offsetValue);\r\n            }\r\n\r\n            geometry.attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute: 1,\r\n                values: offsetAttribute\r\n            });\r\n        }\r\n        var topBS = BoundingSphere.fromRectangle3D(rectangle, ellipsoid, surfaceHeight, topBoundingSphere);\r\n        var bottomBS = BoundingSphere.fromRectangle3D(rectangle, ellipsoid, extrudedHeight, bottomBoundingSphere);\r\n        boundingSphere = BoundingSphere.union(topBS, bottomBS);\r\n    } else {\r\n        geometry = constructRectangle(rectangleGeometry, computedOptions);\r\n        geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(geometry.attributes.position.values, surfaceHeight, ellipsoid, false);\r\n\r\n        if (defined(rectangleGeometry._offsetAttribute)) {\r\n            var length = geometry.attributes.position.values.length;\r\n            var applyOffset = new Uint8Array(length / 3);\r\n            offsetValue = rectangleGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n            arrayFill(applyOffset, offsetValue);\r\n            geometry.attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute: 1,\r\n                values: applyOffset\r\n            });\r\n        }\r\n\r\n        boundingSphere = BoundingSphere.fromRectangle3D(rectangle, ellipsoid, surfaceHeight);\r\n    }\r\n\r\n    return new Geometry({\r\n        attributes: geometry.attributes,\r\n        indices: geometry.indices,\r\n        primitiveType: PrimitiveType.LINES,\r\n        boundingSphere: boundingSphere,\r\n        offsetAttribute: rectangleGeometry._offsetAttribute\r\n    });\r\n};\r\nexport default RectangleOutlineGeometry;\r\n","import defined from '../Core/defined.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\nimport Rectangle from '../Core/Rectangle.js';\r\nimport RectangleOutlineGeometry from '../Core/RectangleOutlineGeometry.js';\r\n\r\nfunction createRectangleOutlineGeometry(rectangleGeometry, offset) {\r\n    if (defined(offset)) {\r\n        rectangleGeometry = RectangleOutlineGeometry.unpack(rectangleGeometry, offset);\r\n    }\r\n    rectangleGeometry._ellipsoid = Ellipsoid.clone(rectangleGeometry._ellipsoid);\r\n    rectangleGeometry._rectangle = Rectangle.clone(rectangleGeometry._rectangle);\r\n    return RectangleOutlineGeometry.createGeometry(rectangleGeometry);\r\n}\r\nexport default createRectangleOutlineGeometry;\r\n"],"names":["BoundingSphere","Cartesian3","Rectangle","RectangleGeometryLibrary","IndexDatatype","Geometry","GeometryAttributes","PrimitiveType","GeometryAttribute","ComponentDatatype","PolygonPipeline","defaultValue","CesiumMath","Ellipsoid","defined","DeveloperError","Cartographic","GeometryOffsetAttribute","arrayFill"],"mappings":"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"}