define(["exports","./GeometryOffsetAttribute-b02d5bb9","./Transforms-07a9fab5","./Cartesian2-38b35910","./ComponentDatatype-e44126e4","./when-ae2e0b60","./Check-f996273c","./GeometryAttribute-586bf52c","./GeometryAttributes-5ce4955a","./IndexDatatype-516320ea","./Math-5bbcea10"],function(i,D,S,I,T,z,t,L,U,F,R){"use strict";var f=new I.Cartesian3(1,1,1),N=Math.cos,B=Math.sin;function d(i){i=z.defaultValue(i,z.defaultValue.EMPTY_OBJECT);var t=z.defaultValue(i.radii,f),e=z.defaultValue(i.innerRadii,t),a=z.defaultValue(i.minimumClock,0),n=z.defaultValue(i.maximumClock,R.CesiumMath.TWO_PI),r=z.defaultValue(i.minimumCone,0),o=z.defaultValue(i.maximumCone,R.CesiumMath.PI),s=Math.round(z.defaultValue(i.stackPartitions,10)),m=Math.round(z.defaultValue(i.slicePartitions,8)),u=Math.round(z.defaultValue(i.subdivisions,128));this._radii=I.Cartesian3.clone(t),this._innerRadii=I.Cartesian3.clone(e),this._minimumClock=a,this._maximumClock=n,this._minimumCone=r,this._maximumCone=o,this._stackPartitions=s,this._slicePartitions=m,this._subdivisions=u,this._offsetAttribute=i.offsetAttribute,this._workerName="createEllipsoidOutlineGeometry"}d.packedLength=2*I.Cartesian3.packedLength+8,d.pack=function(i,t,e){return e=z.defaultValue(e,0),I.Cartesian3.pack(i._radii,t,e),e+=I.Cartesian3.packedLength,I.Cartesian3.pack(i._innerRadii,t,e),e+=I.Cartesian3.packedLength,t[e++]=i._minimumClock,t[e++]=i._maximumClock,t[e++]=i._minimumCone,t[e++]=i._maximumCone,t[e++]=i._stackPartitions,t[e++]=i._slicePartitions,t[e++]=i._subdivisions,t[e]=z.defaultValue(i._offsetAttribute,-1),t};var C=new I.Cartesian3,_=new I.Cartesian3,c={radii:C,innerRadii:_,minimumClock:void 0,maximumClock:void 0,minimumCone:void 0,maximumCone:void 0,stackPartitions:void 0,slicePartitions:void 0,subdivisions:void 0,offsetAttribute:void 0};d.unpack=function(i,t,e){t=z.defaultValue(t,0);var f=I.Cartesian3.unpack(i,t,C),l=(t+=I.Cartesian3.packedLength,I.Cartesian3.unpack(i,t,_)),a=(t+=I.Cartesian3.packedLength,i[t++]),n=i[t++],r=i[t++],o=i[t++],s=i[t++],m=i[t++],u=i[t++],i=i[t];return z.defined(e)?(e._radii=I.Cartesian3.clone(f,e._radii),e._innerRadii=I.Cartesian3.clone(l,e._innerRadii),e._minimumClock=a,e._maximumClock=n,e._minimumCone=r,e._maximumCone=o,e._stackPartitions=s,e._slicePartitions=m,e._subdivisions=u,e._offsetAttribute=-1===i?void 0:i,e):(c.minimumClock=a,c.maximumClock=n,c.minimumCone=r,c.maximumCone=o,c.stackPartitions=s,c.slicePartitions=m,c.subdivisions=u,c.offsetAttribute=-1===i?void 0:i,new d(c))},d.createGeometry=function(i){var t=i._radii;if(!(t.x<=0||t.y<=0||t.z<=0)){var e=i._innerRadii;if(!(e.x<=0||e.y<=0||e.z<=0)){for(var f,l,d=i._minimumClock,c=i._maximumClock,C=i._minimumCone,_=i._maximumCone,a=i._subdivisions,h=I.Ellipsoid.fromCartesian3(t),n=i._slicePartitions+1,r=i._stackPartitions+1,p=((n=Math.round(n*Math.abs(c-d)/R.CesiumMath.TWO_PI))<2&&(n=2),(r=Math.round(r*Math.abs(_-C)/R.CesiumMath.PI))<2&&(r=2),0),b=1,y=e.x!==t.x||e.y!==t.y||e.z!==t.z,k=!1,v=!1,A=(y&&(b=2,0<C&&(k=!0,p+=n),_<Math.PI&&(v=!0,p+=n)),a*b*(r+n)),o=new Float64Array(3*A),x=F.IndexDatatype.createTypedArray(A,2*(A+p-(n+r)*b)),s=0,P=new Array(r),w=new Array(r),m=0;m<r;m++)P[m]=B(l=C+m*(_-C)/(r-1)),w[m]=N(l);var M=new Array(a),V=new Array(a);for(m=0;m<a;m++)M[m]=B(f=d+m*(c-d)/(a-1)),V[m]=N(f);for(m=0;m<r;m++)for(u=0;u<a;u++)o[s++]=t.x*P[m]*V[u],o[s++]=t.y*P[m]*M[u],o[s++]=t.z*w[m];if(y)for(m=0;m<r;m++)for(u=0;u<a;u++)o[s++]=e.x*P[m]*V[u],o[s++]=e.y*P[m]*M[u],o[s++]=e.z*w[m];for(P.length=a,w.length=a,m=0;m<a;m++)P[m]=B(l=C+m*(_-C)/(a-1)),w[m]=N(l);for(M.length=n,V.length=n,m=0;m<n;m++)M[m]=B(f=d+m*(c-d)/(n-1)),V[m]=N(f);for(m=0;m<a;m++)for(u=0;u<n;u++)o[s++]=t.x*P[m]*V[u],o[s++]=t.y*P[m]*M[u],o[s++]=t.z*w[m];if(y)for(m=0;m<a;m++)for(u=0;u<n;u++)o[s++]=e.x*P[m]*V[u],o[s++]=e.y*P[m]*M[u],o[s++]=e.z*w[m];for(m=s=0;m<r*b;m++)for(var g=m*a,u=0;u<a-1;u++)x[s++]=g+u,x[s++]=g+u+1;var G=r*a*b;for(m=0;m<n;m++)for(u=0;u<a-1;u++)x[s++]=G+m+u*n,x[s++]=G+m+(u+1)*n;if(y)for(G=r*a*b+n*a,m=0;m<n;m++)for(u=0;u<a-1;u++)x[s++]=G+m+u*n,x[s++]=G+m+(u+1)*n;if(y){var E=r*a*b,O=E+a*n;if(k)for(m=0;m<n;m++)x[s++]=E+m,x[s++]=O+m;if(v)for(E+=a*n-n,O+=a*n-n,m=0;m<n;m++)x[s++]=E+m,x[s++]=O+m}A=new U.GeometryAttributes({position:new L.GeometryAttribute({componentDatatype:T.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:o})});return z.defined(i._offsetAttribute)&&(p=o.length,y=new Uint8Array(p/3),k=i._offsetAttribute===D.GeometryOffsetAttribute.NONE?0:1,D.arrayFill(y,k),A.applyOffset=new L.GeometryAttribute({componentDatatype:T.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:y})),new L.Geometry({attributes:A,indices:x,primitiveType:L.PrimitiveType.LINES,boundingSphere:S.BoundingSphere.fromEllipsoid(h),offsetAttribute:i._offsetAttribute})}}},i.EllipsoidOutlineGeometry=d});
