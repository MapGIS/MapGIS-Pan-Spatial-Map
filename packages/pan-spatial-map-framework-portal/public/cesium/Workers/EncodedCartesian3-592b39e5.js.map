{"version":3,"file":"EncodedCartesian3-592b39e5.js","sources":["../../../../Source/Core/EncodedCartesian3.js"],"sourcesContent":["import Cartesian3 from './Cartesian3.js';\r\nimport Check from './Check.js';\r\nimport defined from './defined.js';\r\n\r\n/**\r\n * A fixed-point encoding of a {@link Cartesian3} with 64-bit floating-point components, as two {@link Cartesian3}\r\n * values that, when converted to 32-bit floating-point and added, approximate the original input.\r\n * <p>\r\n * This is used to encode positions in vertex buffers for rendering without jittering artifacts\r\n * as described in {@link http://help.agi.com/AGIComponents/html/BlogPrecisionsPrecisions.htm|Precisions, Precisions}.\r\n * </p>\r\n *\r\n * @alias EncodedCartesian3\r\n * @constructor\r\n *\r\n * @private\r\n */\r\nfunction EncodedCartesian3() {\r\n    /**\r\n     * The high bits for each component.  Bits 0 to 22 store the whole value.  Bits 23 to 31 are not used.\r\n     *\r\n     * @type {Cartesian3}\r\n     * @default {@link Cartesian3.ZERO}\r\n     */\r\n    this.high = Cartesian3.clone(Cartesian3.ZERO);\r\n\r\n    /**\r\n     * The low bits for each component.  Bits 7 to 22 store the whole value, and bits 0 to 6 store the fraction.  Bits 23 to 31 are not used.\r\n     *\r\n     * @type {Cartesian3}\r\n     * @default {@link Cartesian3.ZERO}\r\n     */\r\n    this.low = Cartesian3.clone(Cartesian3.ZERO);\r\n}\r\n\r\n/**\r\n * Encodes a 64-bit floating-point value as two floating-point values that, when converted to\r\n * 32-bit floating-point and added, approximate the original input.  The returned object\r\n * has <code>high</code> and <code>low</code> properties for the high and low bits, respectively.\r\n * <p>\r\n * The fixed-point encoding follows {@link http://help.agi.com/AGIComponents/html/BlogPrecisionsPrecisions.htm|Precisions, Precisions}.\r\n * </p>\r\n *\r\n * @param {Number} value The floating-point value to encode.\r\n * @param {Object} [result] The object onto which to store the result.\r\n * @returns {Object} The modified result parameter or a new instance if one was not provided.\r\n *\r\n * @example\r\n * var value = 1234567.1234567;\r\n * var splitValue = Cesium.EncodedCartesian3.encode(value);\r\n */\r\nEncodedCartesian3.encode = function (value, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.typeOf.number('value', value);\r\n    //>>includeEnd('debug');\r\n\r\n    if (!defined(result)) {\r\n        result = {\r\n            high: 0.0,\r\n            low: 0.0\r\n        };\r\n    }\r\n\r\n    var doubleHigh;\r\n    if (value >= 0.0) {\r\n        doubleHigh = Math.floor(value / 65536.0) * 65536.0;\r\n        result.high = doubleHigh;\r\n        result.low = value - doubleHigh;\r\n    } else {\r\n        doubleHigh = Math.floor(-value / 65536.0) * 65536.0;\r\n        result.high = -doubleHigh;\r\n        result.low = value + doubleHigh;\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nvar scratchEncode = {\r\n    high: 0.0,\r\n    low: 0.0\r\n};\r\n\r\n/**\r\n * Encodes a {@link Cartesian3} with 64-bit floating-point components as two {@link Cartesian3}\r\n * values that, when converted to 32-bit floating-point and added, approximate the original input.\r\n * <p>\r\n * The fixed-point encoding follows {@link https://help.agi.com/AGIComponents/html/BlogPrecisionsPrecisions.htm|Precisions, Precisions}.\r\n * </p>\r\n *\r\n * @param {Cartesian3} cartesian The cartesian to encode.\r\n * @param {EncodedCartesian3} [result] The object onto which to store the result.\r\n * @returns {EncodedCartesian3} The modified result parameter or a new EncodedCartesian3 instance if one was not provided.\r\n *\r\n * @example\r\n * var cart = new Cesium.Cartesian3(-10000000.0, 0.0, 10000000.0);\r\n * var encoded = Cesium.EncodedCartesian3.fromCartesian(cart);\r\n */\r\nEncodedCartesian3.fromCartesian = function (cartesian, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.typeOf.object('cartesian', cartesian);\r\n    //>>includeEnd('debug');\r\n\r\n    if (!defined(result)) {\r\n        result = new EncodedCartesian3();\r\n    }\r\n\r\n    var high = result.high;\r\n    var low = result.low;\r\n\r\n    EncodedCartesian3.encode(cartesian.x, scratchEncode);\r\n    high.x = scratchEncode.high;\r\n    low.x = scratchEncode.low;\r\n\r\n    EncodedCartesian3.encode(cartesian.y, scratchEncode);\r\n    high.y = scratchEncode.high;\r\n    low.y = scratchEncode.low;\r\n\r\n    EncodedCartesian3.encode(cartesian.z, scratchEncode);\r\n    high.z = scratchEncode.high;\r\n    low.z = scratchEncode.low;\r\n\r\n    return result;\r\n};\r\n\r\nvar encodedP = new EncodedCartesian3();\r\n\r\n/**\r\n * Encodes the provided <code>cartesian</code>, and writes it to an array with <code>high</code>\r\n * components followed by <code>low</code> components, i.e. <code>[high.x, high.y, high.z, low.x, low.y, low.z]</code>.\r\n * <p>\r\n * This is used to create interleaved high-precision position vertex attributes.\r\n * </p>\r\n *\r\n * @param {Cartesian3} cartesian The cartesian to encode.\r\n * @param {Number[]} cartesianArray The array to write to.\r\n * @param {Number} index The index into the array to start writing.  Six elements will be written.\r\n *\r\n * @exception {DeveloperError} index must be a number greater than or equal to 0.\r\n *\r\n * @example\r\n * var positions = [\r\n *    new Cesium.Cartesian3(),\r\n *    // ...\r\n * ];\r\n * var encodedPositions = new Float32Array(2 * 3 * positions.length);\r\n * var j = 0;\r\n * for (var i = 0; i < positions.length; ++i) {\r\n *   Cesium.EncodedCartesian3.writeElement(positions[i], encodedPositions, j);\r\n *   j += 6;\r\n * }\r\n */\r\nEncodedCartesian3.writeElements = function (cartesian, cartesianArray, index) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined('cartesianArray', cartesianArray);\r\n    Check.typeOf.number('index', index);\r\n    Check.typeOf.number.greaterThanOrEquals('index', index, 0);\r\n    //>>includeEnd('debug');\r\n\r\n    EncodedCartesian3.fromCartesian(cartesian, encodedP);\r\n    var high = encodedP.high;\r\n    var low = encodedP.low;\r\n\r\n    cartesianArray[index] = high.x;\r\n    cartesianArray[index + 1] = high.y;\r\n    cartesianArray[index + 2] = high.z;\r\n    cartesianArray[index + 3] = low.x;\r\n    cartesianArray[index + 4] = low.y;\r\n    cartesianArray[index + 5] = low.z;\r\n};\r\nexport default EncodedCartesian3;\r\n"],"names":["Cartesian3","Check","defined"],"mappings":"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"}