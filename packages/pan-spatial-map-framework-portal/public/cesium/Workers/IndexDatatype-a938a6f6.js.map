{"version":3,"file":"IndexDatatype-a938a6f6.js","sources":["../../../../Source/Core/IndexDatatype.js"],"sourcesContent":["import defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport CesiumMath from './Math.js';\r\nimport WebGLConstants from './WebGLConstants.js';\r\n\r\n/**\r\n * Constants for WebGL index datatypes.  These corresponds to the\r\n * <code>type</code> parameter of {@link http://www.khronos.org/opengles/sdk/docs/man/xhtml/glDrawElements.xml|drawElements}.\r\n *\r\n * @enum {Number}\r\n */\r\nvar IndexDatatype = {\r\n    /**\r\n     * 8-bit unsigned byte corresponding to <code>UNSIGNED_BYTE</code> and the type\r\n     * of an element in <code>Uint8Array</code>.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    UNSIGNED_BYTE: WebGLConstants.UNSIGNED_BYTE,\r\n\r\n    /**\r\n     * 16-bit unsigned short corresponding to <code>UNSIGNED_SHORT</code> and the type\r\n     * of an element in <code>Uint16Array</code>.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    UNSIGNED_SHORT: WebGLConstants.UNSIGNED_SHORT,\r\n\r\n    /**\r\n     * 32-bit unsigned int corresponding to <code>UNSIGNED_INT</code> and the type\r\n     * of an element in <code>Uint32Array</code>.\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    UNSIGNED_INT: WebGLConstants.UNSIGNED_INT\r\n};\r\n\r\n/**\r\n * Returns the size, in bytes, of the corresponding datatype.\r\n *\r\n * @param {IndexDatatype} indexDatatype The index datatype to get the size of.\r\n * @returns {Number} The size in bytes.\r\n *\r\n * @example\r\n * // Returns 2\r\n * var size = Cesium.IndexDatatype.getSizeInBytes(Cesium.IndexDatatype.UNSIGNED_SHORT);\r\n */\r\nIndexDatatype.getSizeInBytes = function (indexDatatype) {\r\n    switch (indexDatatype) {\r\n        case IndexDatatype.UNSIGNED_BYTE:\r\n            return Uint8Array.BYTES_PER_ELEMENT;\r\n        case IndexDatatype.UNSIGNED_SHORT:\r\n            return Uint16Array.BYTES_PER_ELEMENT;\r\n        case IndexDatatype.UNSIGNED_INT:\r\n            return Uint32Array.BYTES_PER_ELEMENT;\r\n    }\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    throw new DeveloperError('indexDatatype is required and must be a valid IndexDatatype constant.');\r\n    //>>includeEnd('debug');\r\n};\r\n\r\n/**\r\n * Gets the datatype with a given size in bytes.\r\n *\r\n * @param {Number} sizeInBytes The size of a single index in bytes.\r\n * @returns {IndexDatatype} The index datatype with the given size.\r\n */\r\nIndexDatatype.fromSizeInBytes = function (sizeInBytes) {\r\n    switch (sizeInBytes) {\r\n        case 2:\r\n            return IndexDatatype.UNSIGNED_SHORT;\r\n        case 4:\r\n            return IndexDatatype.UNSIGNED_INT;\r\n        case 1:\r\n            return IndexDatatype.UNSIGNED_BYTE;\r\n        //>>includeStart('debug', pragmas.debug);\r\n        default:\r\n            throw new DeveloperError('Size in bytes cannot be mapped to an IndexDatatype');\r\n        //>>includeEnd('debug');\r\n    }\r\n};\r\n\r\n/**\r\n * Validates that the provided index datatype is a valid {@link IndexDatatype}.\r\n *\r\n * @param {IndexDatatype} indexDatatype The index datatype to validate.\r\n * @returns {Boolean} <code>true</code> if the provided index datatype is a valid value; otherwise, <code>false</code>.\r\n *\r\n * @example\r\n * if (!Cesium.IndexDatatype.validate(indexDatatype)) {\r\n *   throw new Cesium.DeveloperError('indexDatatype must be a valid value.');\r\n * }\r\n */\r\nIndexDatatype.validate = function (indexDatatype) {\r\n    return (\r\n        defined(indexDatatype) && (indexDatatype === IndexDatatype.UNSIGNED_BYTE || indexDatatype === IndexDatatype.UNSIGNED_SHORT || indexDatatype === IndexDatatype.UNSIGNED_INT)\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a typed array that will store indices, using either <code><Uint16Array</code>\r\n * or <code>Uint32Array</code> depending on the number of vertices.\r\n *\r\n * @param {Number} numberOfVertices Number of vertices that the indices will reference.\r\n * @param {Number|Array} indicesLengthOrArray Passed through to the typed array constructor.\r\n * @returns {Uint16Array|Uint32Array} A <code>Uint16Array</code> or <code>Uint32Array</code> constructed with <code>indicesLengthOrArray</code>.\r\n *\r\n * @example\r\n * this.indices = Cesium.IndexDatatype.createTypedArray(positions.length / 3, numberOfIndices);\r\n */\r\nIndexDatatype.createTypedArray = function (numberOfVertices, indicesLengthOrArray) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(numberOfVertices)) {\r\n        throw new DeveloperError('numberOfVertices is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    if (numberOfVertices >= CesiumMath.SIXTY_FOUR_KILOBYTES) {\r\n        return new Uint32Array(indicesLengthOrArray);\r\n    }\r\n\r\n    return new Uint16Array(indicesLengthOrArray);\r\n};\r\n\r\n/**\r\n * Creates a typed array from a source array buffer.  The resulting typed array will store indices, using either <code><Uint16Array</code>\r\n * or <code>Uint32Array</code> depending on the number of vertices.\r\n *\r\n * @param {Number} numberOfVertices Number of vertices that the indices will reference.\r\n * @param {ArrayBuffer} sourceArray Passed through to the typed array constructor.\r\n * @param {Number} byteOffset Passed through to the typed array constructor.\r\n * @param {Number} length Passed through to the typed array constructor.\r\n * @returns {Uint16Array|Uint32Array} A <code>Uint16Array</code> or <code>Uint32Array</code> constructed with <code>sourceArray</code>, <code>byteOffset</code>, and <code>length</code>.\r\n *\r\n */\r\nIndexDatatype.createTypedArrayFromArrayBuffer = function (numberOfVertices, sourceArray, byteOffset, length) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(numberOfVertices)) {\r\n        throw new DeveloperError('numberOfVertices is required.');\r\n    }\r\n    if (!defined(sourceArray)) {\r\n        throw new DeveloperError('sourceArray is required.');\r\n    }\r\n    if (!defined(byteOffset)) {\r\n        throw new DeveloperError('byteOffset is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    if (numberOfVertices >= CesiumMath.SIXTY_FOUR_KILOBYTES) {\r\n        return new Uint32Array(sourceArray, byteOffset, length);\r\n    }\r\n\r\n    return new Uint16Array(sourceArray, byteOffset, length);\r\n};\r\nexport default Object.freeze(IndexDatatype);\r\n"],"names":["WebGLConstants","DeveloperError","defined","CesiumMath"],"mappings":"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"}