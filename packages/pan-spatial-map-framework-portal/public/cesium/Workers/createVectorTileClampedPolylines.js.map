{"version":3,"file":"createVectorTileClampedPolylines.js","sources":["../../../../Source/WorkersES6/createVectorTileClampedPolylines.js"],"sourcesContent":["import AttributeCompression from '../Core/AttributeCompression.js';\r\nimport Cartesian3 from '../Core/Cartesian3.js';\r\nimport Cartographic from '../Core/Cartographic.js';\r\nimport combine from '../Core/combine.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\nimport IndexDatatype from '../Core/IndexDatatype.js';\r\nimport CesiumMath from '../Core/Math.js';\r\nimport Rectangle from '../Core/Rectangle.js';\r\nimport createTaskProcessorWorker from './createTaskProcessorWorker.js';\r\n\r\nvar MAX_SHORT = 32767;\r\nvar MITER_BREAK = Math.cos(CesiumMath.toRadians(150.0));\r\n\r\nvar scratchBVCartographic = new Cartographic();\r\nvar scratchEncodedPosition = new Cartesian3();\r\n\r\nfunction decodePositions(uBuffer, vBuffer, heightBuffer, rectangle, minimumHeight, maximumHeight, ellipsoid) {\r\n    var positionsLength = uBuffer.length;\r\n    var decodedPositions = new Float64Array(positionsLength * 3);\r\n    for (var i = 0; i < positionsLength; ++i) {\r\n        var u = uBuffer[i];\r\n        var v = vBuffer[i];\r\n        var h = heightBuffer[i];\r\n\r\n        var lon = CesiumMath.lerp(rectangle.west, rectangle.east, u / MAX_SHORT);\r\n        var lat = CesiumMath.lerp(rectangle.south, rectangle.north, v / MAX_SHORT);\r\n        var alt = CesiumMath.lerp(minimumHeight, maximumHeight, h / MAX_SHORT);\r\n\r\n        var cartographic = Cartographic.fromRadians(lon, lat, alt, scratchBVCartographic);\r\n        var decodedPosition = ellipsoid.cartographicToCartesian(cartographic, scratchEncodedPosition);\r\n        Cartesian3.pack(decodedPosition, decodedPositions, i * 3);\r\n    }\r\n    return decodedPositions;\r\n}\r\n\r\nfunction getPositionOffsets(counts) {\r\n    var countsLength = counts.length;\r\n    var positionOffsets = new Uint32Array(countsLength + 1);\r\n    var offset = 0;\r\n    for (var i = 0; i < countsLength; ++i) {\r\n        positionOffsets[i] = offset;\r\n        offset += counts[i];\r\n    }\r\n    positionOffsets[countsLength] = offset;\r\n    return positionOffsets;\r\n}\r\n\r\nvar previousCompressedCartographicScratch = new Cartographic();\r\nvar currentCompressedCartographicScratch = new Cartographic();\r\nfunction removeDuplicates(uBuffer, vBuffer, heightBuffer, counts) {\r\n    var countsLength = counts.length;\r\n    var positionsLength = uBuffer.length;\r\n    var markRemoval = new Uint8Array(positionsLength);\r\n    var previous = previousCompressedCartographicScratch;\r\n    var current = currentCompressedCartographicScratch;\r\n    var offset = 0;\r\n    for (var i = 0; i < countsLength; i++) {\r\n        var count = counts[i];\r\n        var updatedCount = count;\r\n        for (var j = 1; j < count; j++) {\r\n            var index = offset + j;\r\n            var previousIndex = index - 1;\r\n            current.longitude = uBuffer[index];\r\n            current.latitude = vBuffer[index];\r\n            previous.longitude = uBuffer[previousIndex];\r\n            previous.latitude = vBuffer[previousIndex];\r\n\r\n            if (Cartographic.equals(current, previous)) {\r\n                updatedCount--;\r\n                markRemoval[previousIndex] = 1;\r\n            }\r\n        }\r\n        counts[i] = updatedCount;\r\n        offset += count;\r\n    }\r\n\r\n    var nextAvailableIndex = 0;\r\n    for (var k = 0; k < positionsLength; k++) {\r\n        if (markRemoval[k] !== 1) {\r\n            uBuffer[nextAvailableIndex] = uBuffer[k];\r\n            vBuffer[nextAvailableIndex] = vBuffer[k];\r\n            heightBuffer[nextAvailableIndex] = heightBuffer[k];\r\n            nextAvailableIndex++;\r\n        }\r\n    }\r\n}\r\n\r\nfunction VertexAttributesAndIndices(volumesCount) {\r\n    var vertexCount = volumesCount * 8;\r\n    var vec3Floats = vertexCount * 3;\r\n    var vec4Floats = vertexCount * 4;\r\n    this.startEllipsoidNormals = new Float32Array(vec3Floats);\r\n    this.endEllipsoidNormals = new Float32Array(vec3Floats);\r\n    this.startPositionAndHeights = new Float32Array(vec4Floats);\r\n    this.startFaceNormalAndVertexCornerIds = new Float32Array(vec4Floats);\r\n    this.endPositionAndHeights = new Float32Array(vec4Floats);\r\n    this.endFaceNormalAndHalfWidths = new Float32Array(vec4Floats);\r\n    this.vertexBatchIds = new Uint16Array(vertexCount);\r\n\r\n    this.indices = IndexDatatype.createTypedArray(vertexCount, 36 * volumesCount);\r\n\r\n    this.vec3Offset = 0;\r\n    this.vec4Offset = 0;\r\n    this.batchIdOffset = 0;\r\n    this.indexOffset = 0;\r\n\r\n    this.volumeStartIndex = 0;\r\n}\r\n\r\nvar towardCurrScratch = new Cartesian3();\r\nvar towardNextScratch = new Cartesian3();\r\nfunction computeMiteredNormal(previousPosition, position, nextPosition, ellipsoidSurfaceNormal, result) {\r\n    var towardNext = Cartesian3.subtract(nextPosition, position, towardNextScratch);\r\n    var towardCurr = Cartesian3.subtract(position, previousPosition, towardCurrScratch);\r\n    Cartesian3.normalize(towardNext, towardNext);\r\n    Cartesian3.normalize(towardCurr, towardCurr);\r\n\r\n    if (Cartesian3.dot(towardNext, towardCurr) < MITER_BREAK) {\r\n        towardCurr = Cartesian3.multiplyByScalar(towardCurr, -1.0, towardCurrScratch);\r\n    }\r\n\r\n    Cartesian3.add(towardNext, towardCurr, result);\r\n    if (Cartesian3.equals(result, Cartesian3.ZERO)) {\r\n        result = Cartesian3.subtract(previousPosition, position);\r\n    }\r\n\r\n    // Make sure the normal is orthogonal to the ellipsoid surface normal\r\n    Cartesian3.cross(result, ellipsoidSurfaceNormal, result);\r\n    Cartesian3.cross(ellipsoidSurfaceNormal, result, result);\r\n    Cartesian3.normalize(result, result);\r\n    return result;\r\n}\r\n\r\n// Winding order is reversed so each segment's volume is inside-out\r\n//          3-----------7\r\n//         /|   left   /|\r\n//        / | 1       / |\r\n//       2-----------6  5  end\r\n//       | /         | /\r\n// start |/  right   |/\r\n//       0-----------4\r\n//\r\nvar REFERENCE_INDICES = [\r\n    0,\r\n    2,\r\n    6,\r\n    0,\r\n    6,\r\n    4, // right\r\n    0,\r\n    1,\r\n    3,\r\n    0,\r\n    3,\r\n    2, // start face\r\n    0,\r\n    4,\r\n    5,\r\n    0,\r\n    5,\r\n    1, // bottom\r\n    5,\r\n    3,\r\n    1,\r\n    5,\r\n    7,\r\n    3, // left\r\n    7,\r\n    5,\r\n    4,\r\n    7,\r\n    4,\r\n    6, // end face\r\n    7,\r\n    6,\r\n    2,\r\n    7,\r\n    2,\r\n    3 // top\r\n];\r\nvar REFERENCE_INDICES_LENGTH = REFERENCE_INDICES.length;\r\n\r\nvar positionScratch = new Cartesian3();\r\nvar scratchStartEllipsoidNormal = new Cartesian3();\r\nvar scratchStartFaceNormal = new Cartesian3();\r\nvar scratchEndEllipsoidNormal = new Cartesian3();\r\nvar scratchEndFaceNormal = new Cartesian3();\r\nVertexAttributesAndIndices.prototype.addVolume = function (preStartRTC, startRTC, endRTC, postEndRTC, startHeight, endHeight, halfWidth, batchId, center, ellipsoid) {\r\n    var position = Cartesian3.add(startRTC, center, positionScratch);\r\n    var startEllipsoidNormal = ellipsoid.geodeticSurfaceNormal(position, scratchStartEllipsoidNormal);\r\n    position = Cartesian3.add(endRTC, center, positionScratch);\r\n    var endEllipsoidNormal = ellipsoid.geodeticSurfaceNormal(position, scratchEndEllipsoidNormal);\r\n\r\n    var startFaceNormal = computeMiteredNormal(preStartRTC, startRTC, endRTC, startEllipsoidNormal, scratchStartFaceNormal);\r\n    var endFaceNormal = computeMiteredNormal(postEndRTC, endRTC, startRTC, endEllipsoidNormal, scratchEndFaceNormal);\r\n\r\n    var startEllipsoidNormals = this.startEllipsoidNormals;\r\n    var endEllipsoidNormals = this.endEllipsoidNormals;\r\n    var startPositionAndHeights = this.startPositionAndHeights;\r\n    var startFaceNormalAndVertexCornerIds = this.startFaceNormalAndVertexCornerIds;\r\n    var endPositionAndHeights = this.endPositionAndHeights;\r\n    var endFaceNormalAndHalfWidths = this.endFaceNormalAndHalfWidths;\r\n    var vertexBatchIds = this.vertexBatchIds;\r\n\r\n    var batchIdOffset = this.batchIdOffset;\r\n    var vec3Offset = this.vec3Offset;\r\n    var vec4Offset = this.vec4Offset;\r\n\r\n    var i;\r\n    for (i = 0; i < 8; i++) {\r\n        Cartesian3.pack(startEllipsoidNormal, startEllipsoidNormals, vec3Offset);\r\n        Cartesian3.pack(endEllipsoidNormal, endEllipsoidNormals, vec3Offset);\r\n\r\n        Cartesian3.pack(startRTC, startPositionAndHeights, vec4Offset);\r\n        startPositionAndHeights[vec4Offset + 3] = startHeight;\r\n\r\n        Cartesian3.pack(endRTC, endPositionAndHeights, vec4Offset);\r\n        endPositionAndHeights[vec4Offset + 3] = endHeight;\r\n\r\n        Cartesian3.pack(startFaceNormal, startFaceNormalAndVertexCornerIds, vec4Offset);\r\n        startFaceNormalAndVertexCornerIds[vec4Offset + 3] = i;\r\n\r\n        Cartesian3.pack(endFaceNormal, endFaceNormalAndHalfWidths, vec4Offset);\r\n        endFaceNormalAndHalfWidths[vec4Offset + 3] = halfWidth;\r\n\r\n        vertexBatchIds[batchIdOffset++] = batchId;\r\n\r\n        vec3Offset += 3;\r\n        vec4Offset += 4;\r\n    }\r\n\r\n    this.batchIdOffset = batchIdOffset;\r\n    this.vec3Offset = vec3Offset;\r\n    this.vec4Offset = vec4Offset;\r\n    var indices = this.indices;\r\n    var volumeStartIndex = this.volumeStartIndex;\r\n\r\n    var indexOffset = this.indexOffset;\r\n    for (i = 0; i < REFERENCE_INDICES_LENGTH; i++) {\r\n        indices[indexOffset + i] = REFERENCE_INDICES[i] + volumeStartIndex;\r\n    }\r\n\r\n    this.volumeStartIndex += 8;\r\n    this.indexOffset += REFERENCE_INDICES_LENGTH;\r\n};\r\n\r\nvar scratchRectangle = new Rectangle();\r\nvar scratchEllipsoid = new Ellipsoid();\r\nvar scratchCenter = new Cartesian3();\r\n\r\nvar scratchPrev = new Cartesian3();\r\nvar scratchP0 = new Cartesian3();\r\nvar scratchP1 = new Cartesian3();\r\nvar scratchNext = new Cartesian3();\r\nfunction createVectorTileClampedPolylines(parameters, transferableObjects) {\r\n    var encodedPositions = new Uint16Array(parameters.positions);\r\n    var widths = new Uint16Array(parameters.widths);\r\n    var counts = new Uint32Array(parameters.counts);\r\n    var batchIds = new Uint16Array(parameters.batchIds);\r\n\r\n    // Unpack tile decoding parameters\r\n    var rectangle = scratchRectangle;\r\n    var ellipsoid = scratchEllipsoid;\r\n    var center = scratchCenter;\r\n    var packedBuffer = new Float64Array(parameters.packedBuffer);\r\n\r\n    var offset = 0;\r\n    var minimumHeight = packedBuffer[offset++];\r\n    var maximumHeight = packedBuffer[offset++];\r\n\r\n    Rectangle.unpack(packedBuffer, offset, rectangle);\r\n    offset += Rectangle.packedLength;\r\n\r\n    Ellipsoid.unpack(packedBuffer, offset, ellipsoid);\r\n    offset += Ellipsoid.packedLength;\r\n\r\n    Cartesian3.unpack(packedBuffer, offset, center);\r\n\r\n    var i;\r\n\r\n    // Unpack positions and generate volumes\r\n    var positionsLength = encodedPositions.length / 3;\r\n    var uBuffer = encodedPositions.subarray(0, positionsLength);\r\n    var vBuffer = encodedPositions.subarray(positionsLength, 2 * positionsLength);\r\n    var heightBuffer = encodedPositions.subarray(2 * positionsLength, 3 * positionsLength);\r\n    AttributeCompression.zigZagDeltaDecode(uBuffer, vBuffer, heightBuffer);\r\n\r\n    removeDuplicates(uBuffer, vBuffer, heightBuffer, counts);\r\n\r\n    // Figure out how many volumes and how many vertices there will be.\r\n    var countsLength = counts.length;\r\n    var volumesCount = 0;\r\n    for (i = 0; i < countsLength; i++) {\r\n        var polylinePositionCount = counts[i];\r\n        volumesCount += polylinePositionCount - 1;\r\n    }\r\n\r\n    var attribsAndIndices = new VertexAttributesAndIndices(volumesCount);\r\n\r\n    var positions = decodePositions(uBuffer, vBuffer, heightBuffer, rectangle, minimumHeight, maximumHeight, ellipsoid, center);\r\n\r\n    positionsLength = uBuffer.length;\r\n    var positionsRTC = new Float32Array(positionsLength * 3);\r\n    for (i = 0; i < positionsLength; ++i) {\r\n        positionsRTC[i * 3] = positions[i * 3] - center.x;\r\n        positionsRTC[i * 3 + 1] = positions[i * 3 + 1] - center.y;\r\n        positionsRTC[i * 3 + 2] = positions[i * 3 + 2] - center.z;\r\n    }\r\n\r\n    var currentPositionIndex = 0;\r\n    var currentHeightIndex = 0;\r\n    for (i = 0; i < countsLength; i++) {\r\n        var polylineVolumeCount = counts[i] - 1;\r\n        var halfWidth = widths[i] * 0.5;\r\n        var batchId = batchIds[i];\r\n        var volumeFirstPositionIndex = currentPositionIndex;\r\n        for (var j = 0; j < polylineVolumeCount; j++) {\r\n            var volumeStart = Cartesian3.unpack(positionsRTC, currentPositionIndex, scratchP0);\r\n            var volumeEnd = Cartesian3.unpack(positionsRTC, currentPositionIndex + 3, scratchP1);\r\n\r\n            var startHeight = heightBuffer[currentHeightIndex];\r\n            var endHeight = heightBuffer[currentHeightIndex + 1];\r\n            startHeight = CesiumMath.lerp(minimumHeight, maximumHeight, startHeight / MAX_SHORT);\r\n            endHeight = CesiumMath.lerp(minimumHeight, maximumHeight, endHeight / MAX_SHORT);\r\n\r\n            currentHeightIndex++;\r\n\r\n            var preStart = scratchPrev;\r\n            var postEnd = scratchNext;\r\n            if (j === 0) {\r\n                // Check if this volume is like a loop\r\n                var finalPositionIndex = volumeFirstPositionIndex + polylineVolumeCount * 3;\r\n                var finalPosition = Cartesian3.unpack(positionsRTC, finalPositionIndex, scratchPrev);\r\n                if (Cartesian3.equals(finalPosition, volumeStart)) {\r\n                    Cartesian3.unpack(positionsRTC, finalPositionIndex - 3, preStart);\r\n                } else {\r\n                    var offsetPastStart = Cartesian3.subtract(volumeStart, volumeEnd, scratchPrev);\r\n                    preStart = Cartesian3.add(offsetPastStart, volumeStart, scratchPrev);\r\n                }\r\n            } else {\r\n                Cartesian3.unpack(positionsRTC, currentPositionIndex - 3, preStart);\r\n            }\r\n\r\n            if (j === polylineVolumeCount - 1) {\r\n                // Check if this volume is like a loop\r\n                var firstPosition = Cartesian3.unpack(positionsRTC, volumeFirstPositionIndex, scratchNext);\r\n                if (Cartesian3.equals(firstPosition, volumeEnd)) {\r\n                    Cartesian3.unpack(positionsRTC, volumeFirstPositionIndex + 3, postEnd);\r\n                } else {\r\n                    var offsetPastEnd = Cartesian3.subtract(volumeEnd, volumeStart, scratchNext);\r\n                    postEnd = Cartesian3.add(offsetPastEnd, volumeEnd, scratchNext);\r\n                }\r\n            } else {\r\n                Cartesian3.unpack(positionsRTC, currentPositionIndex + 6, postEnd);\r\n            }\r\n\r\n            attribsAndIndices.addVolume(preStart, volumeStart, volumeEnd, postEnd, startHeight, endHeight, halfWidth, batchId, center, ellipsoid);\r\n\r\n            currentPositionIndex += 3;\r\n        }\r\n        currentPositionIndex += 3;\r\n        currentHeightIndex++;\r\n    }\r\n\r\n    var indices = attribsAndIndices.indices;\r\n\r\n    transferableObjects.push(attribsAndIndices.startEllipsoidNormals.buffer);\r\n    transferableObjects.push(attribsAndIndices.endEllipsoidNormals.buffer);\r\n    transferableObjects.push(attribsAndIndices.startPositionAndHeights.buffer);\r\n    transferableObjects.push(attribsAndIndices.startFaceNormalAndVertexCornerIds.buffer);\r\n    transferableObjects.push(attribsAndIndices.endPositionAndHeights.buffer);\r\n    transferableObjects.push(attribsAndIndices.endFaceNormalAndHalfWidths.buffer);\r\n    transferableObjects.push(attribsAndIndices.vertexBatchIds.buffer);\r\n    transferableObjects.push(indices.buffer);\r\n\r\n    var results = {\r\n        indexDatatype: indices.BYTES_PER_ELEMENT === 2 ? IndexDatatype.UNSIGNED_SHORT : IndexDatatype.UNSIGNED_INT,\r\n        startEllipsoidNormals: attribsAndIndices.startEllipsoidNormals.buffer,\r\n        endEllipsoidNormals: attribsAndIndices.endEllipsoidNormals.buffer,\r\n        startPositionAndHeights: attribsAndIndices.startPositionAndHeights.buffer,\r\n        startFaceNormalAndVertexCornerIds: attribsAndIndices.startFaceNormalAndVertexCornerIds.buffer,\r\n        endPositionAndHeights: attribsAndIndices.endPositionAndHeights.buffer,\r\n        endFaceNormalAndHalfWidths: attribsAndIndices.endFaceNormalAndHalfWidths.buffer,\r\n        vertexBatchIds: attribsAndIndices.vertexBatchIds.buffer,\r\n        indices: indices.buffer\r\n    };\r\n\r\n    if (parameters.keepDecodedPositions) {\r\n        var positionOffsets = getPositionOffsets(counts);\r\n        transferableObjects.push(positions.buffer, positionOffsets.buffer);\r\n        results = combine(results, {\r\n            decodedPositions: positions.buffer,\r\n            decodedPositionOffsets: positionOffsets.buffer\r\n        });\r\n    }\r\n\r\n    return results;\r\n}\r\nexport default createTaskProcessorWorker(createVectorTileClampedPolylines);\r\n"],"names":["CesiumMath","Cartographic","Cartesian3","IndexDatatype","Rectangle","Ellipsoid","AttributeCompression","combine"],"mappings":"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"}