define(["./when-ae2e0b60","./Cartesian2-38b35910","./ArcType-1275a14e","./arrayRemoveDuplicates-bdf50aa0","./Transforms-07a9fab5","./Color-0fad516f","./ComponentDatatype-e44126e4","./Check-f996273c","./GeometryAttribute-586bf52c","./GeometryAttributes-5ce4955a","./IndexDatatype-516320ea","./Math-5bbcea10","./PolylinePipeline-f47a23a0","./VertexFormat-90d15264","./combine-276652d0","./RuntimeError-ac2797b4","./WebGLConstants-35626ea2","./EllipsoidGeodesic-0207b202","./EllipsoidRhumbLine-af7b5ebe","./IntersectionTests-f49c7cd3","./Plane-45ad3143"],function(z,J,j,$,ee,K,Q,e,X,te,re,ae,Z,y,t,r,a,o,n,i,l){"use strict";var oe=[];function m(e){var t=(e=z.defaultValue(e,z.defaultValue.EMPTY_OBJECT)).positions,r=e.colors,a=z.defaultValue(e.width,1),o=z.defaultValue(e.colorsPerVertex,!1),a=(this._positions=t,this._colors=r,this._width=a,this._colorsPerVertex=o,this._vertexFormat=y.VertexFormat.clone(z.defaultValue(e.vertexFormat,y.VertexFormat.DEFAULT)),this._arcType=z.defaultValue(e.arcType,j.ArcType.GEODESIC),this._granularity=z.defaultValue(e.granularity,ae.CesiumMath.RADIANS_PER_DEGREE),this._ellipsoid=J.Ellipsoid.clone(z.defaultValue(e.ellipsoid,J.Ellipsoid.WGS84)),this._workerName="createPolylineGeometry",1+t.length*J.Cartesian3.packedLength);a+=z.defined(r)?1+r.length*K.Color.packedLength:1,this.packedLength=a+J.Ellipsoid.packedLength+y.VertexFormat.packedLength+4}m.pack=function(e,t,r){r=z.defaultValue(r,0);var a,o=e._positions,n=o.length;for(t[r++]=n,a=0;a<n;++a,r+=J.Cartesian3.packedLength)J.Cartesian3.pack(o[a],t,r);var i=e._colors,n=z.defined(i)?i.length:0;for(t[r++]=n,a=0;a<n;++a,r+=K.Color.packedLength)K.Color.pack(i[a],t,r);return J.Ellipsoid.pack(e._ellipsoid,t,r),r+=J.Ellipsoid.packedLength,y.VertexFormat.pack(e._vertexFormat,t,r),r+=y.VertexFormat.packedLength,t[r++]=e._width,t[r++]=e._colorsPerVertex?1:0,t[r++]=e._arcType,t[r]=e._granularity,t};var h=J.Ellipsoid.clone(J.Ellipsoid.UNIT_SPHERE),C=new y.VertexFormat,f={positions:void 0,colors:void 0,ellipsoid:h,vertexFormat:C,width:void 0,colorsPerVertex:void 0,arcType:void 0,granularity:void 0},ne=(m.unpack=function(e,t,r){t=z.defaultValue(t,0);for(var a=e[t++],o=new Array(a),n=0;n<a;++n,t+=J.Cartesian3.packedLength)o[n]=J.Cartesian3.unpack(e,t);var i=0<(a=e[t++])?new Array(a):void 0;for(n=0;n<a;++n,t+=K.Color.packedLength)i[n]=K.Color.unpack(e,t);var c=J.Ellipsoid.unpack(e,t,h),d=(t+=J.Ellipsoid.packedLength,y.VertexFormat.unpack(e,t,C)),l=(t+=y.VertexFormat.packedLength,e[t++]),s=1===e[t++],p=e[t++],u=e[t];return z.defined(r)?(r._positions=o,r._colors=i,r._ellipsoid=J.Ellipsoid.clone(c,r._ellipsoid),r._vertexFormat=y.VertexFormat.clone(d,r._vertexFormat),r._width=l,r._colorsPerVertex=s,r._arcType=p,r._granularity=u,r):(f.positions=o,f.colors=i,f.width=l,f.colorsPerVertex=s,f.arcType=p,f.granularity=u,new m(f))},new J.Cartesian3),ie=new J.Cartesian3,le=new J.Cartesian3,se=new J.Cartesian3;return m.createGeometry=function(e){var c,d,u=e._width,y=e._vertexFormat,t=e._colors,m=e._colorsPerVertex,r=e._arcType,a=e._granularity,f=e._ellipsoid,h=[],o=$.arrayRemoveDuplicates(e._positions,J.Cartesian3.equalsEpsilon,!1,h);if(z.defined(t)&&0<h.length&&(d=h[c=0],t=t.filter(function(e,t){return(m?t!==d&&(0!==t||1!==d):t+1!==d)||(d=h[++c],!1)})),!((l=o.length)<2||u<=0)){if(r===j.ArcType.GEODESIC||r===j.ArcType.RHUMB){var C,v=r===j.ArcType.GEODESIC?(C=ae.CesiumMath.chordLength(a,f.maximumRadius),Z.PolylinePipeline.numberOfPoints):(C=a,Z.PolylinePipeline.numberOfPointsRhumbLine),e=Z.PolylinePipeline.extractHeights(o,f);if(z.defined(t)){for(var g=1,n=0;n<l-1;++n)g+=v(o[n],o[n+1],C);var _=new Array(g),b=0;for(n=0;n<l-1;++n){var A=o[n],E=o[n+1],P=t[n],w=v(A,E,C);if(m&&n<g)for(var T=function(e,t,r){var a=oe,o=(a.length=r,e.red),n=e.green,i=e.blue,l=e.alpha,s=t.red,c=t.green,d=t.blue,u=t.alpha;if(K.Color.equals(e,t)){for(p=0;p<r;p++)a[p]=K.Color.clone(e);return a}for(var y=(s-o)/r,m=(c-n)/r,f=(d-i)/r,h=(u-l)/r,p=0;p<r;p++)a[p]=new K.Color(o+p*y,n+p*m,i+p*f,l+p*h);return a}(P,t[n+1],w),x=T.length,i=0;i<x;++i)_[b++]=T[i];else for(i=0;i<w;++i)_[b++]=K.Color.clone(P)}_[b]=K.Color.clone(t[t.length-1]),t=_,oe.length=0}o=r===j.ArcType.GEODESIC?Z.PolylinePipeline.generateCartesianArc({positions:o,minDistance:C,ellipsoid:f,height:e}):Z.PolylinePipeline.generateCartesianRhumbArc({positions:o,granularity:C,ellipsoid:f,height:e})}var l,s,k,D,a=4*(l=o.length)-4,V=new Float64Array(3*a),L=new Float64Array(3*a),F=new Float64Array(3*a),G=new Float32Array(2*a),O=y.st?new Float32Array(2*a):void 0,p=z.defined(t)?new Uint8Array(4*a):void 0,R=0,I=0,S=0,B=0;for(i=0;i<l;++i){0===i?(J.Cartesian3.subtract(o[0],o[1],s=ne),J.Cartesian3.add(o[0],s,s)):s=o[i-1],J.Cartesian3.clone(s,le),J.Cartesian3.clone(o[i],ie),i===l-1?(J.Cartesian3.subtract(o[l-1],o[l-2],s=ne),J.Cartesian3.add(o[l-1],s,s)):s=o[i+1],J.Cartesian3.clone(s,se),z.defined(p)&&(k=0===i||m?t[i]:t[i-1],i!==l-1&&(D=t[i]));for(var U=i===l-1?2:4,N=0===i?2:0;N<U;++N){J.Cartesian3.pack(ie,V,R),J.Cartesian3.pack(le,L,R),J.Cartesian3.pack(se,F,R),R+=3;var M=N-2<0?-1:1;G[I++]=N%2*2-1,G[I++]=M*u,y.st&&(O[S++]=i/(l-1),O[S++]=Math.max(G[I-2],0)),z.defined(p)&&(p[B++]=K.Color.floatToByte((M=N<2?k:D).red),p[B++]=K.Color.floatToByte(M.green),p[B++]=K.Color.floatToByte(M.blue),p[B++]=K.Color.floatToByte(M.alpha))}}var r=new te.GeometryAttributes,H=(r.position=new X.GeometryAttribute({componentDatatype:Q.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:V}),r.prevPosition=new X.GeometryAttribute({componentDatatype:Q.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:L}),r.nextPosition=new X.GeometryAttribute({componentDatatype:Q.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:F}),r.expandAndWidth=new X.GeometryAttribute({componentDatatype:Q.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:G}),y.st&&(r.st=new X.GeometryAttribute({componentDatatype:Q.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:O})),z.defined(p)&&(r.color=new X.GeometryAttribute({componentDatatype:Q.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:4,values:p,normalize:!0})),re.IndexDatatype.createTypedArray(a,6*l-6)),W=0,Y=0,q=l-1;for(i=0;i<q;++i)H[Y++]=W,H[Y++]=W+2,H[Y++]=W+1,H[Y++]=W+1,H[Y++]=W+2,H[Y++]=W+3,W+=4;return new X.Geometry({attributes:r,indices:H,primitiveType:X.PrimitiveType.TRIANGLES,boundingSphere:ee.BoundingSphere.fromPoints(o),geometryType:X.GeometryType.POLYLINES})}},function(e,t){return(e=z.defined(t)?m.unpack(e,t):e)._ellipsoid=J.Ellipsoid.clone(e._ellipsoid),m.createGeometry(e)}});
