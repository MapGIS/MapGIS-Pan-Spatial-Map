define(["./when-ae2e0b60","./Cartesian2-38b35910","./Transforms-07a9fab5","./ComponentDatatype-e44126e4","./Check-f996273c","./GeometryAttribute-586bf52c","./GeometryAttributes-5ce4955a","./IndexDatatype-516320ea","./Math-5bbcea10","./VertexFormat-90d15264","./WallGeometryLibrary-cb91bdcd","./combine-276652d0","./RuntimeError-ac2797b4","./WebGLConstants-35626ea2","./arrayRemoveDuplicates-bdf50aa0","./PolylinePipeline-f47a23a0","./EllipsoidGeodesic-0207b202","./EllipsoidRhumbLine-af7b5ebe","./IntersectionTests-f49c7cd3","./Plane-45ad3143"],function(S,I,q,N,e,M,J,Y,W,p,Z,t,a,i,n,r,o,s,m,l){"use strict";var B=new I.Cartesian3,U=new I.Cartesian3,j=new I.Cartesian3,K=new I.Cartesian3,Q=new I.Cartesian3,X=new I.Cartesian3,$=new I.Cartesian3;function d(e){var t=(e=S.defaultValue(e,S.defaultValue.EMPTY_OBJECT)).positions,a=e.maximumHeights,i=e.minimumHeights,n=S.defaultValue(e.vertexFormat,p.VertexFormat.DEFAULT),r=S.defaultValue(e.granularity,W.CesiumMath.RADIANS_PER_DEGREE),e=S.defaultValue(e.ellipsoid,I.Ellipsoid.WGS84),n=(this._positions=t,this._minimumHeights=i,this._maximumHeights=a,this._vertexFormat=p.VertexFormat.clone(n),this._granularity=r,this._ellipsoid=I.Ellipsoid.clone(e),this._workerName="createWallGeometry",1+t.length*I.Cartesian3.packedLength+2);S.defined(i)&&(n+=i.length),S.defined(a)&&(n+=a.length),this.packedLength=n+I.Ellipsoid.packedLength+p.VertexFormat.packedLength+1}d.pack=function(e,t,a){a=S.defaultValue(a,0);var i,n=e._positions,r=n.length;for(t[a++]=r,i=0;i<r;++i,a+=I.Cartesian3.packedLength)I.Cartesian3.pack(n[i],t,a);var o=e._minimumHeights,r=S.defined(o)?o.length:0;if(t[a++]=r,S.defined(o))for(i=0;i<r;++i)t[a++]=o[i];var s=e._maximumHeights;if(r=S.defined(s)?s.length:0,t[a++]=r,S.defined(s))for(i=0;i<r;++i)t[a++]=s[i];return I.Ellipsoid.pack(e._ellipsoid,t,a),a+=I.Ellipsoid.packedLength,p.VertexFormat.pack(e._vertexFormat,t,a),t[a+=p.VertexFormat.packedLength]=e._granularity,t};var y=I.Ellipsoid.clone(I.Ellipsoid.UNIT_SPHERE),f=new p.VertexFormat,c={positions:void 0,minimumHeights:void 0,maximumHeights:void 0,ellipsoid:y,vertexFormat:f,granularity:void 0};return d.unpack=function(e,t,a){t=S.defaultValue(t,0);for(var i,n,r=e[t++],o=new Array(r),s=0;s<r;++s,t+=I.Cartesian3.packedLength)o[s]=I.Cartesian3.unpack(e,t);if(0<(r=e[t++]))for(i=new Array(r),s=0;s<r;++s)i[s]=e[t++];if(0<(r=e[t++]))for(n=new Array(r),s=0;s<r;++s)n[s]=e[t++];var m=I.Ellipsoid.unpack(e,t,y),u=(t+=I.Ellipsoid.packedLength,p.VertexFormat.unpack(e,t,f)),l=e[t+=p.VertexFormat.packedLength];return S.defined(a)?(a._positions=o,a._minimumHeights=i,a._maximumHeights=n,a._ellipsoid=I.Ellipsoid.clone(m,a._ellipsoid),a._vertexFormat=p.VertexFormat.clone(u,a._vertexFormat),a._granularity=l,a):(c.positions=o,c.minimumHeights=i,c.maximumHeights=n,c.granularity=l,new d(c))},d.fromConstantHeights=function(e){var t=(e=S.defaultValue(e,S.defaultValue.EMPTY_OBJECT)).positions,a=e.minimumHeight,i=e.maximumHeight,n=S.defined(a),r=S.defined(i);if(n||r)for(var o=t.length,s=n?new Array(o):void 0,m=r?new Array(o):void 0,l=0;l<o;++l)n&&(s[l]=a),r&&(m[l]=i);return new d({positions:t,maximumHeights:m,minimumHeights:s,ellipsoid:e.ellipsoid,vertexFormat:e.vertexFormat})},d.createGeometry=function(e){var u=e._positions,p=e._minimumHeights,t=e._maximumHeights,a=e._vertexFormat,d=e._granularity,c=e._ellipsoid,e=Z.WallGeometryLibrary.computePositions(c,u,t,p,d,!0);if(S.defined(e)){for(var y=e.bottomPositions,f=e.topPositions,u=e.numCorners,g=f.length,t=2*g,i=a.position?new Float64Array(t):void 0,h=a.normal?new Float32Array(t):void 0,C=a.tangent?new Float32Array(t):void 0,b=a.bitangent?new Float32Array(t):void 0,v=a.st?new Float32Array(t/3*2):void 0,x=0,A=0,_=0,E=0,w=0,n=$,r=X,o=Q,F=!0,L=0,k=1/((g/=3)-u-1),s=0;s<g;++s){var H,V=3*s,m=I.Cartesian3.fromArray(f,V,B),l=I.Cartesian3.fromArray(y,V,U);a.position&&(i[x++]=l.x,i[x++]=l.y,i[x++]=l.z,i[x++]=m.x,i[x++]=m.y,i[x++]=m.z),a.st&&(v[w++]=L,v[w++]=0,v[w++]=L,v[w++]=1),(a.normal||a.tangent||a.bitangent)&&(l=I.Cartesian3.clone(I.Cartesian3.ZERO,K),H=I.Cartesian3.subtract(m,c.geodeticSurfaceNormal(m,U),U),s+1<g&&(l=I.Cartesian3.fromArray(f,3+V,K)),F&&(V=I.Cartesian3.subtract(l,m,j),H=I.Cartesian3.subtract(H,m,B),n=I.Cartesian3.normalize(I.Cartesian3.cross(H,V,n),n),F=!1),I.Cartesian3.equalsEpsilon(m,l,W.CesiumMath.EPSILON10)?F=!0:(L+=k,a.tangent&&(r=I.Cartesian3.normalize(I.Cartesian3.subtract(l,m,r),r)),a.bitangent&&(o=I.Cartesian3.normalize(I.Cartesian3.cross(n,r,o),o))),a.normal&&(h[A++]=n.x,h[A++]=n.y,h[A++]=n.z,h[A++]=n.x,h[A++]=n.y,h[A++]=n.z),a.tangent&&(C[E++]=r.x,C[E++]=r.y,C[E++]=r.z,C[E++]=r.x,C[E++]=r.y,C[E++]=r.z),a.bitangent&&(b[_++]=o.x,b[_++]=o.y,b[_++]=o.z,b[_++]=o.x,b[_++]=o.y,b[_++]=o.z))}var p=new J.GeometryAttributes,G=(a.position&&(p.position=new M.GeometryAttribute({componentDatatype:N.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:i})),a.normal&&(p.normal=new M.GeometryAttribute({componentDatatype:N.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:h})),a.tangent&&(p.tangent=new M.GeometryAttribute({componentDatatype:N.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:C})),a.bitangent&&(p.bitangent=new M.GeometryAttribute({componentDatatype:N.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:b})),a.st&&(p.st=new M.GeometryAttribute({componentDatatype:N.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:v})),t/3),D=Y.IndexDatatype.createTypedArray(G,t-=6*(u+1)),P=0;for(s=0;s<G-2;s+=2){var T=s,z=s+2,O=I.Cartesian3.fromArray(i,3*T,B),R=I.Cartesian3.fromArray(i,3*z,U);I.Cartesian3.equalsEpsilon(O,R,W.CesiumMath.EPSILON10)||(O=s+3,D[P++]=s+1,D[P++]=T,D[P++]=O,D[P++]=O,D[P++]=T,D[P++]=z)}return new M.Geometry({attributes:p,indices:D,primitiveType:M.PrimitiveType.TRIANGLES,boundingSphere:new q.BoundingSphere.fromVertices(i)})}},function(e,t){return(e=S.defined(t)?d.unpack(e,t):e)._ellipsoid=I.Ellipsoid.clone(e._ellipsoid),d.createGeometry(e)}});
