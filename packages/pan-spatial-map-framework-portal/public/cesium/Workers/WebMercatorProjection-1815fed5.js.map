{"version":3,"file":"WebMercatorProjection-1815fed5.js","sources":["../../../../Source/Core/WebMercatorProjection.js"],"sourcesContent":["import Cartesian3 from './Cartesian3.js';\r\nimport Cartographic from './Cartographic.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport CesiumMath from './Math.js';\r\n\r\n/**\r\n * The map projection used by Google Maps, Bing Maps, and most of ArcGIS Online, EPSG:3857.  This\r\n * projection use longitude and latitude expressed with the WGS84 and transforms them to Mercator using\r\n * the spherical (rather than ellipsoidal) equations.\r\n *\r\n * @alias WebMercatorProjection\r\n * @constructor\r\n *\r\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid.\r\n *\r\n * @see GeographicProjection\r\n */\r\nfunction WebMercatorProjection(ellipsoid) {\r\n    this._ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\r\n    this._semimajorAxis = this._ellipsoid.maximumRadius;\r\n    this._oneOverSemimajorAxis = 1.0 / this._semimajorAxis;\r\n}\r\n\r\nObject.defineProperties(WebMercatorProjection.prototype, {\r\n    /**\r\n     * Gets the {@link Ellipsoid}.\r\n     *\r\n     * @memberof WebMercatorProjection.prototype\r\n     *\r\n     * @type {Ellipsoid}\r\n     * @readonly\r\n     */\r\n    ellipsoid: {\r\n        get: function () {\r\n            return this._ellipsoid;\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts a Mercator angle, in the range -PI to PI, to a geodetic latitude\r\n * in the range -PI/2 to PI/2.\r\n *\r\n * @param {Number} mercatorAngle The angle to convert.\r\n * @returns {Number} The geodetic latitude in radians.\r\n */\r\nWebMercatorProjection.mercatorAngleToGeodeticLatitude = function (mercatorAngle) {\r\n    return CesiumMath.PI_OVER_TWO - 2.0 * Math.atan(Math.exp(-mercatorAngle));\r\n};\r\n\r\n/**\r\n * Converts a geodetic latitude in radians, in the range -PI/2 to PI/2, to a Mercator\r\n * angle in the range -PI to PI.\r\n *\r\n * @param {Number} latitude The geodetic latitude in radians.\r\n * @returns {Number} The Mercator angle.\r\n */\r\nWebMercatorProjection.geodeticLatitudeToMercatorAngle = function (latitude) {\r\n    // Clamp the latitude coordinate to the valid Mercator bounds.\r\n    if (latitude > WebMercatorProjection.MaximumLatitude) {\r\n        latitude = WebMercatorProjection.MaximumLatitude;\r\n    } else if (latitude < -WebMercatorProjection.MaximumLatitude) {\r\n        latitude = -WebMercatorProjection.MaximumLatitude;\r\n    }\r\n    var sinLatitude = Math.sin(latitude);\r\n    return 0.5 * Math.log((1.0 + sinLatitude) / (1.0 - sinLatitude));\r\n};\r\n\r\n/**\r\n * The maximum latitude (both North and South) supported by a Web Mercator\r\n * (EPSG:3857) projection.  Technically, the Mercator projection is defined\r\n * for any latitude up to (but not including) 90 degrees, but it makes sense\r\n * to cut it off sooner because it grows exponentially with increasing latitude.\r\n * The logic behind this particular cutoff value, which is the one used by\r\n * Google Maps, Bing Maps, and Esri, is that it makes the projection\r\n * square.  That is, the rectangle is equal in the X and Y directions.\r\n *\r\n * The constant value is computed by calling:\r\n *    WebMercatorProjection.mercatorAngleToGeodeticLatitude(Math.PI)\r\n *\r\n * @type {Number}\r\n */\r\nWebMercatorProjection.MaximumLatitude = WebMercatorProjection.mercatorAngleToGeodeticLatitude(Math.PI);\r\n\r\n/**\r\n * Converts geodetic ellipsoid coordinates, in radians, to the equivalent Web Mercator\r\n * X, Y, Z coordinates expressed in meters and returned in a {@link Cartesian3}.  The height\r\n * is copied unmodified to the Z coordinate.\r\n *\r\n * @param {Cartographic} cartographic The cartographic coordinates in radians.\r\n * @param {Cartesian3} [result] The instance to which to copy the result, or undefined if a\r\n *        new instance should be created.\r\n * @returns {Cartesian3} The equivalent web mercator X, Y, Z coordinates, in meters.\r\n */\r\nWebMercatorProjection.prototype.project = function (cartographic, result) {\r\n    var semimajorAxis = this._semimajorAxis;\r\n    var x = cartographic.longitude * semimajorAxis;\r\n    var y = WebMercatorProjection.geodeticLatitudeToMercatorAngle(cartographic.latitude) * semimajorAxis;\r\n    var z = cartographic.height;\r\n\r\n    if (!defined(result)) {\r\n        return new Cartesian3(x, y, z);\r\n    }\r\n\r\n    result.x = x;\r\n    result.y = y;\r\n    result.z = z;\r\n    return result;\r\n};\r\n\r\n/**\r\n * Converts Web Mercator X, Y coordinates, expressed in meters, to a {@link Cartographic}\r\n * containing geodetic ellipsoid coordinates.  The Z coordinate is copied unmodified to the\r\n * height.\r\n *\r\n * @param {Cartesian3} cartesian The web mercator Cartesian position to unrproject with height (z) in meters.\r\n * @param {Cartographic} [result] The instance to which to copy the result, or undefined if a\r\n *        new instance should be created.\r\n * @returns {Cartographic} The equivalent cartographic coordinates.\r\n */\r\nWebMercatorProjection.prototype.unproject = function (cartesian, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(cartesian)) {\r\n        throw new DeveloperError('cartesian is required');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var oneOverEarthSemimajorAxis = this._oneOverSemimajorAxis;\r\n    var longitude = cartesian.x * oneOverEarthSemimajorAxis;\r\n    var latitude = WebMercatorProjection.mercatorAngleToGeodeticLatitude(cartesian.y * oneOverEarthSemimajorAxis);\r\n    var height = cartesian.z;\r\n\r\n    if (!defined(result)) {\r\n        return new Cartographic(longitude, latitude, height);\r\n    }\r\n\r\n    result.longitude = longitude;\r\n    result.latitude = latitude;\r\n    result.height = height;\r\n    return result;\r\n};\r\nexport default WebMercatorProjection;\r\n"],"names":["defaultValue","Ellipsoid","CesiumMath","defined","Cartesian3","DeveloperError","Cartographic"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;IAQA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,SAAS,qBAAqB,CAAC,SAAS,EAAE;IAC1C,IAAI,IAAI,CAAC,UAAU,GAAGA,iBAAY,CAAC,SAAS,EAAEC,oBAAS,CAAC,KAAK,CAAC,CAAC;IAC/D,IAAI,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;IACxD,IAAI,IAAI,CAAC,qBAAqB,GAAG,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC;IAC3D,CAAC;AACD;IACA,MAAM,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,SAAS,EAAE;IACzD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,SAAS,EAAE;IACf,QAAQ,GAAG,EAAE,YAAY;IACzB,YAAY,OAAO,IAAI,CAAC,UAAU,CAAC;IACnC,SAAS;IACT,KAAK;IACL,CAAC,CAAC,CAAC;AACH;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,qBAAqB,CAAC,+BAA+B,GAAG,UAAU,aAAa,EAAE;IACjF,IAAI,OAAOC,iBAAU,CAAC,WAAW,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;IAC9E,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,qBAAqB,CAAC,+BAA+B,GAAG,UAAU,QAAQ,EAAE;IAC5E;IACA,IAAI,IAAI,QAAQ,GAAG,qBAAqB,CAAC,eAAe,EAAE;IAC1D,QAAQ,QAAQ,GAAG,qBAAqB,CAAC,eAAe,CAAC;IACzD,KAAK,MAAM,IAAI,QAAQ,GAAG,CAAC,qBAAqB,CAAC,eAAe,EAAE;IAClE,QAAQ,QAAQ,GAAG,CAAC,qBAAqB,CAAC,eAAe,CAAC;IAC1D,KAAK;IACL,IAAI,IAAI,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACzC,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,WAAW,KAAK,GAAG,GAAG,WAAW,CAAC,CAAC,CAAC;IACrE,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,qBAAqB,CAAC,eAAe,GAAG,qBAAqB,CAAC,+BAA+B,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACvG;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,qBAAqB,CAAC,SAAS,CAAC,OAAO,GAAG,UAAU,YAAY,EAAE,MAAM,EAAE;IAC1E,IAAI,IAAI,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC;IAC5C,IAAI,IAAI,CAAC,GAAG,YAAY,CAAC,SAAS,GAAG,aAAa,CAAC;IACnD,IAAI,IAAI,CAAC,GAAG,qBAAqB,CAAC,+BAA+B,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,aAAa,CAAC;IACzG,IAAI,IAAI,CAAC,GAAG,YAAY,CAAC,MAAM,CAAC;AAChC;IACA,IAAI,IAAI,CAACC,YAAO,CAAC,MAAM,CAAC,EAAE;IAC1B,QAAQ,OAAO,IAAIC,qBAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACvC,KAAK;AACL;IACA,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;IACjB,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;IACjB,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;IACjB,IAAI,OAAO,MAAM,CAAC;IAClB,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,qBAAqB,CAAC,SAAS,CAAC,SAAS,GAAG,UAAU,SAAS,EAAE,MAAM,EAAE;IACzE;IACA,IAAI,IAAI,CAACD,YAAO,CAAC,SAAS,CAAC,EAAE;IAC7B,QAAQ,MAAM,IAAIE,oBAAc,CAAC,uBAAuB,CAAC,CAAC;IAC1D,KAAK;IACL;AACA;IACA,IAAI,IAAI,yBAAyB,GAAG,IAAI,CAAC,qBAAqB,CAAC;IAC/D,IAAI,IAAI,SAAS,GAAG,SAAS,CAAC,CAAC,GAAG,yBAAyB,CAAC;IAC5D,IAAI,IAAI,QAAQ,GAAG,qBAAqB,CAAC,+BAA+B,CAAC,SAAS,CAAC,CAAC,GAAG,yBAAyB,CAAC,CAAC;IAClH,IAAI,IAAI,MAAM,GAAG,SAAS,CAAC,CAAC,CAAC;AAC7B;IACA,IAAI,IAAI,CAACF,YAAO,CAAC,MAAM,CAAC,EAAE;IAC1B,QAAQ,OAAO,IAAIG,uBAAY,CAAC,SAAS,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;IAC7D,KAAK;AACL;IACA,IAAI,MAAM,CAAC,SAAS,GAAG,SAAS,CAAC;IACjC,IAAI,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC/B,IAAI,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;IAC3B,IAAI,OAAO,MAAM,CAAC;IAClB,CAAC;;;;;;;;"}