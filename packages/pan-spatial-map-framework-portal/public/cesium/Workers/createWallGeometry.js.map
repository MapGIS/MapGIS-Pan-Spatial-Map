{"version":3,"file":"createWallGeometry.js","sources":["../../../../Source/Core/WallGeometry.js","../../../../Source/WorkersES6/createWallGeometry.js"],"sourcesContent":["import BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport CesiumMath from './Math.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\nimport VertexFormat from './VertexFormat.js';\r\nimport WallGeometryLibrary from './WallGeometryLibrary.js';\r\n\r\nvar scratchCartesian3Position1 = new Cartesian3();\r\nvar scratchCartesian3Position2 = new Cartesian3();\r\nvar scratchCartesian3Position4 = new Cartesian3();\r\nvar scratchCartesian3Position5 = new Cartesian3();\r\nvar scratchBitangent = new Cartesian3();\r\nvar scratchTangent = new Cartesian3();\r\nvar scratchNormal = new Cartesian3();\r\n\r\n/**\r\n * A description of a wall, which is similar to a KML line string. A wall is defined by a series of points,\r\n * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\r\n *\r\n * @alias WallGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\r\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n * @param {Number[]} [options.maximumHeights] An array parallel to <code>positions</code> that give the maximum height of the\r\n *        wall at <code>positions</code>. If undefined, the height of each position in used.\r\n * @param {Number[]} [options.minimumHeights] An array parallel to <code>positions</code> that give the minimum height of the\r\n *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n *\r\n * @exception {DeveloperError} positions length must be greater than or equal to 2.\r\n * @exception {DeveloperError} positions and maximumHeights must have the same length.\r\n * @exception {DeveloperError} positions and minimumHeights must have the same length.\r\n *\r\n * @see WallGeometry#createGeometry\r\n * @see WallGeometry#fromConstantHeight\r\n *\r\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Wall.html|Cesium Sandcastle Wall Demo}\r\n *\r\n * @example\r\n * // create a wall that spans from ground level to 10000 meters\r\n * var wall = new Cesium.WallGeometry({\r\n *   positions : Cesium.Cartesian3.fromDegreesArrayHeights([\r\n *     19.0, 47.0, 10000.0,\r\n *     19.0, 48.0, 10000.0,\r\n *     20.0, 48.0, 10000.0,\r\n *     20.0, 47.0, 10000.0,\r\n *     19.0, 47.0, 10000.0\r\n *   ])\r\n * });\r\n * var geometry = Cesium.WallGeometry.createGeometry(wall);\r\n */\r\nfunction WallGeometry(options) {\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n    var wallPositions = options.positions;\r\n    var maximumHeights = options.maximumHeights;\r\n    var minimumHeights = options.minimumHeights;\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(wallPositions)) {\r\n        throw new DeveloperError('options.positions is required.');\r\n    }\r\n    if (defined(maximumHeights) && maximumHeights.length !== wallPositions.length) {\r\n        throw new DeveloperError('options.positions and options.maximumHeights must have the same length.');\r\n    }\r\n    if (defined(minimumHeights) && minimumHeights.length !== wallPositions.length) {\r\n        throw new DeveloperError('options.positions and options.minimumHeights must have the same length.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\r\n    var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n    var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n\r\n    this._positions = wallPositions;\r\n    this._minimumHeights = minimumHeights;\r\n    this._maximumHeights = maximumHeights;\r\n    this._vertexFormat = VertexFormat.clone(vertexFormat);\r\n    this._granularity = granularity;\r\n    this._ellipsoid = Ellipsoid.clone(ellipsoid);\r\n    this._workerName = 'createWallGeometry';\r\n\r\n    var numComponents = 1 + wallPositions.length * Cartesian3.packedLength + 2;\r\n    if (defined(minimumHeights)) {\r\n        numComponents += minimumHeights.length;\r\n    }\r\n    if (defined(maximumHeights)) {\r\n        numComponents += maximumHeights.length;\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    this.packedLength = numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 1;\r\n}\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {WallGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nWallGeometry.pack = function (value, array, startingIndex) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(value)) {\r\n        throw new DeveloperError('value is required');\r\n    }\r\n    if (!defined(array)) {\r\n        throw new DeveloperError('array is required');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    var i;\r\n\r\n    var positions = value._positions;\r\n    var length = positions.length;\r\n    array[startingIndex++] = length;\r\n\r\n    for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n        Cartesian3.pack(positions[i], array, startingIndex);\r\n    }\r\n\r\n    var minimumHeights = value._minimumHeights;\r\n    length = defined(minimumHeights) ? minimumHeights.length : 0;\r\n    array[startingIndex++] = length;\r\n\r\n    if (defined(minimumHeights)) {\r\n        for (i = 0; i < length; ++i) {\r\n            array[startingIndex++] = minimumHeights[i];\r\n        }\r\n    }\r\n\r\n    var maximumHeights = value._maximumHeights;\r\n    length = defined(maximumHeights) ? maximumHeights.length : 0;\r\n    array[startingIndex++] = length;\r\n\r\n    if (defined(maximumHeights)) {\r\n        for (i = 0; i < length; ++i) {\r\n            array[startingIndex++] = maximumHeights[i];\r\n        }\r\n    }\r\n\r\n    Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n    startingIndex += Ellipsoid.packedLength;\r\n\r\n    VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n    startingIndex += VertexFormat.packedLength;\r\n\r\n    array[startingIndex] = value._granularity;\r\n\r\n    return array;\r\n};\r\n\r\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\nvar scratchVertexFormat = new VertexFormat();\r\nvar scratchOptions = {\r\n    positions: undefined,\r\n    minimumHeights: undefined,\r\n    maximumHeights: undefined,\r\n    ellipsoid: scratchEllipsoid,\r\n    vertexFormat: scratchVertexFormat,\r\n    granularity: undefined\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {WallGeometry} [result] The object into which to store the result.\r\n * @returns {WallGeometry} The modified result parameter or a new WallGeometry instance if one was not provided.\r\n */\r\nWallGeometry.unpack = function (array, startingIndex, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(array)) {\r\n        throw new DeveloperError('array is required');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    var i;\r\n\r\n    var length = array[startingIndex++];\r\n    var positions = new Array(length);\r\n\r\n    for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n        positions[i] = Cartesian3.unpack(array, startingIndex);\r\n    }\r\n\r\n    length = array[startingIndex++];\r\n    var minimumHeights;\r\n\r\n    if (length > 0) {\r\n        minimumHeights = new Array(length);\r\n        for (i = 0; i < length; ++i) {\r\n            minimumHeights[i] = array[startingIndex++];\r\n        }\r\n    }\r\n\r\n    length = array[startingIndex++];\r\n    var maximumHeights;\r\n\r\n    if (length > 0) {\r\n        maximumHeights = new Array(length);\r\n        for (i = 0; i < length; ++i) {\r\n            maximumHeights[i] = array[startingIndex++];\r\n        }\r\n    }\r\n\r\n    var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n    startingIndex += Ellipsoid.packedLength;\r\n\r\n    var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\r\n    startingIndex += VertexFormat.packedLength;\r\n\r\n    var granularity = array[startingIndex];\r\n\r\n    if (!defined(result)) {\r\n        scratchOptions.positions = positions;\r\n        scratchOptions.minimumHeights = minimumHeights;\r\n        scratchOptions.maximumHeights = maximumHeights;\r\n        scratchOptions.granularity = granularity;\r\n        return new WallGeometry(scratchOptions);\r\n    }\r\n\r\n    result._positions = positions;\r\n    result._minimumHeights = minimumHeights;\r\n    result._maximumHeights = maximumHeights;\r\n    result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n    result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n    result._granularity = granularity;\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * A description of a wall, which is similar to a KML line string. A wall is defined by a series of points,\r\n * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\r\n * @param {Number} [options.maximumHeight] A constant that defines the maximum height of the\r\n *        wall at <code>positions</code>. If undefined, the height of each position in used.\r\n * @param {Number} [options.minimumHeight] A constant that defines the minimum height of the\r\n *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n * @returns {WallGeometry}\r\n *\r\n *\r\n * @example\r\n * // create a wall that spans from 10000 meters to 20000 meters\r\n * var wall = Cesium.WallGeometry.fromConstantHeights({\r\n *   positions : Cesium.Cartesian3.fromDegreesArray([\r\n *     19.0, 47.0,\r\n *     19.0, 48.0,\r\n *     20.0, 48.0,\r\n *     20.0, 47.0,\r\n *     19.0, 47.0,\r\n *   ]),\r\n *   minimumHeight : 20000.0,\r\n *   maximumHeight : 10000.0\r\n * });\r\n * var geometry = Cesium.WallGeometry.createGeometry(wall);\r\n *\r\n * @see WallGeometry#createGeometry\r\n */\r\nWallGeometry.fromConstantHeights = function (options) {\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n    var positions = options.positions;\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(positions)) {\r\n        throw new DeveloperError('options.positions is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var minHeights;\r\n    var maxHeights;\r\n\r\n    var min = options.minimumHeight;\r\n    var max = options.maximumHeight;\r\n\r\n    var doMin = defined(min);\r\n    var doMax = defined(max);\r\n    if (doMin || doMax) {\r\n        var length = positions.length;\r\n        minHeights = doMin ? new Array(length) : undefined;\r\n        maxHeights = doMax ? new Array(length) : undefined;\r\n\r\n        for (var i = 0; i < length; ++i) {\r\n            if (doMin) {\r\n                minHeights[i] = min;\r\n            }\r\n\r\n            if (doMax) {\r\n                maxHeights[i] = max;\r\n            }\r\n        }\r\n    }\r\n\r\n    var newOptions = {\r\n        positions: positions,\r\n        maximumHeights: maxHeights,\r\n        minimumHeights: minHeights,\r\n        ellipsoid: options.ellipsoid,\r\n        vertexFormat: options.vertexFormat\r\n    };\r\n    return new WallGeometry(newOptions);\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of a wall, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {WallGeometry} wallGeometry A description of the wall.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nWallGeometry.createGeometry = function (wallGeometry) {\r\n    var wallPositions = wallGeometry._positions;\r\n    var minimumHeights = wallGeometry._minimumHeights;\r\n    var maximumHeights = wallGeometry._maximumHeights;\r\n    var vertexFormat = wallGeometry._vertexFormat;\r\n    var granularity = wallGeometry._granularity;\r\n    var ellipsoid = wallGeometry._ellipsoid;\r\n\r\n    var pos = WallGeometryLibrary.computePositions(ellipsoid, wallPositions, maximumHeights, minimumHeights, granularity, true);\r\n    if (!defined(pos)) {\r\n        return;\r\n    }\r\n\r\n    var bottomPositions = pos.bottomPositions;\r\n    var topPositions = pos.topPositions;\r\n    var numCorners = pos.numCorners;\r\n\r\n    var length = topPositions.length;\r\n    var size = length * 2;\r\n\r\n    var positions = vertexFormat.position ? new Float64Array(size) : undefined;\r\n    var normals = vertexFormat.normal ? new Float32Array(size) : undefined;\r\n    var tangents = vertexFormat.tangent ? new Float32Array(size) : undefined;\r\n    var bitangents = vertexFormat.bitangent ? new Float32Array(size) : undefined;\r\n    var textureCoordinates = vertexFormat.st ? new Float32Array((size / 3) * 2) : undefined;\r\n\r\n    var positionIndex = 0;\r\n    var normalIndex = 0;\r\n    var bitangentIndex = 0;\r\n    var tangentIndex = 0;\r\n    var stIndex = 0;\r\n\r\n    // add lower and upper points one after the other, lower\r\n    // points being even and upper points being odd\r\n    var normal = scratchNormal;\r\n    var tangent = scratchTangent;\r\n    var bitangent = scratchBitangent;\r\n    var recomputeNormal = true;\r\n    length /= 3;\r\n    var i;\r\n    var s = 0;\r\n    var ds = 1 / (length - numCorners - 1);\r\n    for (i = 0; i < length; ++i) {\r\n        var i3 = i * 3;\r\n        var topPosition = Cartesian3.fromArray(topPositions, i3, scratchCartesian3Position1);\r\n        var bottomPosition = Cartesian3.fromArray(bottomPositions, i3, scratchCartesian3Position2);\r\n        if (vertexFormat.position) {\r\n            // insert the lower point\r\n            positions[positionIndex++] = bottomPosition.x;\r\n            positions[positionIndex++] = bottomPosition.y;\r\n            positions[positionIndex++] = bottomPosition.z;\r\n\r\n            // insert the upper point\r\n            positions[positionIndex++] = topPosition.x;\r\n            positions[positionIndex++] = topPosition.y;\r\n            positions[positionIndex++] = topPosition.z;\r\n        }\r\n\r\n        if (vertexFormat.st) {\r\n            textureCoordinates[stIndex++] = s;\r\n            textureCoordinates[stIndex++] = 0.0;\r\n\r\n            textureCoordinates[stIndex++] = s;\r\n            textureCoordinates[stIndex++] = 1.0;\r\n        }\r\n\r\n        if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\r\n            var nextTop = Cartesian3.clone(Cartesian3.ZERO, scratchCartesian3Position5);\r\n            var groundPosition = Cartesian3.subtract(topPosition, ellipsoid.geodeticSurfaceNormal(topPosition, scratchCartesian3Position2), scratchCartesian3Position2);\r\n            if (i + 1 < length) {\r\n                nextTop = Cartesian3.fromArray(topPositions, i3 + 3, scratchCartesian3Position5);\r\n            }\r\n\r\n            if (recomputeNormal) {\r\n                var scalednextPosition = Cartesian3.subtract(nextTop, topPosition, scratchCartesian3Position4);\r\n                var scaledGroundPosition = Cartesian3.subtract(groundPosition, topPosition, scratchCartesian3Position1);\r\n                normal = Cartesian3.normalize(Cartesian3.cross(scaledGroundPosition, scalednextPosition, normal), normal);\r\n                recomputeNormal = false;\r\n            }\r\n\r\n            if (Cartesian3.equalsEpsilon(topPosition, nextTop, CesiumMath.EPSILON10)) {\r\n                recomputeNormal = true;\r\n            } else {\r\n                s += ds;\r\n                if (vertexFormat.tangent) {\r\n                    tangent = Cartesian3.normalize(Cartesian3.subtract(nextTop, topPosition, tangent), tangent);\r\n                }\r\n                if (vertexFormat.bitangent) {\r\n                    bitangent = Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\r\n                }\r\n            }\r\n\r\n            if (vertexFormat.normal) {\r\n                normals[normalIndex++] = normal.x;\r\n                normals[normalIndex++] = normal.y;\r\n                normals[normalIndex++] = normal.z;\r\n\r\n                normals[normalIndex++] = normal.x;\r\n                normals[normalIndex++] = normal.y;\r\n                normals[normalIndex++] = normal.z;\r\n            }\r\n\r\n            if (vertexFormat.tangent) {\r\n                tangents[tangentIndex++] = tangent.x;\r\n                tangents[tangentIndex++] = tangent.y;\r\n                tangents[tangentIndex++] = tangent.z;\r\n\r\n                tangents[tangentIndex++] = tangent.x;\r\n                tangents[tangentIndex++] = tangent.y;\r\n                tangents[tangentIndex++] = tangent.z;\r\n            }\r\n\r\n            if (vertexFormat.bitangent) {\r\n                bitangents[bitangentIndex++] = bitangent.x;\r\n                bitangents[bitangentIndex++] = bitangent.y;\r\n                bitangents[bitangentIndex++] = bitangent.z;\r\n\r\n                bitangents[bitangentIndex++] = bitangent.x;\r\n                bitangents[bitangentIndex++] = bitangent.y;\r\n                bitangents[bitangentIndex++] = bitangent.z;\r\n            }\r\n        }\r\n    }\r\n\r\n    var attributes = new GeometryAttributes();\r\n\r\n    if (vertexFormat.position) {\r\n        attributes.position = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute: 3,\r\n            values: positions\r\n        });\r\n    }\r\n\r\n    if (vertexFormat.normal) {\r\n        attributes.normal = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 3,\r\n            values: normals\r\n        });\r\n    }\r\n\r\n    if (vertexFormat.tangent) {\r\n        attributes.tangent = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 3,\r\n            values: tangents\r\n        });\r\n    }\r\n\r\n    if (vertexFormat.bitangent) {\r\n        attributes.bitangent = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 3,\r\n            values: bitangents\r\n        });\r\n    }\r\n\r\n    if (vertexFormat.st) {\r\n        attributes.st = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 2,\r\n            values: textureCoordinates\r\n        });\r\n    }\r\n\r\n    // prepare the side walls, two triangles for each wall\r\n    //\r\n    //    A (i+1)  B (i+3) E\r\n    //    +--------+-------+\r\n    //    |      / |      /|    triangles:  A C B\r\n    //    |     /  |     / |                B C D\r\n    //    |    /   |    /  |\r\n    //    |   /    |   /   |\r\n    //    |  /     |  /    |\r\n    //    | /      | /     |\r\n    //    +--------+-------+\r\n    //    C (i)    D (i+2) F\r\n    //\r\n\r\n    var numVertices = size / 3;\r\n    size -= 6 * (numCorners + 1);\r\n    var indices = IndexDatatype.createTypedArray(numVertices, size);\r\n\r\n    var edgeIndex = 0;\r\n    for (i = 0; i < numVertices - 2; i += 2) {\r\n        var LL = i;\r\n        var LR = i + 2;\r\n        var pl = Cartesian3.fromArray(positions, LL * 3, scratchCartesian3Position1);\r\n        var pr = Cartesian3.fromArray(positions, LR * 3, scratchCartesian3Position2);\r\n        if (Cartesian3.equalsEpsilon(pl, pr, CesiumMath.EPSILON10)) {\r\n            continue;\r\n        }\r\n        var UL = i + 1;\r\n        var UR = i + 3;\r\n\r\n        indices[edgeIndex++] = UL;\r\n        indices[edgeIndex++] = LL;\r\n        indices[edgeIndex++] = UR;\r\n        indices[edgeIndex++] = UR;\r\n        indices[edgeIndex++] = LL;\r\n        indices[edgeIndex++] = LR;\r\n    }\r\n\r\n    return new Geometry({\r\n        attributes: attributes,\r\n        indices: indices,\r\n        primitiveType: PrimitiveType.TRIANGLES,\r\n        boundingSphere: new BoundingSphere.fromVertices(positions)\r\n    });\r\n};\r\nexport default WallGeometry;\r\n","import defined from '../Core/defined.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\nimport WallGeometry from '../Core/WallGeometry.js';\r\n\r\nfunction createWallGeometry(wallGeometry, offset) {\r\n    if (defined(offset)) {\r\n        wallGeometry = WallGeometry.unpack(wallGeometry, offset);\r\n    }\r\n    wallGeometry._ellipsoid = Ellipsoid.clone(wallGeometry._ellipsoid);\r\n    return WallGeometry.createGeometry(wallGeometry);\r\n}\r\nexport default createWallGeometry;\r\n"],"names":["Cartesian3","defaultValue","defined","DeveloperError","VertexFormat","CesiumMath","Ellipsoid","WallGeometryLibrary","GeometryAttributes","GeometryAttribute","ComponentDatatype","IndexDatatype","Geometry","PrimitiveType","BoundingSphere"],"mappings":"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"}