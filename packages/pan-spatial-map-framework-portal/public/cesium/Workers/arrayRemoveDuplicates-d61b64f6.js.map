{"version":3,"file":"arrayRemoveDuplicates-d61b64f6.js","sources":["../../../../Source/Core/arrayRemoveDuplicates.js"],"sourcesContent":["import Check from './Check.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport CesiumMath from './Math.js';\r\n\r\nvar removeDuplicatesEpsilon = CesiumMath.EPSILON10;\r\n\r\n/**\r\n * Removes adjacent duplicate values in an array of values.\r\n *\r\n * @param {Array.<*>} [values] The array of values.\r\n * @param {Function} equalsEpsilon Function to compare values with an epsilon. Boolean equalsEpsilon(left, right, epsilon).\r\n * @param {Boolean} [wrapAround=false] Compare the last value in the array against the first value. If they are equal, the last value is removed.\r\n * @param {Array.<Number>} [removedIndices=undefined] Store the indices that correspond to the duplicate items removed from the array, if there were any.\r\n * @returns {Array.<*>|undefined} A new array of values with no adjacent duplicate values or the input array if no duplicates were found.\r\n *\r\n * @example\r\n * // Returns [(1.0, 1.0, 1.0), (2.0, 2.0, 2.0), (3.0, 3.0, 3.0), (1.0, 1.0, 1.0)]\r\n * var values = [\r\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0),\r\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0),\r\n *     new Cesium.Cartesian3(2.0, 2.0, 2.0),\r\n *     new Cesium.Cartesian3(3.0, 3.0, 3.0),\r\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0)];\r\n * var nonDuplicatevalues = Cesium.PolylinePipeline.removeDuplicates(values, Cartesian3.equalsEpsilon);\r\n *\r\n * @example\r\n * // Returns [(1.0, 1.0, 1.0), (2.0, 2.0, 2.0), (3.0, 3.0, 3.0)]\r\n * var values = [\r\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0),\r\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0),\r\n *     new Cesium.Cartesian3(2.0, 2.0, 2.0),\r\n *     new Cesium.Cartesian3(3.0, 3.0, 3.0),\r\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0)];\r\n * var nonDuplicatevalues = Cesium.PolylinePipeline.removeDuplicates(values, Cartesian3.equalsEpsilon, true);\r\n *\r\n * @example\r\n * // Returns [(1.0, 1.0, 1.0), (2.0, 2.0, 2.0), (3.0, 3.0, 3.0)]\r\n * // removedIndices will be equal to [1, 3, 5]\r\n * var values = [\r\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0),\r\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0),\r\n *     new Cesium.Cartesian3(2.0, 2.0, 2.0),\r\n *     new Cesium.Cartesian3(2.0, 2.0, 2.0),\r\n *     new Cesium.Cartesian3(3.0, 3.0, 3.0),\r\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0)];\r\n * var nonDuplicatevalues = Cesium.PolylinePipeline.removeDuplicates(values, Cartesian3.equalsEpsilon, true);\r\n * @private\r\n */\r\nfunction arrayRemoveDuplicates(values, equalsEpsilon, wrapAround, removedIndices) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined('equalsEpsilon', equalsEpsilon);\r\n    //>>includeEnd('debug');\r\n\r\n    if (!defined(values)) {\r\n        return undefined;\r\n    }\r\n\r\n    wrapAround = defaultValue(wrapAround, false);\r\n    var storeRemovedIndices = defined(removedIndices);\r\n\r\n    var length = values.length;\r\n    if (length < 2) {\r\n        return values;\r\n    }\r\n\r\n    var i;\r\n    var v0 = values[0];\r\n    var v1;\r\n\r\n    // We only want to create a new array if there are duplicates in the array.\r\n    // As such, cleanedValues is undefined until it encounters the first duplicate, if it exists.\r\n    var cleanedValues;\r\n    var lastCleanIndex = 0;\r\n\r\n    // removedIndexLCI keeps track of where lastCleanIndex would be if it were sorted into the removedIndices array.\r\n    // In case of arrays such as [A, B, C, ..., A, A, A], removedIndices will not be sorted properly without this.\r\n    var removedIndexLCI = -1;\r\n\r\n    for (i = 1; i < length; ++i) {\r\n        v1 = values[i];\r\n        if (equalsEpsilon(v0, v1, removeDuplicatesEpsilon)) {\r\n            if (!defined(cleanedValues)) {\r\n                cleanedValues = values.slice(0, i);\r\n                lastCleanIndex = i - 1;\r\n                removedIndexLCI = 0;\r\n            }\r\n            if (storeRemovedIndices) {\r\n                removedIndices.push(i);\r\n            }\r\n        } else {\r\n            if (defined(cleanedValues)) {\r\n                cleanedValues.push(v1);\r\n                lastCleanIndex = i;\r\n                if (storeRemovedIndices) {\r\n                    removedIndexLCI = removedIndices.length;\r\n                }\r\n            }\r\n            v0 = v1;\r\n        }\r\n    }\r\n\r\n    if (wrapAround && equalsEpsilon(values[0], values[length - 1], removeDuplicatesEpsilon)) {\r\n        if (storeRemovedIndices) {\r\n            if (defined(cleanedValues)) {\r\n                removedIndices.splice(removedIndexLCI, 0, lastCleanIndex);\r\n            } else {\r\n                removedIndices.push(length - 1);\r\n            }\r\n        }\r\n\r\n        if (defined(cleanedValues)) {\r\n            cleanedValues.length -= 1;\r\n        } else {\r\n            cleanedValues = values.slice(0, -1);\r\n        }\r\n    }\r\n\r\n    return defined(cleanedValues) ? cleanedValues : values;\r\n}\r\n\r\nexport default arrayRemoveDuplicates;\r\n"],"names":["CesiumMath","Check","defined","defaultValue"],"mappings":"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"}