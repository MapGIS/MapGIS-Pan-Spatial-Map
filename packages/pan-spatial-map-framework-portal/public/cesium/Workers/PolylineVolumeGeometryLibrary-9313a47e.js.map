{"version":3,"file":"PolylineVolumeGeometryLibrary-9313a47e.js","sources":["../../../../Source/Core/CornerType.js","../../../../Source/Core/oneTimeWarning.js","../../../../Source/Core/PolylineVolumeGeometryLibrary.js"],"sourcesContent":["/**\r\n * Style options for corners.\r\n *\r\n * @demo The {@link https://sandcastle.cesium.com/index.html?src=Corridor.html&label=Geometries|Corridor Demo}\r\n * demonstrates the three corner types, as used by {@link CorridorGraphics}.\r\n *\r\n * @enum {Number}\r\n */\r\nvar CornerType = {\r\n    /**\r\n     * <img src=\"Images/CornerTypeRounded.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\r\n     *\r\n     * Corner has a smooth edge.\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    ROUNDED: 0,\r\n\r\n    /**\r\n     * <img src=\"Images/CornerTypeMitered.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\r\n     *\r\n     * Corner point is the intersection of adjacent edges.\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    MITERED: 1,\r\n\r\n    /**\r\n     * <img src=\"Images/CornerTypeBeveled.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\r\n     *\r\n     * Corner is clipped.\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    BEVELED: 2\r\n};\r\nexport default Object.freeze(CornerType);\r\n","import defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\n\r\nvar warnings = {};\r\n\r\n/**\r\n * Logs a one time message to the console.  Use this function instead of\r\n * <code>console.log</code> directly since this does not log duplicate messages\r\n * unless it is called from multiple workers.\r\n *\r\n * @function oneTimeWarning\r\n *\r\n * @param {String} identifier The unique identifier for this warning.\r\n * @param {String} [message=identifier] The message to log to the console.\r\n *\r\n * @example\r\n * for(var i=0;i<foo.length;++i) {\r\n *    if (!defined(foo[i].bar)) {\r\n *       // Something that can be recovered from but may happen a lot\r\n *       oneTimeWarning('foo.bar undefined', 'foo.bar is undefined. Setting to 0.');\r\n *       foo[i].bar = 0;\r\n *       // ...\r\n *    }\r\n * }\r\n *\r\n * @private\r\n */\r\nfunction oneTimeWarning(identifier, message) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(identifier)) {\r\n        throw new DeveloperError('identifier is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    if (!defined(warnings[identifier])) {\r\n        warnings[identifier] = true;\r\n        console.warn(defaultValue(message, identifier));\r\n    }\r\n}\r\n\r\noneTimeWarning.geometryOutlines =\r\n    'Entity geometry outlines are unsupported on terrain. Outlines will be disabled. To enable outlines, disable geometry terrain clamping by explicitly setting height to 0.';\r\n\r\noneTimeWarning.geometryZIndex = 'Entity geometry with zIndex are unsupported when height or extrudedHeight are defined.  zIndex will be ignored';\r\n\r\noneTimeWarning.geometryHeightReference = 'Entity corridor, ellipse, polygon or rectangle with heightReference must also have a defined height.  heightReference will be ignored';\r\noneTimeWarning.geometryExtrudedHeightReference =\r\n    'Entity corridor, ellipse, polygon or rectangle with extrudedHeightReference must also have a defined extrudedHeight.  extrudedHeightReference will be ignored';\r\nexport default oneTimeWarning;\r\n","import Cartesian2 from './Cartesian2.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Cartesian4 from './Cartesian4.js';\r\nimport Cartographic from './Cartographic.js';\r\nimport CornerType from './CornerType.js';\r\nimport EllipsoidTangentPlane from './EllipsoidTangentPlane.js';\r\nimport CesiumMath from './Math.js';\r\nimport Matrix3 from './Matrix3.js';\r\nimport Matrix4 from './Matrix4.js';\r\nimport PolylinePipeline from './PolylinePipeline.js';\r\nimport Quaternion from './Quaternion.js';\r\nimport Transforms from './Transforms.js';\r\nimport oneTimeWarning from '../Core/oneTimeWarning.js';\r\n\r\nvar scratch2Array = [new Cartesian3(), new Cartesian3()];\r\nvar scratchCartesian1 = new Cartesian3();\r\nvar scratchCartesian2 = new Cartesian3();\r\nvar scratchCartesian3 = new Cartesian3();\r\nvar scratchCartesian4 = new Cartesian3();\r\nvar scratchCartesian5 = new Cartesian3();\r\nvar scratchCartesian6 = new Cartesian3();\r\nvar scratchCartesian7 = new Cartesian3();\r\nvar scratchCartesian8 = new Cartesian3();\r\nvar scratchCartesian9 = new Cartesian3();\r\n\r\nvar scratch1 = new Cartesian3();\r\nvar scratch2 = new Cartesian3();\r\n\r\n/**\r\n * @private\r\n */\r\nvar PolylineVolumeGeometryLibrary = {};\r\n\r\nvar cartographic = new Cartographic();\r\nfunction scaleToSurface(positions, ellipsoid) {\r\n    var heights = new Array(positions.length);\r\n    for (var i = 0; i < positions.length; i++) {\r\n        var pos = positions[i];\r\n        cartographic = ellipsoid.cartesianToCartographic(pos, cartographic);\r\n        heights[i] = cartographic.height;\r\n        positions[i] = ellipsoid.scaleToGeodeticSurface(pos, pos);\r\n    }\r\n    return heights;\r\n}\r\n\r\nfunction subdivideHeights(points, h0, h1, granularity) {\r\n    var p0 = points[0];\r\n    var p1 = points[1];\r\n    var angleBetween = Cartesian3.angleBetween(p0, p1);\r\n    var numPoints = Math.ceil(angleBetween / granularity);\r\n    var heights = new Array(numPoints);\r\n    var i;\r\n    if (h0 === h1) {\r\n        for (i = 0; i < numPoints; i++) {\r\n            heights[i] = h0;\r\n        }\r\n        heights.push(h1);\r\n        return heights;\r\n    }\r\n\r\n    var dHeight = h1 - h0;\r\n    var heightPerVertex = dHeight / numPoints;\r\n\r\n    for (i = 1; i < numPoints; i++) {\r\n        var h = h0 + i * heightPerVertex;\r\n        heights[i] = h;\r\n    }\r\n\r\n    heights[0] = h0;\r\n    heights.push(h1);\r\n    return heights;\r\n}\r\n\r\nvar nextScratch = new Cartesian3();\r\nvar prevScratch = new Cartesian3();\r\n\r\nfunction computeRotationAngle(start, end, position, ellipsoid) {\r\n    var tangentPlane = new EllipsoidTangentPlane(position, ellipsoid);\r\n    var next = tangentPlane.projectPointOntoPlane(Cartesian3.add(position, start, nextScratch), nextScratch);\r\n    var prev = tangentPlane.projectPointOntoPlane(Cartesian3.add(position, end, prevScratch), prevScratch);\r\n    var angle = Cartesian2.angleBetween(next, prev);\r\n\r\n    return prev.x * next.y - prev.y * next.x >= 0.0 ? -angle : angle;\r\n}\r\n\r\nvar negativeX = new Cartesian3(-1, 0, 0);\r\nvar transform = new Matrix4();\r\nvar translation = new Matrix4();\r\nvar rotationZ = new Matrix3();\r\nvar scaleMatrix = Matrix3.IDENTITY.clone();\r\nvar westScratch = new Cartesian3();\r\nvar finalPosScratch = new Cartesian4();\r\nvar heightCartesian = new Cartesian3();\r\nfunction addPosition(center, left, shape, finalPositions, ellipsoid, height, xScalar, repeat) {\r\n    var west = westScratch;\r\n    var finalPosition = finalPosScratch;\r\n    transform = Transforms.eastNorthUpToFixedFrame(center, ellipsoid, transform);\r\n\r\n    west = Matrix4.multiplyByPointAsVector(transform, negativeX, west);\r\n    west = Cartesian3.normalize(west, west);\r\n    var angle = computeRotationAngle(west, left, center, ellipsoid);\r\n    rotationZ = Matrix3.fromRotationZ(angle, rotationZ);\r\n\r\n    heightCartesian.z = height;\r\n    transform = Matrix4.multiplyTransformation(transform, Matrix4.fromRotationTranslation(rotationZ, heightCartesian, translation), transform);\r\n    var scale = scaleMatrix;\r\n    scale[0] = xScalar;\r\n\r\n    for (var j = 0; j < repeat; j++) {\r\n        for (var i = 0; i < shape.length; i += 3) {\r\n            finalPosition = Cartesian3.fromArray(shape, i, finalPosition);\r\n            finalPosition = Matrix3.multiplyByVector(scale, finalPosition, finalPosition);\r\n            finalPosition = Matrix4.multiplyByPoint(transform, finalPosition, finalPosition);\r\n            finalPositions.push(finalPosition.x, finalPosition.y, finalPosition.z);\r\n        }\r\n    }\r\n\r\n    return finalPositions;\r\n}\r\n\r\nvar centerScratch = new Cartesian3();\r\nfunction addPositions(centers, left, shape, finalPositions, ellipsoid, heights, xScalar) {\r\n    for (var i = 0; i < centers.length; i += 3) {\r\n        var center = Cartesian3.fromArray(centers, i, centerScratch);\r\n        finalPositions = addPosition(center, left, shape, finalPositions, ellipsoid, heights[i / 3], xScalar, 1);\r\n    }\r\n    return finalPositions;\r\n}\r\n\r\nfunction convertShapeTo3DDuplicate(shape2D, boundingRectangle) {\r\n    //orientate 2D shape to XZ plane center at (0, 0, 0), duplicate points\r\n    var length = shape2D.length;\r\n    var shape = new Array(length * 6);\r\n    var index = 0;\r\n    var xOffset = boundingRectangle.x + boundingRectangle.width / 2;\r\n    var yOffset = boundingRectangle.y + boundingRectangle.height / 2;\r\n\r\n    var point = shape2D[0];\r\n    shape[index++] = point.x - xOffset;\r\n    shape[index++] = 0.0;\r\n    shape[index++] = point.y - yOffset;\r\n    for (var i = 1; i < length; i++) {\r\n        point = shape2D[i];\r\n        var x = point.x - xOffset;\r\n        var z = point.y - yOffset;\r\n        shape[index++] = x;\r\n        shape[index++] = 0.0;\r\n        shape[index++] = z;\r\n\r\n        shape[index++] = x;\r\n        shape[index++] = 0.0;\r\n        shape[index++] = z;\r\n    }\r\n    point = shape2D[0];\r\n    shape[index++] = point.x - xOffset;\r\n    shape[index++] = 0.0;\r\n    shape[index++] = point.y - yOffset;\r\n\r\n    return shape;\r\n}\r\n\r\nfunction convertShapeTo3D(shape2D, boundingRectangle) {\r\n    //orientate 2D shape to XZ plane center at (0, 0, 0)\r\n    var length = shape2D.length;\r\n    var shape = new Array(length * 3);\r\n    var index = 0;\r\n    var xOffset = boundingRectangle.x + boundingRectangle.width / 2;\r\n    var yOffset = boundingRectangle.y + boundingRectangle.height / 2;\r\n\r\n    for (var i = 0; i < length; i++) {\r\n        shape[index++] = shape2D[i].x - xOffset;\r\n        shape[index++] = 0;\r\n        shape[index++] = shape2D[i].y - yOffset;\r\n    }\r\n\r\n    return shape;\r\n}\r\n\r\nvar quaterion = new Quaternion();\r\nvar startPointScratch = new Cartesian3();\r\nvar rotMatrix = new Matrix3();\r\nfunction computeRoundCorner(pivot, startPoint, endPoint, cornerType, leftIsOutside, ellipsoid, finalPositions, shape, height, duplicatePoints) {\r\n    var angle = Cartesian3.angleBetween(Cartesian3.subtract(startPoint, pivot, scratch1), Cartesian3.subtract(endPoint, pivot, scratch2));\r\n    var granularity = cornerType === CornerType.BEVELED ? 0 : Math.ceil(angle / CesiumMath.toRadians(5));\r\n\r\n    var m;\r\n    if (leftIsOutside) {\r\n        m = Matrix3.fromQuaternion(Quaternion.fromAxisAngle(Cartesian3.negate(pivot, scratch1), angle / (granularity + 1), quaterion), rotMatrix);\r\n    } else {\r\n        m = Matrix3.fromQuaternion(Quaternion.fromAxisAngle(pivot, angle / (granularity + 1), quaterion), rotMatrix);\r\n    }\r\n\r\n    var left;\r\n    var surfacePoint;\r\n    startPoint = Cartesian3.clone(startPoint, startPointScratch);\r\n    if (granularity > 0) {\r\n        var repeat = duplicatePoints ? 2 : 1;\r\n        for (var i = 0; i < granularity; i++) {\r\n            startPoint = Matrix3.multiplyByVector(m, startPoint, startPoint);\r\n            left = Cartesian3.subtract(startPoint, pivot, scratch1);\r\n            left = Cartesian3.normalize(left, left);\r\n            if (!leftIsOutside) {\r\n                left = Cartesian3.negate(left, left);\r\n            }\r\n            surfacePoint = ellipsoid.scaleToGeodeticSurface(startPoint, scratch2);\r\n            finalPositions = addPosition(surfacePoint, left, shape, finalPositions, ellipsoid, height, 1, repeat);\r\n        }\r\n    } else {\r\n        left = Cartesian3.subtract(startPoint, pivot, scratch1);\r\n        left = Cartesian3.normalize(left, left);\r\n        if (!leftIsOutside) {\r\n            left = Cartesian3.negate(left, left);\r\n        }\r\n        surfacePoint = ellipsoid.scaleToGeodeticSurface(startPoint, scratch2);\r\n        finalPositions = addPosition(surfacePoint, left, shape, finalPositions, ellipsoid, height, 1, 1);\r\n\r\n        endPoint = Cartesian3.clone(endPoint, startPointScratch);\r\n        left = Cartesian3.subtract(endPoint, pivot, scratch1);\r\n        left = Cartesian3.normalize(left, left);\r\n        if (!leftIsOutside) {\r\n            left = Cartesian3.negate(left, left);\r\n        }\r\n        surfacePoint = ellipsoid.scaleToGeodeticSurface(endPoint, scratch2);\r\n        finalPositions = addPosition(surfacePoint, left, shape, finalPositions, ellipsoid, height, 1, 1);\r\n    }\r\n\r\n    return finalPositions;\r\n}\r\n\r\nPolylineVolumeGeometryLibrary.removeDuplicatesFromShape = function (shapePositions) {\r\n    var length = shapePositions.length;\r\n    var cleanedPositions = [];\r\n    for (var i0 = length - 1, i1 = 0; i1 < length; i0 = i1++) {\r\n        var v0 = shapePositions[i0];\r\n        var v1 = shapePositions[i1];\r\n\r\n        if (!Cartesian2.equals(v0, v1)) {\r\n            cleanedPositions.push(v1); // Shallow copy!\r\n        }\r\n    }\r\n\r\n    return cleanedPositions;\r\n};\r\n\r\nPolylineVolumeGeometryLibrary.angleIsGreaterThanPi = function (forward, backward, position, ellipsoid) {\r\n    var tangentPlane = new EllipsoidTangentPlane(position, ellipsoid);\r\n    var next = tangentPlane.projectPointOntoPlane(Cartesian3.add(position, forward, nextScratch), nextScratch);\r\n    var prev = tangentPlane.projectPointOntoPlane(Cartesian3.add(position, backward, prevScratch), prevScratch);\r\n\r\n    return prev.x * next.y - prev.y * next.x >= 0.0;\r\n};\r\n\r\nvar scratchForwardProjection = new Cartesian3();\r\nvar scratchBackwardProjection = new Cartesian3();\r\n\r\nPolylineVolumeGeometryLibrary.computePositions = function (positions, shape2D, boundingRectangle, geometry, duplicatePoints) {\r\n    var ellipsoid = geometry._ellipsoid;\r\n    var heights = scaleToSurface(positions, ellipsoid);\r\n    var granularity = geometry._granularity;\r\n    var cornerType = geometry._cornerType;\r\n    var shapeForSides = duplicatePoints ? convertShapeTo3DDuplicate(shape2D, boundingRectangle) : convertShapeTo3D(shape2D, boundingRectangle);\r\n    var shapeForEnds = duplicatePoints ? convertShapeTo3D(shape2D, boundingRectangle) : undefined;\r\n    var heightOffset = boundingRectangle.height / 2;\r\n    var width = boundingRectangle.width / 2;\r\n    var length = positions.length;\r\n    var finalPositions = [];\r\n    var ends = duplicatePoints ? [] : undefined;\r\n\r\n    var forward = scratchCartesian1;\r\n    var backward = scratchCartesian2;\r\n    var cornerDirection = scratchCartesian3;\r\n    var surfaceNormal = scratchCartesian4;\r\n    var pivot = scratchCartesian5;\r\n    var start = scratchCartesian6;\r\n    var end = scratchCartesian7;\r\n    var left = scratchCartesian8;\r\n    var previousPosition = scratchCartesian9;\r\n\r\n    var position = positions[0];\r\n    var nextPosition = positions[1];\r\n    surfaceNormal = ellipsoid.geodeticSurfaceNormal(position, surfaceNormal);\r\n    forward = Cartesian3.subtract(nextPosition, position, forward);\r\n    forward = Cartesian3.normalize(forward, forward);\r\n    left = Cartesian3.cross(surfaceNormal, forward, left);\r\n    left = Cartesian3.normalize(left, left);\r\n    var h0 = heights[0];\r\n    var h1 = heights[1];\r\n    if (duplicatePoints) {\r\n        ends = addPosition(position, left, shapeForEnds, ends, ellipsoid, h0 + heightOffset, 1, 1);\r\n    }\r\n    previousPosition = Cartesian3.clone(position, previousPosition);\r\n    position = nextPosition;\r\n    backward = Cartesian3.negate(forward, backward);\r\n    var subdividedHeights;\r\n    var subdividedPositions;\r\n    for (var i = 1; i < length - 1; i++) {\r\n        var repeat = duplicatePoints ? 2 : 1;\r\n        nextPosition = positions[i + 1];\r\n        if (position.equals(nextPosition)) {\r\n            oneTimeWarning('Positions are too close and are considered equivalent with rounding error.');\r\n            continue;\r\n        }\r\n        forward = Cartesian3.subtract(nextPosition, position, forward);\r\n        forward = Cartesian3.normalize(forward, forward);\r\n        cornerDirection = Cartesian3.add(forward, backward, cornerDirection);\r\n        cornerDirection = Cartesian3.normalize(cornerDirection, cornerDirection);\r\n        surfaceNormal = ellipsoid.geodeticSurfaceNormal(position, surfaceNormal);\r\n\r\n        var forwardProjection = Cartesian3.multiplyByScalar(surfaceNormal, Cartesian3.dot(forward, surfaceNormal), scratchForwardProjection);\r\n        Cartesian3.subtract(forward, forwardProjection, forwardProjection);\r\n        Cartesian3.normalize(forwardProjection, forwardProjection);\r\n\r\n        var backwardProjection = Cartesian3.multiplyByScalar(surfaceNormal, Cartesian3.dot(backward, surfaceNormal), scratchBackwardProjection);\r\n        Cartesian3.subtract(backward, backwardProjection, backwardProjection);\r\n        Cartesian3.normalize(backwardProjection, backwardProjection);\r\n\r\n        var doCorner = !CesiumMath.equalsEpsilon(Math.abs(Cartesian3.dot(forwardProjection, backwardProjection)), 1.0, CesiumMath.EPSILON7);\r\n\r\n        if (doCorner) {\r\n            cornerDirection = Cartesian3.cross(cornerDirection, surfaceNormal, cornerDirection);\r\n            cornerDirection = Cartesian3.cross(surfaceNormal, cornerDirection, cornerDirection);\r\n            cornerDirection = Cartesian3.normalize(cornerDirection, cornerDirection);\r\n            var scalar = 1 / Math.max(0.25, Cartesian3.magnitude(Cartesian3.cross(cornerDirection, backward, scratch1)));\r\n            var leftIsOutside = PolylineVolumeGeometryLibrary.angleIsGreaterThanPi(forward, backward, position, ellipsoid);\r\n            if (leftIsOutside) {\r\n                pivot = Cartesian3.add(position, Cartesian3.multiplyByScalar(cornerDirection, scalar * width, cornerDirection), pivot);\r\n                start = Cartesian3.add(pivot, Cartesian3.multiplyByScalar(left, width, start), start);\r\n                scratch2Array[0] = Cartesian3.clone(previousPosition, scratch2Array[0]);\r\n                scratch2Array[1] = Cartesian3.clone(start, scratch2Array[1]);\r\n                subdividedHeights = subdivideHeights(scratch2Array, h0 + heightOffset, h1 + heightOffset, granularity);\r\n                subdividedPositions = PolylinePipeline.generateArc({\r\n                    positions: scratch2Array,\r\n                    granularity: granularity,\r\n                    ellipsoid: ellipsoid\r\n                });\r\n                finalPositions = addPositions(subdividedPositions, left, shapeForSides, finalPositions, ellipsoid, subdividedHeights, 1);\r\n                left = Cartesian3.cross(surfaceNormal, forward, left);\r\n                left = Cartesian3.normalize(left, left);\r\n                end = Cartesian3.add(pivot, Cartesian3.multiplyByScalar(left, width, end), end);\r\n                if (cornerType === CornerType.ROUNDED || cornerType === CornerType.BEVELED) {\r\n                    computeRoundCorner(pivot, start, end, cornerType, leftIsOutside, ellipsoid, finalPositions, shapeForSides, h1 + heightOffset, duplicatePoints);\r\n                } else {\r\n                    cornerDirection = Cartesian3.negate(cornerDirection, cornerDirection);\r\n                    finalPositions = addPosition(position, cornerDirection, shapeForSides, finalPositions, ellipsoid, h1 + heightOffset, scalar, repeat);\r\n                }\r\n                previousPosition = Cartesian3.clone(end, previousPosition);\r\n            } else {\r\n                pivot = Cartesian3.add(position, Cartesian3.multiplyByScalar(cornerDirection, scalar * width, cornerDirection), pivot);\r\n                start = Cartesian3.add(pivot, Cartesian3.multiplyByScalar(left, -width, start), start);\r\n                scratch2Array[0] = Cartesian3.clone(previousPosition, scratch2Array[0]);\r\n                scratch2Array[1] = Cartesian3.clone(start, scratch2Array[1]);\r\n                subdividedHeights = subdivideHeights(scratch2Array, h0 + heightOffset, h1 + heightOffset, granularity);\r\n                subdividedPositions = PolylinePipeline.generateArc({\r\n                    positions: scratch2Array,\r\n                    granularity: granularity,\r\n                    ellipsoid: ellipsoid\r\n                });\r\n                finalPositions = addPositions(subdividedPositions, left, shapeForSides, finalPositions, ellipsoid, subdividedHeights, 1);\r\n                left = Cartesian3.cross(surfaceNormal, forward, left);\r\n                left = Cartesian3.normalize(left, left);\r\n                end = Cartesian3.add(pivot, Cartesian3.multiplyByScalar(left, -width, end), end);\r\n                if (cornerType === CornerType.ROUNDED || cornerType === CornerType.BEVELED) {\r\n                    computeRoundCorner(pivot, start, end, cornerType, leftIsOutside, ellipsoid, finalPositions, shapeForSides, h1 + heightOffset, duplicatePoints);\r\n                } else {\r\n                    finalPositions = addPosition(position, cornerDirection, shapeForSides, finalPositions, ellipsoid, h1 + heightOffset, scalar, repeat);\r\n                }\r\n                previousPosition = Cartesian3.clone(end, previousPosition);\r\n            }\r\n            backward = Cartesian3.negate(forward, backward);\r\n        } else {\r\n            finalPositions = addPosition(previousPosition, left, shapeForSides, finalPositions, ellipsoid, h0 + heightOffset, 1, 1);\r\n            previousPosition = position;\r\n        }\r\n        h0 = h1;\r\n        h1 = heights[i + 1];\r\n        position = nextPosition;\r\n    }\r\n\r\n    scratch2Array[0] = Cartesian3.clone(previousPosition, scratch2Array[0]);\r\n    scratch2Array[1] = Cartesian3.clone(position, scratch2Array[1]);\r\n    subdividedHeights = subdivideHeights(scratch2Array, h0 + heightOffset, h1 + heightOffset, granularity);\r\n    subdividedPositions = PolylinePipeline.generateArc({\r\n        positions: scratch2Array,\r\n        granularity: granularity,\r\n        ellipsoid: ellipsoid\r\n    });\r\n    finalPositions = addPositions(subdividedPositions, left, shapeForSides, finalPositions, ellipsoid, subdividedHeights, 1);\r\n    if (duplicatePoints) {\r\n        ends = addPosition(position, left, shapeForEnds, ends, ellipsoid, h1 + heightOffset, 1, 1);\r\n    }\r\n\r\n    length = finalPositions.length;\r\n    var posLength = duplicatePoints ? length + ends.length : length;\r\n    var combinedPositions = new Float64Array(posLength);\r\n    combinedPositions.set(finalPositions);\r\n    if (duplicatePoints) {\r\n        combinedPositions.set(ends, length);\r\n    }\r\n\r\n    return combinedPositions;\r\n};\r\nexport default PolylineVolumeGeometryLibrary;\r\n"],"names":["defined","DeveloperError","defaultValue","Cartesian3","Cartographic","EllipsoidTangentPlane","Cartesian2","Matrix4","Matrix3","Cartesian4","Transforms","Quaternion","CornerType","CesiumMath","PolylinePipeline"],"mappings":"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"}