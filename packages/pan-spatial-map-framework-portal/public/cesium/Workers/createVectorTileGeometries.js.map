{"version":3,"file":"createVectorTileGeometries.js","sources":["../../../../Source/Scene/Vector3DTileBatch.js","../../../../Source/WorkersES6/createVectorTileGeometries.js"],"sourcesContent":["/**\r\n * Describes a renderable batch of geometry.\r\n *\r\n * @alias Vector3DTileBatch\r\n * @constructor\r\n *\r\n * @param {Object} options An object with the following properties:\r\n * @param {Number} options.offset The offset of the batch into the indices buffer.\r\n * @param {Number} options.count The number of indices in the batch.\r\n * @param {Color} options.color The color of the geometry in the batch.\r\n * @param {Number[]} options.batchIds An array where each element is the batch id of the geometry in the batch.\r\n *\r\n * @private\r\n */\r\nfunction Vector3DTileBatch(options) {\r\n    /**\r\n     * The offset of the batch into the indices buffer.\r\n     * @type {Number}\r\n     */\r\n    this.offset = options.offset;\r\n    /**\r\n     * The number of indices in the batch.\r\n     * @type {Number}\r\n     */\r\n    this.count = options.count;\r\n    /**\r\n     * The color of the geometry in the batch.\r\n     * @type {Color}\r\n     */\r\n    this.color = options.color;\r\n    /**\r\n     * An array where each element is the batch id of the geometry in the batch.\r\n     * @type {Number[]}\r\n     */\r\n    this.batchIds = options.batchIds;\r\n}\r\nexport default Vector3DTileBatch;\r\n","import BoundingSphere from '../Core/BoundingSphere.js';\r\nimport BoxGeometry from '../Core/BoxGeometry.js';\r\nimport Cartesian3 from '../Core/Cartesian3.js';\r\nimport Color from '../Core/Color.js';\r\nimport CylinderGeometry from '../Core/CylinderGeometry.js';\r\nimport defined from '../Core/defined.js';\r\nimport EllipsoidGeometry from '../Core/EllipsoidGeometry.js';\r\nimport IndexDatatype from '../Core/IndexDatatype.js';\r\nimport Matrix4 from '../Core/Matrix4.js';\r\nimport Vector3DTileBatch from '../Scene/Vector3DTileBatch.js';\r\nimport createTaskProcessorWorker from './createTaskProcessorWorker.js';\r\n\r\nvar scratchCartesian = new Cartesian3();\r\n\r\nvar packedBoxLength = Matrix4.packedLength + Cartesian3.packedLength;\r\nvar packedCylinderLength = Matrix4.packedLength + 2;\r\nvar packedEllipsoidLength = Matrix4.packedLength + Cartesian3.packedLength;\r\nvar packedSphereLength = Cartesian3.packedLength + 1;\r\n\r\nvar scratchModelMatrixAndBV = {\r\n    modelMatrix: new Matrix4(),\r\n    boundingVolume: new BoundingSphere()\r\n};\r\n\r\nfunction boxModelMatrixAndBoundingVolume(boxes, index) {\r\n    var boxIndex = index * packedBoxLength;\r\n\r\n    var dimensions = Cartesian3.unpack(boxes, boxIndex, scratchCartesian);\r\n    boxIndex += Cartesian3.packedLength;\r\n\r\n    var boxModelMatrix = Matrix4.unpack(boxes, boxIndex, scratchModelMatrixAndBV.modelMatrix);\r\n    Matrix4.multiplyByScale(boxModelMatrix, dimensions, boxModelMatrix);\r\n\r\n    var boundingVolume = scratchModelMatrixAndBV.boundingVolume;\r\n    Cartesian3.clone(Cartesian3.ZERO, boundingVolume.center);\r\n    boundingVolume.radius = Math.sqrt(3.0);\r\n\r\n    return scratchModelMatrixAndBV;\r\n}\r\n\r\nfunction cylinderModelMatrixAndBoundingVolume(cylinders, index) {\r\n    var cylinderIndex = index * packedCylinderLength;\r\n\r\n    var cylinderRadius = cylinders[cylinderIndex++];\r\n    var length = cylinders[cylinderIndex++];\r\n    var scale = Cartesian3.fromElements(cylinderRadius, cylinderRadius, length, scratchCartesian);\r\n\r\n    var cylinderModelMatrix = Matrix4.unpack(cylinders, cylinderIndex, scratchModelMatrixAndBV.modelMatrix);\r\n    Matrix4.multiplyByScale(cylinderModelMatrix, scale, cylinderModelMatrix);\r\n\r\n    var boundingVolume = scratchModelMatrixAndBV.boundingVolume;\r\n    Cartesian3.clone(Cartesian3.ZERO, boundingVolume.center);\r\n    boundingVolume.radius = Math.sqrt(2.0);\r\n\r\n    return scratchModelMatrixAndBV;\r\n}\r\n\r\nfunction ellipsoidModelMatrixAndBoundingVolume(ellipsoids, index) {\r\n    var ellipsoidIndex = index * packedEllipsoidLength;\r\n\r\n    var radii = Cartesian3.unpack(ellipsoids, ellipsoidIndex, scratchCartesian);\r\n    ellipsoidIndex += Cartesian3.packedLength;\r\n\r\n    var ellipsoidModelMatrix = Matrix4.unpack(ellipsoids, ellipsoidIndex, scratchModelMatrixAndBV.modelMatrix);\r\n    Matrix4.multiplyByScale(ellipsoidModelMatrix, radii, ellipsoidModelMatrix);\r\n\r\n    var boundingVolume = scratchModelMatrixAndBV.boundingVolume;\r\n    Cartesian3.clone(Cartesian3.ZERO, boundingVolume.center);\r\n    boundingVolume.radius = 1.0;\r\n\r\n    return scratchModelMatrixAndBV;\r\n}\r\n\r\nfunction sphereModelMatrixAndBoundingVolume(spheres, index) {\r\n    var sphereIndex = index * packedSphereLength;\r\n\r\n    var sphereRadius = spheres[sphereIndex++];\r\n\r\n    var sphereTranslation = Cartesian3.unpack(spheres, sphereIndex, scratchCartesian);\r\n    var sphereModelMatrix = Matrix4.fromTranslation(sphereTranslation, scratchModelMatrixAndBV.modelMatrix);\r\n    Matrix4.multiplyByUniformScale(sphereModelMatrix, sphereRadius, sphereModelMatrix);\r\n\r\n    var boundingVolume = scratchModelMatrixAndBV.boundingVolume;\r\n    Cartesian3.clone(Cartesian3.ZERO, boundingVolume.center);\r\n    boundingVolume.radius = 1.0;\r\n\r\n    return scratchModelMatrixAndBV;\r\n}\r\n\r\nvar scratchPosition = new Cartesian3();\r\n\r\nfunction createPrimitive(options, primitive, primitiveBatchIds, geometry, getModelMatrixAndBoundingVolume) {\r\n    if (!defined(primitive)) {\r\n        return;\r\n    }\r\n\r\n    var numberOfPrimitives = primitiveBatchIds.length;\r\n    var geometryPositions = geometry.attributes.position.values;\r\n    var geometryIndices = geometry.indices;\r\n\r\n    var positions = options.positions;\r\n    var vertexBatchIds = options.vertexBatchIds;\r\n    var indices = options.indices;\r\n\r\n    var batchIds = options.batchIds;\r\n    var batchTableColors = options.batchTableColors;\r\n    var batchedIndices = options.batchedIndices;\r\n    var indexOffsets = options.indexOffsets;\r\n    var indexCounts = options.indexCounts;\r\n    var boundingVolumes = options.boundingVolumes;\r\n\r\n    var modelMatrix = options.modelMatrix;\r\n    var center = options.center;\r\n\r\n    var positionOffset = options.positionOffset;\r\n    var batchIdIndex = options.batchIdIndex;\r\n    var indexOffset = options.indexOffset;\r\n    var batchedIndicesOffset = options.batchedIndicesOffset;\r\n\r\n    for (var i = 0; i < numberOfPrimitives; ++i) {\r\n        var primitiveModelMatrixAndBV = getModelMatrixAndBoundingVolume(primitive, i);\r\n        var primitiveModelMatrix = primitiveModelMatrixAndBV.modelMatrix;\r\n        Matrix4.multiply(modelMatrix, primitiveModelMatrix, primitiveModelMatrix);\r\n\r\n        var batchId = primitiveBatchIds[i];\r\n\r\n        var positionsLength = geometryPositions.length;\r\n        for (var j = 0; j < positionsLength; j += 3) {\r\n            var position = Cartesian3.unpack(geometryPositions, j, scratchPosition);\r\n            Matrix4.multiplyByPoint(primitiveModelMatrix, position, position);\r\n            Cartesian3.subtract(position, center, position);\r\n\r\n            Cartesian3.pack(position, positions, positionOffset * 3 + j);\r\n            vertexBatchIds[batchIdIndex++] = batchId;\r\n        }\r\n\r\n        var indicesLength = geometryIndices.length;\r\n        for (var k = 0; k < indicesLength; ++k) {\r\n            indices[indexOffset + k] = geometryIndices[k] + positionOffset;\r\n        }\r\n\r\n        var offset = i + batchedIndicesOffset;\r\n        batchedIndices[offset] = new Vector3DTileBatch({\r\n            offset: indexOffset,\r\n            count: indicesLength,\r\n            color: Color.fromRgba(batchTableColors[batchId]),\r\n            batchIds: [batchId]\r\n        });\r\n        batchIds[offset] = batchId;\r\n        indexOffsets[offset] = indexOffset;\r\n        indexCounts[offset] = indicesLength;\r\n        boundingVolumes[offset] = BoundingSphere.transform(primitiveModelMatrixAndBV.boundingVolume, primitiveModelMatrix);\r\n\r\n        positionOffset += positionsLength / 3;\r\n        indexOffset += indicesLength;\r\n    }\r\n\r\n    options.positionOffset = positionOffset;\r\n    options.batchIdIndex = batchIdIndex;\r\n    options.indexOffset = indexOffset;\r\n    options.batchedIndicesOffset += numberOfPrimitives;\r\n}\r\n\r\nvar scratchCenter = new Cartesian3();\r\nvar scratchMatrix4 = new Matrix4();\r\n\r\nfunction unpackBuffer(buffer) {\r\n    var packedBuffer = new Float64Array(buffer);\r\n\r\n    var offset = 0;\r\n    Cartesian3.unpack(packedBuffer, offset, scratchCenter);\r\n    offset += Cartesian3.packedLength;\r\n\r\n    Matrix4.unpack(packedBuffer, offset, scratchMatrix4);\r\n}\r\n\r\nfunction packedBatchedIndicesLength(batchedIndices) {\r\n    var length = batchedIndices.length;\r\n    var count = 0;\r\n    for (var i = 0; i < length; ++i) {\r\n        count += Color.packedLength + 3 + batchedIndices[i].batchIds.length;\r\n    }\r\n    return count;\r\n}\r\n\r\nfunction packBuffer(indicesBytesPerElement, batchedIndices, boundingVolumes) {\r\n    var numBVs = boundingVolumes.length;\r\n    var length = 1 + 1 + numBVs * BoundingSphere.packedLength + 1 + packedBatchedIndicesLength(batchedIndices);\r\n\r\n    var packedBuffer = new Float64Array(length);\r\n\r\n    var offset = 0;\r\n    packedBuffer[offset++] = indicesBytesPerElement;\r\n    packedBuffer[offset++] = numBVs;\r\n\r\n    for (var i = 0; i < numBVs; ++i) {\r\n        BoundingSphere.pack(boundingVolumes[i], packedBuffer, offset);\r\n        offset += BoundingSphere.packedLength;\r\n    }\r\n\r\n    var indicesLength = batchedIndices.length;\r\n    packedBuffer[offset++] = indicesLength;\r\n\r\n    for (var j = 0; j < indicesLength; ++j) {\r\n        var batchedIndex = batchedIndices[j];\r\n\r\n        Color.pack(batchedIndex.color, packedBuffer, offset);\r\n        offset += Color.packedLength;\r\n\r\n        packedBuffer[offset++] = batchedIndex.offset;\r\n        packedBuffer[offset++] = batchedIndex.count;\r\n\r\n        var batchIds = batchedIndex.batchIds;\r\n        var batchIdsLength = batchIds.length;\r\n        packedBuffer[offset++] = batchIdsLength;\r\n\r\n        for (var k = 0; k < batchIdsLength; ++k) {\r\n            packedBuffer[offset++] = batchIds[k];\r\n        }\r\n    }\r\n\r\n    return packedBuffer;\r\n}\r\n\r\nfunction createVectorTileGeometries(parameters, transferableObjects) {\r\n    var boxes = defined(parameters.boxes) ? new Float32Array(parameters.boxes) : undefined;\r\n    var boxBatchIds = defined(parameters.boxBatchIds) ? new Uint16Array(parameters.boxBatchIds) : undefined;\r\n    var cylinders = defined(parameters.cylinders) ? new Float32Array(parameters.cylinders) : undefined;\r\n    var cylinderBatchIds = defined(parameters.cylinderBatchIds) ? new Uint16Array(parameters.cylinderBatchIds) : undefined;\r\n    var ellipsoids = defined(parameters.ellipsoids) ? new Float32Array(parameters.ellipsoids) : undefined;\r\n    var ellipsoidBatchIds = defined(parameters.ellipsoidBatchIds) ? new Uint16Array(parameters.ellipsoidBatchIds) : undefined;\r\n    var spheres = defined(parameters.spheres) ? new Float32Array(parameters.spheres) : undefined;\r\n    var sphereBatchIds = defined(parameters.sphereBatchIds) ? new Uint16Array(parameters.sphereBatchIds) : undefined;\r\n\r\n    var numberOfBoxes = defined(boxes) ? boxBatchIds.length : 0;\r\n    var numberOfCylinders = defined(cylinders) ? cylinderBatchIds.length : 0;\r\n    var numberOfEllipsoids = defined(ellipsoids) ? ellipsoidBatchIds.length : 0;\r\n    var numberOfSpheres = defined(spheres) ? sphereBatchIds.length : 0;\r\n\r\n    var boxGeometry = BoxGeometry.getUnitBox();\r\n    var cylinderGeometry = CylinderGeometry.getUnitCylinder();\r\n    var ellipsoidGeometry = EllipsoidGeometry.getUnitEllipsoid();\r\n\r\n    var boxPositions = boxGeometry.attributes.position.values;\r\n    var cylinderPositions = cylinderGeometry.attributes.position.values;\r\n    var ellipsoidPositions = ellipsoidGeometry.attributes.position.values;\r\n\r\n    var numberOfPositions = boxPositions.length * numberOfBoxes;\r\n    numberOfPositions += cylinderPositions.length * numberOfCylinders;\r\n    numberOfPositions += ellipsoidPositions.length * (numberOfEllipsoids + numberOfSpheres);\r\n\r\n    var boxIndices = boxGeometry.indices;\r\n    var cylinderIndices = cylinderGeometry.indices;\r\n    var ellipsoidIndices = ellipsoidGeometry.indices;\r\n\r\n    var numberOfIndices = boxIndices.length * numberOfBoxes;\r\n    numberOfIndices += cylinderIndices.length * numberOfCylinders;\r\n    numberOfIndices += ellipsoidIndices.length * (numberOfEllipsoids + numberOfSpheres);\r\n\r\n    var positions = new Float32Array(numberOfPositions);\r\n    var vertexBatchIds = new Uint16Array(numberOfPositions / 3);\r\n    var indices = IndexDatatype.createTypedArray(numberOfPositions / 3, numberOfIndices);\r\n\r\n    var numberOfGeometries = numberOfBoxes + numberOfCylinders + numberOfEllipsoids + numberOfSpheres;\r\n    var batchIds = new Uint16Array(numberOfGeometries);\r\n    var batchedIndices = new Array(numberOfGeometries);\r\n    var indexOffsets = new Uint32Array(numberOfGeometries);\r\n    var indexCounts = new Uint32Array(numberOfGeometries);\r\n    var boundingVolumes = new Array(numberOfGeometries);\r\n\r\n    unpackBuffer(parameters.packedBuffer);\r\n\r\n    var options = {\r\n        batchTableColors: new Uint32Array(parameters.batchTableColors),\r\n        positions: positions,\r\n        vertexBatchIds: vertexBatchIds,\r\n        indices: indices,\r\n        batchIds: batchIds,\r\n        batchedIndices: batchedIndices,\r\n        indexOffsets: indexOffsets,\r\n        indexCounts: indexCounts,\r\n        boundingVolumes: boundingVolumes,\r\n        positionOffset: 0,\r\n        batchIdIndex: 0,\r\n        indexOffset: 0,\r\n        batchedIndicesOffset: 0,\r\n        modelMatrix: scratchMatrix4,\r\n        center: scratchCenter\r\n    };\r\n\r\n    createPrimitive(options, boxes, boxBatchIds, boxGeometry, boxModelMatrixAndBoundingVolume);\r\n    createPrimitive(options, cylinders, cylinderBatchIds, cylinderGeometry, cylinderModelMatrixAndBoundingVolume);\r\n    createPrimitive(options, ellipsoids, ellipsoidBatchIds, ellipsoidGeometry, ellipsoidModelMatrixAndBoundingVolume);\r\n    createPrimitive(options, spheres, sphereBatchIds, ellipsoidGeometry, sphereModelMatrixAndBoundingVolume);\r\n\r\n    var packedBuffer = packBuffer(indices.BYTES_PER_ELEMENT, batchedIndices, boundingVolumes);\r\n    transferableObjects.push(positions.buffer, vertexBatchIds.buffer, indices.buffer);\r\n    transferableObjects.push(batchIds.buffer, indexOffsets.buffer, indexCounts.buffer);\r\n    transferableObjects.push(packedBuffer.buffer);\r\n\r\n    return {\r\n        positions: positions.buffer,\r\n        vertexBatchIds: vertexBatchIds.buffer,\r\n        indices: indices.buffer,\r\n        indexOffsets: indexOffsets.buffer,\r\n        indexCounts: indexCounts.buffer,\r\n        batchIds: batchIds.buffer,\r\n        packedBuffer: packedBuffer.buffer\r\n    };\r\n}\r\nexport default createTaskProcessorWorker(createVectorTileGeometries);\r\n"],"names":["Cartesian3","Matrix4","BoundingSphere","defined","Color","BoxGeometry","CylinderGeometry","EllipsoidGeometry","IndexDatatype"],"mappings":"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"}