{"version":3,"file":"createRectangleGeometry.js","sources":["../../../../Source/Core/RectangleGeometry.js","../../../../Source/WorkersES6/createRectangleGeometry.js"],"sourcesContent":["import arrayFill from './arrayFill.js';\r\nimport BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian2 from './Cartesian2.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Cartographic from './Cartographic.js';\r\nimport Check from './Check.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport GeometryInstance from './GeometryInstance.js';\r\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\r\nimport GeometryPipeline from './GeometryPipeline.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport CesiumMath from './Math.js';\r\nimport Matrix2 from './Matrix2.js';\r\nimport Matrix3 from './Matrix3.js';\r\nimport PolygonPipeline from './PolygonPipeline.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\nimport Quaternion from './Quaternion.js';\r\nimport Rectangle from './Rectangle.js';\r\nimport RectangleGeometryLibrary from './RectangleGeometryLibrary.js';\r\nimport VertexFormat from './VertexFormat.js';\r\n\r\nvar positionScratch = new Cartesian3();\r\nvar normalScratch = new Cartesian3();\r\nvar tangentScratch = new Cartesian3();\r\nvar bitangentScratch = new Cartesian3();\r\nvar rectangleScratch = new Rectangle();\r\nvar stScratch = new Cartesian2();\r\nvar bottomBoundingSphere = new BoundingSphere();\r\nvar topBoundingSphere = new BoundingSphere();\r\n\r\nfunction createAttributes(vertexFormat, attributes) {\r\n    var geo = new Geometry({\r\n        attributes: new GeometryAttributes(),\r\n        primitiveType: PrimitiveType.TRIANGLES\r\n    });\r\n\r\n    geo.attributes.position = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.DOUBLE,\r\n        componentsPerAttribute: 3,\r\n        values: attributes.positions\r\n    });\r\n    if (vertexFormat.normal) {\r\n        geo.attributes.normal = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 3,\r\n            values: attributes.normals\r\n        });\r\n    }\r\n    if (vertexFormat.tangent) {\r\n        geo.attributes.tangent = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 3,\r\n            values: attributes.tangents\r\n        });\r\n    }\r\n    if (vertexFormat.bitangent) {\r\n        geo.attributes.bitangent = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 3,\r\n            values: attributes.bitangents\r\n        });\r\n    }\r\n    return geo;\r\n}\r\n\r\nfunction calculateAttributes(positions, vertexFormat, ellipsoid, tangentRotationMatrix) {\r\n    var length = positions.length;\r\n\r\n    var normals = vertexFormat.normal ? new Float32Array(length) : undefined;\r\n    var tangents = vertexFormat.tangent ? new Float32Array(length) : undefined;\r\n    var bitangents = vertexFormat.bitangent ? new Float32Array(length) : undefined;\r\n\r\n    var attrIndex = 0;\r\n    var bitangent = bitangentScratch;\r\n    var tangent = tangentScratch;\r\n    var normal = normalScratch;\r\n    if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\r\n        for (var i = 0; i < length; i += 3) {\r\n            var p = Cartesian3.fromArray(positions, i, positionScratch);\r\n            var attrIndex1 = attrIndex + 1;\r\n            var attrIndex2 = attrIndex + 2;\r\n\r\n            normal = ellipsoid.geodeticSurfaceNormal(p, normal);\r\n            if (vertexFormat.tangent || vertexFormat.bitangent) {\r\n                Cartesian3.cross(Cartesian3.UNIT_Z, normal, tangent);\r\n                Matrix3.multiplyByVector(tangentRotationMatrix, tangent, tangent);\r\n                Cartesian3.normalize(tangent, tangent);\r\n\r\n                if (vertexFormat.bitangent) {\r\n                    Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\r\n                }\r\n            }\r\n\r\n            if (vertexFormat.normal) {\r\n                normals[attrIndex] = normal.x;\r\n                normals[attrIndex1] = normal.y;\r\n                normals[attrIndex2] = normal.z;\r\n            }\r\n            if (vertexFormat.tangent) {\r\n                tangents[attrIndex] = tangent.x;\r\n                tangents[attrIndex1] = tangent.y;\r\n                tangents[attrIndex2] = tangent.z;\r\n            }\r\n            if (vertexFormat.bitangent) {\r\n                bitangents[attrIndex] = bitangent.x;\r\n                bitangents[attrIndex1] = bitangent.y;\r\n                bitangents[attrIndex2] = bitangent.z;\r\n            }\r\n            attrIndex += 3;\r\n        }\r\n    }\r\n    return createAttributes(vertexFormat, {\r\n        positions: positions,\r\n        normals: normals,\r\n        tangents: tangents,\r\n        bitangents: bitangents\r\n    });\r\n}\r\n\r\nvar v1Scratch = new Cartesian3();\r\nvar v2Scratch = new Cartesian3();\r\n\r\nfunction calculateAttributesWall(positions, vertexFormat, ellipsoid) {\r\n    var length = positions.length;\r\n\r\n    var normals = vertexFormat.normal ? new Float32Array(length) : undefined;\r\n    var tangents = vertexFormat.tangent ? new Float32Array(length) : undefined;\r\n    var bitangents = vertexFormat.bitangent ? new Float32Array(length) : undefined;\r\n\r\n    var normalIndex = 0;\r\n    var tangentIndex = 0;\r\n    var bitangentIndex = 0;\r\n    var recomputeNormal = true;\r\n\r\n    var bitangent = bitangentScratch;\r\n    var tangent = tangentScratch;\r\n    var normal = normalScratch;\r\n    if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\r\n        for (var i = 0; i < length; i += 6) {\r\n            var p = Cartesian3.fromArray(positions, i, positionScratch);\r\n            var p1 = Cartesian3.fromArray(positions, (i + 6) % length, v1Scratch);\r\n            if (recomputeNormal) {\r\n                var p2 = Cartesian3.fromArray(positions, (i + 3) % length, v2Scratch);\r\n                Cartesian3.subtract(p1, p, p1);\r\n                Cartesian3.subtract(p2, p, p2);\r\n                normal = Cartesian3.normalize(Cartesian3.cross(p2, p1, normal), normal);\r\n                recomputeNormal = false;\r\n            }\r\n\r\n            if (Cartesian3.equalsEpsilon(p1, p, CesiumMath.EPSILON10)) {\r\n                // if we've reached a corner\r\n                recomputeNormal = true;\r\n            }\r\n\r\n            if (vertexFormat.tangent || vertexFormat.bitangent) {\r\n                bitangent = ellipsoid.geodeticSurfaceNormal(p, bitangent);\r\n                if (vertexFormat.tangent) {\r\n                    tangent = Cartesian3.normalize(Cartesian3.cross(bitangent, normal, tangent), tangent);\r\n                }\r\n            }\r\n\r\n            if (vertexFormat.normal) {\r\n                normals[normalIndex++] = normal.x;\r\n                normals[normalIndex++] = normal.y;\r\n                normals[normalIndex++] = normal.z;\r\n                normals[normalIndex++] = normal.x;\r\n                normals[normalIndex++] = normal.y;\r\n                normals[normalIndex++] = normal.z;\r\n            }\r\n\r\n            if (vertexFormat.tangent) {\r\n                tangents[tangentIndex++] = tangent.x;\r\n                tangents[tangentIndex++] = tangent.y;\r\n                tangents[tangentIndex++] = tangent.z;\r\n                tangents[tangentIndex++] = tangent.x;\r\n                tangents[tangentIndex++] = tangent.y;\r\n                tangents[tangentIndex++] = tangent.z;\r\n            }\r\n\r\n            if (vertexFormat.bitangent) {\r\n                bitangents[bitangentIndex++] = bitangent.x;\r\n                bitangents[bitangentIndex++] = bitangent.y;\r\n                bitangents[bitangentIndex++] = bitangent.z;\r\n                bitangents[bitangentIndex++] = bitangent.x;\r\n                bitangents[bitangentIndex++] = bitangent.y;\r\n                bitangents[bitangentIndex++] = bitangent.z;\r\n            }\r\n        }\r\n    }\r\n\r\n    return createAttributes(vertexFormat, {\r\n        positions: positions,\r\n        normals: normals,\r\n        tangents: tangents,\r\n        bitangents: bitangents\r\n    });\r\n}\r\n\r\nfunction constructRectangle(rectangleGeometry, computedOptions) {\r\n    var vertexFormat = rectangleGeometry._vertexFormat;\r\n    var ellipsoid = rectangleGeometry._ellipsoid;\r\n    var height = computedOptions.height;\r\n    var width = computedOptions.width;\r\n    var northCap = computedOptions.northCap;\r\n    var southCap = computedOptions.southCap;\r\n\r\n    var rowStart = 0;\r\n    var rowEnd = height;\r\n    var rowHeight = height;\r\n    var size = 0;\r\n    if (northCap) {\r\n        rowStart = 1;\r\n        rowHeight -= 1;\r\n        size += 1;\r\n    }\r\n    if (southCap) {\r\n        rowEnd -= 1;\r\n        rowHeight -= 1;\r\n        size += 1;\r\n    }\r\n    size += width * rowHeight;\r\n\r\n    var positions = vertexFormat.position ? new Float64Array(size * 3) : undefined;\r\n    var textureCoordinates = vertexFormat.st ? new Float32Array(size * 2) : undefined;\r\n\r\n    var posIndex = 0;\r\n    var stIndex = 0;\r\n\r\n    var position = positionScratch;\r\n    var st = stScratch;\r\n\r\n    var minX = Number.MAX_VALUE;\r\n    var minY = Number.MAX_VALUE;\r\n    var maxX = -Number.MAX_VALUE;\r\n    var maxY = -Number.MAX_VALUE;\r\n\r\n    for (var row = rowStart; row < rowEnd; ++row) {\r\n        for (var col = 0; col < width; ++col) {\r\n            RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, vertexFormat.st, row, col, position, st);\r\n\r\n            positions[posIndex++] = position.x;\r\n            positions[posIndex++] = position.y;\r\n            positions[posIndex++] = position.z;\r\n\r\n            if (vertexFormat.st) {\r\n                textureCoordinates[stIndex++] = st.x;\r\n                textureCoordinates[stIndex++] = st.y;\r\n\r\n                minX = Math.min(minX, st.x);\r\n                minY = Math.min(minY, st.y);\r\n                maxX = Math.max(maxX, st.x);\r\n                maxY = Math.max(maxY, st.y);\r\n            }\r\n        }\r\n    }\r\n    if (northCap) {\r\n        RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, vertexFormat.st, 0, 0, position, st);\r\n\r\n        positions[posIndex++] = position.x;\r\n        positions[posIndex++] = position.y;\r\n        positions[posIndex++] = position.z;\r\n\r\n        if (vertexFormat.st) {\r\n            textureCoordinates[stIndex++] = st.x;\r\n            textureCoordinates[stIndex++] = st.y;\r\n\r\n            minX = st.x;\r\n            minY = st.y;\r\n            maxX = st.x;\r\n            maxY = st.y;\r\n        }\r\n    }\r\n    if (southCap) {\r\n        RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, vertexFormat.st, height - 1, 0, position, st);\r\n\r\n        positions[posIndex++] = position.x;\r\n        positions[posIndex++] = position.y;\r\n        positions[posIndex] = position.z;\r\n\r\n        if (vertexFormat.st) {\r\n            textureCoordinates[stIndex++] = st.x;\r\n            textureCoordinates[stIndex] = st.y;\r\n\r\n            minX = Math.min(minX, st.x);\r\n            minY = Math.min(minY, st.y);\r\n            maxX = Math.max(maxX, st.x);\r\n            maxY = Math.max(maxY, st.y);\r\n        }\r\n    }\r\n\r\n    if (vertexFormat.st && (minX < 0.0 || minY < 0.0 || maxX > 1.0 || maxY > 1.0)) {\r\n        for (var k = 0; k < textureCoordinates.length; k += 2) {\r\n            textureCoordinates[k] = (textureCoordinates[k] - minX) / (maxX - minX);\r\n            textureCoordinates[k + 1] = (textureCoordinates[k + 1] - minY) / (maxY - minY);\r\n        }\r\n    }\r\n\r\n    var geo = calculateAttributes(positions, vertexFormat, ellipsoid, computedOptions.tangentRotationMatrix);\r\n\r\n    var indicesSize = 6 * (width - 1) * (rowHeight - 1);\r\n    if (northCap) {\r\n        indicesSize += 3 * (width - 1);\r\n    }\r\n    if (southCap) {\r\n        indicesSize += 3 * (width - 1);\r\n    }\r\n    var indices = IndexDatatype.createTypedArray(size, indicesSize);\r\n    var index = 0;\r\n    var indicesIndex = 0;\r\n    var i;\r\n    for (i = 0; i < rowHeight - 1; ++i) {\r\n        for (var j = 0; j < width - 1; ++j) {\r\n            var upperLeft = index;\r\n            var lowerLeft = upperLeft + width;\r\n            var lowerRight = lowerLeft + 1;\r\n            var upperRight = upperLeft + 1;\r\n            indices[indicesIndex++] = upperLeft;\r\n            indices[indicesIndex++] = lowerLeft;\r\n            indices[indicesIndex++] = upperRight;\r\n            indices[indicesIndex++] = upperRight;\r\n            indices[indicesIndex++] = lowerLeft;\r\n            indices[indicesIndex++] = lowerRight;\r\n            ++index;\r\n        }\r\n        ++index;\r\n    }\r\n    if (northCap || southCap) {\r\n        var northIndex = size - 1;\r\n        var southIndex = size - 1;\r\n        if (northCap && southCap) {\r\n            northIndex = size - 2;\r\n        }\r\n\r\n        var p1;\r\n        var p2;\r\n        index = 0;\r\n\r\n        if (northCap) {\r\n            for (i = 0; i < width - 1; i++) {\r\n                p1 = index;\r\n                p2 = p1 + 1;\r\n                indices[indicesIndex++] = northIndex;\r\n                indices[indicesIndex++] = p1;\r\n                indices[indicesIndex++] = p2;\r\n                ++index;\r\n            }\r\n        }\r\n        if (southCap) {\r\n            index = (rowHeight - 1) * width;\r\n            for (i = 0; i < width - 1; i++) {\r\n                p1 = index;\r\n                p2 = p1 + 1;\r\n                indices[indicesIndex++] = p1;\r\n                indices[indicesIndex++] = southIndex;\r\n                indices[indicesIndex++] = p2;\r\n                ++index;\r\n            }\r\n        }\r\n    }\r\n\r\n    geo.indices = indices;\r\n    if (vertexFormat.st) {\r\n        geo.attributes.st = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 2,\r\n            values: textureCoordinates\r\n        });\r\n    }\r\n\r\n    return geo;\r\n}\r\n\r\nfunction addWallPositions(wallPositions, posIndex, i, topPositions, bottomPositions) {\r\n    wallPositions[posIndex++] = topPositions[i];\r\n    wallPositions[posIndex++] = topPositions[i + 1];\r\n    wallPositions[posIndex++] = topPositions[i + 2];\r\n    wallPositions[posIndex++] = bottomPositions[i];\r\n    wallPositions[posIndex++] = bottomPositions[i + 1];\r\n    wallPositions[posIndex] = bottomPositions[i + 2];\r\n    return wallPositions;\r\n}\r\n\r\nfunction addWallTextureCoordinates(wallTextures, stIndex, i, st) {\r\n    wallTextures[stIndex++] = st[i];\r\n    wallTextures[stIndex++] = st[i + 1];\r\n    wallTextures[stIndex++] = st[i];\r\n    wallTextures[stIndex] = st[i + 1];\r\n    return wallTextures;\r\n}\r\n\r\nvar scratchVertexFormat = new VertexFormat();\r\n\r\nfunction constructExtrudedRectangle(rectangleGeometry, computedOptions) {\r\n    var shadowVolume = rectangleGeometry._shadowVolume;\r\n    var offsetAttributeValue = rectangleGeometry._offsetAttribute;\r\n    var vertexFormat = rectangleGeometry._vertexFormat;\r\n    var minHeight = rectangleGeometry._extrudedHeight;\r\n    var maxHeight = rectangleGeometry._surfaceHeight;\r\n    var ellipsoid = rectangleGeometry._ellipsoid;\r\n\r\n    var height = computedOptions.height;\r\n    var width = computedOptions.width;\r\n\r\n    var i;\r\n\r\n    if (shadowVolume) {\r\n        var newVertexFormat = VertexFormat.clone(vertexFormat, scratchVertexFormat);\r\n        newVertexFormat.normal = true;\r\n        rectangleGeometry._vertexFormat = newVertexFormat;\r\n    }\r\n\r\n    var topBottomGeo = constructRectangle(rectangleGeometry, computedOptions);\r\n\r\n    if (shadowVolume) {\r\n        rectangleGeometry._vertexFormat = vertexFormat;\r\n    }\r\n\r\n    var topPositions = PolygonPipeline.scaleToGeodeticHeight(topBottomGeo.attributes.position.values, maxHeight, ellipsoid, false);\r\n    topPositions = new Float64Array(topPositions);\r\n    var length = topPositions.length;\r\n    var newLength = length * 2;\r\n    var positions = new Float64Array(newLength);\r\n    positions.set(topPositions);\r\n    var bottomPositions = PolygonPipeline.scaleToGeodeticHeight(topBottomGeo.attributes.position.values, minHeight, ellipsoid);\r\n    positions.set(bottomPositions, length);\r\n    topBottomGeo.attributes.position.values = positions;\r\n\r\n    var normals = vertexFormat.normal ? new Float32Array(newLength) : undefined;\r\n    var tangents = vertexFormat.tangent ? new Float32Array(newLength) : undefined;\r\n    var bitangents = vertexFormat.bitangent ? new Float32Array(newLength) : undefined;\r\n    var textures = vertexFormat.st ? new Float32Array((newLength / 3) * 2) : undefined;\r\n    var topSt;\r\n    var topNormals;\r\n    if (vertexFormat.normal) {\r\n        topNormals = topBottomGeo.attributes.normal.values;\r\n        normals.set(topNormals);\r\n        for (i = 0; i < length; i++) {\r\n            topNormals[i] = -topNormals[i];\r\n        }\r\n        normals.set(topNormals, length);\r\n        topBottomGeo.attributes.normal.values = normals;\r\n    }\r\n    if (shadowVolume) {\r\n        topNormals = topBottomGeo.attributes.normal.values;\r\n        if (!vertexFormat.normal) {\r\n            topBottomGeo.attributes.normal = undefined;\r\n        }\r\n        var extrudeNormals = new Float32Array(newLength);\r\n        for (i = 0; i < length; i++) {\r\n            topNormals[i] = -topNormals[i];\r\n        }\r\n        extrudeNormals.set(topNormals, length); //only get normals for bottom layer that's going to be pushed down\r\n        topBottomGeo.attributes.extrudeDirection = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 3,\r\n            values: extrudeNormals\r\n        });\r\n    }\r\n\r\n    var offsetValue;\r\n    var hasOffsets = defined(offsetAttributeValue);\r\n    if (hasOffsets) {\r\n        var size = (length / 3) * 2;\r\n        var offsetAttribute = new Uint8Array(size);\r\n        if (offsetAttributeValue === GeometryOffsetAttribute.TOP) {\r\n            offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\r\n        } else {\r\n            offsetValue = offsetAttributeValue === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n            offsetAttribute = arrayFill(offsetAttribute, offsetValue);\r\n        }\r\n\r\n        topBottomGeo.attributes.applyOffset = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n            componentsPerAttribute: 1,\r\n            values: offsetAttribute\r\n        });\r\n    }\r\n\r\n    if (vertexFormat.tangent) {\r\n        var topTangents = topBottomGeo.attributes.tangent.values;\r\n        tangents.set(topTangents);\r\n        for (i = 0; i < length; i++) {\r\n            topTangents[i] = -topTangents[i];\r\n        }\r\n        tangents.set(topTangents, length);\r\n        topBottomGeo.attributes.tangent.values = tangents;\r\n    }\r\n    if (vertexFormat.bitangent) {\r\n        var topBitangents = topBottomGeo.attributes.bitangent.values;\r\n        bitangents.set(topBitangents);\r\n        bitangents.set(topBitangents, length);\r\n        topBottomGeo.attributes.bitangent.values = bitangents;\r\n    }\r\n    if (vertexFormat.st) {\r\n        topSt = topBottomGeo.attributes.st.values;\r\n        textures.set(topSt);\r\n        textures.set(topSt, (length / 3) * 2);\r\n        topBottomGeo.attributes.st.values = textures;\r\n    }\r\n\r\n    var indices = topBottomGeo.indices;\r\n    var indicesLength = indices.length;\r\n    var posLength = length / 3;\r\n    var newIndices = IndexDatatype.createTypedArray(newLength / 3, indicesLength * 2);\r\n    newIndices.set(indices);\r\n    for (i = 0; i < indicesLength; i += 3) {\r\n        newIndices[i + indicesLength] = indices[i + 2] + posLength;\r\n        newIndices[i + 1 + indicesLength] = indices[i + 1] + posLength;\r\n        newIndices[i + 2 + indicesLength] = indices[i] + posLength;\r\n    }\r\n    topBottomGeo.indices = newIndices;\r\n\r\n    var northCap = computedOptions.northCap;\r\n    var southCap = computedOptions.southCap;\r\n\r\n    var rowHeight = height;\r\n    var widthMultiplier = 2;\r\n    var perimeterPositions = 0;\r\n    var corners = 4;\r\n    var dupliateCorners = 4;\r\n    if (northCap) {\r\n        widthMultiplier -= 1;\r\n        rowHeight -= 1;\r\n        perimeterPositions += 1;\r\n        corners -= 2;\r\n        dupliateCorners -= 1;\r\n    }\r\n    if (southCap) {\r\n        widthMultiplier -= 1;\r\n        rowHeight -= 1;\r\n        perimeterPositions += 1;\r\n        corners -= 2;\r\n        dupliateCorners -= 1;\r\n    }\r\n    perimeterPositions += widthMultiplier * width + 2 * rowHeight - corners;\r\n\r\n    var wallCount = (perimeterPositions + dupliateCorners) * 2;\r\n\r\n    var wallPositions = new Float64Array(wallCount * 3);\r\n    var wallExtrudeNormals = shadowVolume ? new Float32Array(wallCount * 3) : undefined;\r\n    var wallOffsetAttribute = hasOffsets ? new Uint8Array(wallCount) : undefined;\r\n    var wallTextures = vertexFormat.st ? new Float32Array(wallCount * 2) : undefined;\r\n\r\n    var computeTopOffsets = offsetAttributeValue === GeometryOffsetAttribute.TOP;\r\n    if (hasOffsets && !computeTopOffsets) {\r\n        offsetValue = offsetAttributeValue === GeometryOffsetAttribute.ALL ? 1 : 0;\r\n        wallOffsetAttribute = arrayFill(wallOffsetAttribute, offsetValue);\r\n    }\r\n\r\n    var posIndex = 0;\r\n    var stIndex = 0;\r\n    var extrudeNormalIndex = 0;\r\n    var wallOffsetIndex = 0;\r\n    var area = width * rowHeight;\r\n    var threeI;\r\n    for (i = 0; i < area; i += width) {\r\n        threeI = i * 3;\r\n        wallPositions = addWallPositions(wallPositions, posIndex, threeI, topPositions, bottomPositions);\r\n        posIndex += 6;\r\n        if (vertexFormat.st) {\r\n            wallTextures = addWallTextureCoordinates(wallTextures, stIndex, i * 2, topSt);\r\n            stIndex += 4;\r\n        }\r\n        if (shadowVolume) {\r\n            extrudeNormalIndex += 3;\r\n            wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];\r\n            wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];\r\n            wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];\r\n        }\r\n        if (computeTopOffsets) {\r\n            wallOffsetAttribute[wallOffsetIndex++] = 1;\r\n            wallOffsetIndex += 1;\r\n        }\r\n    }\r\n\r\n    if (!southCap) {\r\n        for (i = area - width; i < area; i++) {\r\n            threeI = i * 3;\r\n            wallPositions = addWallPositions(wallPositions, posIndex, threeI, topPositions, bottomPositions);\r\n            posIndex += 6;\r\n            if (vertexFormat.st) {\r\n                wallTextures = addWallTextureCoordinates(wallTextures, stIndex, i * 2, topSt);\r\n                stIndex += 4;\r\n            }\r\n            if (shadowVolume) {\r\n                extrudeNormalIndex += 3;\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];\r\n            }\r\n            if (computeTopOffsets) {\r\n                wallOffsetAttribute[wallOffsetIndex++] = 1;\r\n                wallOffsetIndex += 1;\r\n            }\r\n        }\r\n    } else {\r\n        var southIndex = northCap ? area + 1 : area;\r\n        threeI = southIndex * 3;\r\n\r\n        for (i = 0; i < 2; i++) {\r\n            // duplicate corner points\r\n            wallPositions = addWallPositions(wallPositions, posIndex, threeI, topPositions, bottomPositions);\r\n            posIndex += 6;\r\n            if (vertexFormat.st) {\r\n                wallTextures = addWallTextureCoordinates(wallTextures, stIndex, southIndex * 2, topSt);\r\n                stIndex += 4;\r\n            }\r\n            if (shadowVolume) {\r\n                extrudeNormalIndex += 3;\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];\r\n            }\r\n            if (computeTopOffsets) {\r\n                wallOffsetAttribute[wallOffsetIndex++] = 1;\r\n                wallOffsetIndex += 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    for (i = area - 1; i > 0; i -= width) {\r\n        threeI = i * 3;\r\n        wallPositions = addWallPositions(wallPositions, posIndex, threeI, topPositions, bottomPositions);\r\n        posIndex += 6;\r\n        if (vertexFormat.st) {\r\n            wallTextures = addWallTextureCoordinates(wallTextures, stIndex, i * 2, topSt);\r\n            stIndex += 4;\r\n        }\r\n        if (shadowVolume) {\r\n            extrudeNormalIndex += 3;\r\n            wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];\r\n            wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];\r\n            wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];\r\n        }\r\n        if (computeTopOffsets) {\r\n            wallOffsetAttribute[wallOffsetIndex++] = 1;\r\n            wallOffsetIndex += 1;\r\n        }\r\n    }\r\n\r\n    if (!northCap) {\r\n        for (i = width - 1; i >= 0; i--) {\r\n            threeI = i * 3;\r\n            wallPositions = addWallPositions(wallPositions, posIndex, threeI, topPositions, bottomPositions);\r\n            posIndex += 6;\r\n            if (vertexFormat.st) {\r\n                wallTextures = addWallTextureCoordinates(wallTextures, stIndex, i * 2, topSt);\r\n                stIndex += 4;\r\n            }\r\n            if (shadowVolume) {\r\n                extrudeNormalIndex += 3;\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];\r\n            }\r\n            if (computeTopOffsets) {\r\n                wallOffsetAttribute[wallOffsetIndex++] = 1;\r\n                wallOffsetIndex += 1;\r\n            }\r\n        }\r\n    } else {\r\n        var northIndex = area;\r\n        threeI = northIndex * 3;\r\n\r\n        for (i = 0; i < 2; i++) {\r\n            // duplicate corner points\r\n            wallPositions = addWallPositions(wallPositions, posIndex, threeI, topPositions, bottomPositions);\r\n            posIndex += 6;\r\n            if (vertexFormat.st) {\r\n                wallTextures = addWallTextureCoordinates(wallTextures, stIndex, northIndex * 2, topSt);\r\n                stIndex += 4;\r\n            }\r\n            if (shadowVolume) {\r\n                extrudeNormalIndex += 3;\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];\r\n            }\r\n            if (computeTopOffsets) {\r\n                wallOffsetAttribute[wallOffsetIndex++] = 1;\r\n                wallOffsetIndex += 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    var geo = calculateAttributesWall(wallPositions, vertexFormat, ellipsoid);\r\n\r\n    if (vertexFormat.st) {\r\n        geo.attributes.st = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 2,\r\n            values: wallTextures\r\n        });\r\n    }\r\n    if (shadowVolume) {\r\n        geo.attributes.extrudeDirection = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 3,\r\n            values: wallExtrudeNormals\r\n        });\r\n    }\r\n    if (hasOffsets) {\r\n        geo.attributes.applyOffset = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n            componentsPerAttribute: 1,\r\n            values: wallOffsetAttribute\r\n        });\r\n    }\r\n\r\n    var wallIndices = IndexDatatype.createTypedArray(wallCount, perimeterPositions * 6);\r\n\r\n    var upperLeft;\r\n    var lowerLeft;\r\n    var lowerRight;\r\n    var upperRight;\r\n    length = wallPositions.length / 3;\r\n    var index = 0;\r\n    for (i = 0; i < length - 1; i += 2) {\r\n        upperLeft = i;\r\n        upperRight = (upperLeft + 2) % length;\r\n        var p1 = Cartesian3.fromArray(wallPositions, upperLeft * 3, v1Scratch);\r\n        var p2 = Cartesian3.fromArray(wallPositions, upperRight * 3, v2Scratch);\r\n        if (Cartesian3.equalsEpsilon(p1, p2, CesiumMath.EPSILON10)) {\r\n            continue;\r\n        }\r\n        lowerLeft = (upperLeft + 1) % length;\r\n        lowerRight = (lowerLeft + 2) % length;\r\n        wallIndices[index++] = upperLeft;\r\n        wallIndices[index++] = lowerLeft;\r\n        wallIndices[index++] = upperRight;\r\n        wallIndices[index++] = upperRight;\r\n        wallIndices[index++] = lowerLeft;\r\n        wallIndices[index++] = lowerRight;\r\n    }\r\n\r\n    geo.indices = wallIndices;\r\n\r\n    geo = GeometryPipeline.combineInstances([\r\n        new GeometryInstance({\r\n            geometry: topBottomGeo\r\n        }),\r\n        new GeometryInstance({\r\n            geometry: geo\r\n        })\r\n    ]);\r\n\r\n    return geo[0];\r\n}\r\n\r\nvar scratchRectanglePoints = [new Cartesian3(), new Cartesian3(), new Cartesian3(), new Cartesian3()];\r\nvar nwScratch = new Cartographic();\r\nvar stNwScratch = new Cartographic();\r\nfunction computeRectangle(rectangle, granularity, rotation, ellipsoid, result) {\r\n    if (rotation === 0.0) {\r\n        return Rectangle.clone(rectangle, result);\r\n    }\r\n\r\n    var computedOptions = RectangleGeometryLibrary.computeOptions(rectangle, granularity, rotation, 0, rectangleScratch, nwScratch);\r\n\r\n    var height = computedOptions.height;\r\n    var width = computedOptions.width;\r\n\r\n    var positions = scratchRectanglePoints;\r\n    RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, 0, 0, positions[0]);\r\n    RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, 0, width - 1, positions[1]);\r\n    RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, height - 1, 0, positions[2]);\r\n    RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, height - 1, width - 1, positions[3]);\r\n\r\n    return Rectangle.fromCartesianArray(positions, ellipsoid, result);\r\n}\r\n\r\n/**\r\n * A description of a cartographic rectangle on an ellipsoid centered at the origin. Rectangle geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\r\n *\r\n * @alias RectangleGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Rectangle} options.rectangle A cartographic rectangle with north, south, east and west properties in radians.\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the rectangle lies.\r\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n * @param {Number} [options.height=0.0] The distance in meters between the rectangle and the ellipsoid surface.\r\n * @param {Number} [options.rotation=0.0] The rotation of the rectangle, in radians. A positive rotation is counter-clockwise.\r\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\r\n * @param {Number} [options.extrudedHeight] The distance in meters between the rectangle's extruded face and the ellipsoid surface.\r\n *\r\n * @exception {DeveloperError} <code>options.rectangle.north</code> must be in the interval [<code>-Pi/2</code>, <code>Pi/2</code>].\r\n * @exception {DeveloperError} <code>options.rectangle.south</code> must be in the interval [<code>-Pi/2</code>, <code>Pi/2</code>].\r\n * @exception {DeveloperError} <code>options.rectangle.east</code> must be in the interval [<code>-Pi</code>, <code>Pi</code>].\r\n * @exception {DeveloperError} <code>options.rectangle.west</code> must be in the interval [<code>-Pi</code>, <code>Pi</code>].\r\n * @exception {DeveloperError} <code>options.rectangle.north</code> must be greater than <code>options.rectangle.south</code>.\r\n *\r\n * @see RectangleGeometry#createGeometry\r\n *\r\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Rectangle.html|Cesium Sandcastle Rectangle Demo}\r\n *\r\n * @example\r\n * // 1. create a rectangle\r\n * var rectangle = new Cesium.RectangleGeometry({\r\n *   ellipsoid : Cesium.Ellipsoid.WGS84,\r\n *   rectangle : Cesium.Rectangle.fromDegrees(-80.0, 39.0, -74.0, 42.0),\r\n *   height : 10000.0\r\n * });\r\n * var geometry = Cesium.RectangleGeometry.createGeometry(rectangle);\r\n *\r\n * // 2. create an extruded rectangle without a top\r\n * var rectangle = new Cesium.RectangleGeometry({\r\n *   ellipsoid : Cesium.Ellipsoid.WGS84,\r\n *   rectangle : Cesium.Rectangle.fromDegrees(-80.0, 39.0, -74.0, 42.0),\r\n *   height : 10000.0,\r\n *   extrudedHeight: 300000\r\n * });\r\n * var geometry = Cesium.RectangleGeometry.createGeometry(rectangle);\r\n */\r\nfunction RectangleGeometry(options) {\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n    var rectangle = options.rectangle;\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.typeOf.object('rectangle', rectangle);\r\n    Rectangle.validate(rectangle);\r\n    if (rectangle.north < rectangle.south) {\r\n        throw new DeveloperError('options.rectangle.north must be greater than or equal to options.rectangle.south');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var height = defaultValue(options.height, 0.0);\r\n    var extrudedHeight = defaultValue(options.extrudedHeight, height);\r\n\r\n    this._rectangle = Rectangle.clone(rectangle);\r\n    this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n    this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\r\n    this._surfaceHeight = Math.max(height, extrudedHeight);\r\n    this._rotation = defaultValue(options.rotation, 0.0);\r\n    this._stRotation = defaultValue(options.stRotation, 0.0);\r\n    this._vertexFormat = VertexFormat.clone(defaultValue(options.vertexFormat, VertexFormat.DEFAULT));\r\n    this._extrudedHeight = Math.min(height, extrudedHeight);\r\n    this._shadowVolume = defaultValue(options.shadowVolume, false);\r\n    this._workerName = 'createRectangleGeometry';\r\n    this._offsetAttribute = options.offsetAttribute;\r\n    this._rotatedRectangle = undefined;\r\n\r\n    this._textureCoordinateRotationPoints = undefined;\r\n}\r\n\r\n/**\r\n * The number of elements used to pack the object into an array.\r\n * @type {Number}\r\n */\r\nRectangleGeometry.packedLength = Rectangle.packedLength + Ellipsoid.packedLength + VertexFormat.packedLength + 7;\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {RectangleGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nRectangleGeometry.pack = function (value, array, startingIndex) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.typeOf.object('value', value);\r\n    Check.defined('array', array);\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    Rectangle.pack(value._rectangle, array, startingIndex);\r\n    startingIndex += Rectangle.packedLength;\r\n\r\n    Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n    startingIndex += Ellipsoid.packedLength;\r\n\r\n    VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n    startingIndex += VertexFormat.packedLength;\r\n\r\n    array[startingIndex++] = value._granularity;\r\n    array[startingIndex++] = value._surfaceHeight;\r\n    array[startingIndex++] = value._rotation;\r\n    array[startingIndex++] = value._stRotation;\r\n    array[startingIndex++] = value._extrudedHeight;\r\n    array[startingIndex++] = value._shadowVolume ? 1.0 : 0.0;\r\n    array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n    return array;\r\n};\r\n\r\nvar scratchRectangle = new Rectangle();\r\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\nvar scratchOptions = {\r\n    rectangle: scratchRectangle,\r\n    ellipsoid: scratchEllipsoid,\r\n    vertexFormat: scratchVertexFormat,\r\n    granularity: undefined,\r\n    height: undefined,\r\n    rotation: undefined,\r\n    stRotation: undefined,\r\n    extrudedHeight: undefined,\r\n    shadowVolume: undefined,\r\n    offsetAttribute: undefined\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {RectangleGeometry} [result] The object into which to store the result.\r\n * @returns {RectangleGeometry} The modified result parameter or a new RectangleGeometry instance if one was not provided.\r\n */\r\nRectangleGeometry.unpack = function (array, startingIndex, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined('array', array);\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    var rectangle = Rectangle.unpack(array, startingIndex, scratchRectangle);\r\n    startingIndex += Rectangle.packedLength;\r\n\r\n    var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n    startingIndex += Ellipsoid.packedLength;\r\n\r\n    var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\r\n    startingIndex += VertexFormat.packedLength;\r\n\r\n    var granularity = array[startingIndex++];\r\n    var surfaceHeight = array[startingIndex++];\r\n    var rotation = array[startingIndex++];\r\n    var stRotation = array[startingIndex++];\r\n    var extrudedHeight = array[startingIndex++];\r\n    var shadowVolume = array[startingIndex++] === 1.0;\r\n    var offsetAttribute = array[startingIndex];\r\n\r\n    if (!defined(result)) {\r\n        scratchOptions.granularity = granularity;\r\n        scratchOptions.height = surfaceHeight;\r\n        scratchOptions.rotation = rotation;\r\n        scratchOptions.stRotation = stRotation;\r\n        scratchOptions.extrudedHeight = extrudedHeight;\r\n        scratchOptions.shadowVolume = shadowVolume;\r\n        scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n        return new RectangleGeometry(scratchOptions);\r\n    }\r\n\r\n    result._rectangle = Rectangle.clone(rectangle, result._rectangle);\r\n    result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n    result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n    result._granularity = granularity;\r\n    result._surfaceHeight = surfaceHeight;\r\n    result._rotation = rotation;\r\n    result._stRotation = stRotation;\r\n    result._extrudedHeight = extrudedHeight;\r\n    result._shadowVolume = shadowVolume;\r\n    result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Computes the bounding rectangle based on the provided options\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Rectangle} options.rectangle A cartographic rectangle with north, south, east and west properties in radians.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the rectangle lies.\r\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n * @param {Number} [options.rotation=0.0] The rotation of the rectangle, in radians. A positive rotation is counter-clockwise.\r\n * @param {Rectangle} [result] An object in which to store the result.\r\n *\r\n * @returns {Rectangle} The result rectangle\r\n */\r\nRectangleGeometry.computeRectangle = function (options, result) {\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n    var rectangle = options.rectangle;\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.typeOf.object('rectangle', rectangle);\r\n    Rectangle.validate(rectangle);\r\n    if (rectangle.north < rectangle.south) {\r\n        throw new DeveloperError('options.rectangle.north must be greater than or equal to options.rectangle.south');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n    var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n    var rotation = defaultValue(options.rotation, 0.0);\r\n\r\n    return computeRectangle(rectangle, granularity, rotation, ellipsoid, result);\r\n};\r\n\r\nvar tangentRotationMatrixScratch = new Matrix3();\r\nvar quaternionScratch = new Quaternion();\r\nvar centerScratch = new Cartographic();\r\n/**\r\n * Computes the geometric representation of a rectangle, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {RectangleGeometry} rectangleGeometry A description of the rectangle.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n *\r\n * @exception {DeveloperError} Rotated rectangle is invalid.\r\n */\r\nRectangleGeometry.createGeometry = function (rectangleGeometry) {\r\n    if (\r\n        CesiumMath.equalsEpsilon(rectangleGeometry._rectangle.north, rectangleGeometry._rectangle.south, CesiumMath.EPSILON10) ||\r\n        CesiumMath.equalsEpsilon(rectangleGeometry._rectangle.east, rectangleGeometry._rectangle.west, CesiumMath.EPSILON10)\r\n    ) {\r\n        return undefined;\r\n    }\r\n\r\n    var rectangle = rectangleGeometry._rectangle;\r\n    var ellipsoid = rectangleGeometry._ellipsoid;\r\n    var rotation = rectangleGeometry._rotation;\r\n    var stRotation = rectangleGeometry._stRotation;\r\n    var vertexFormat = rectangleGeometry._vertexFormat;\r\n\r\n    var computedOptions = RectangleGeometryLibrary.computeOptions(rectangle, rectangleGeometry._granularity, rotation, stRotation, rectangleScratch, nwScratch, stNwScratch);\r\n\r\n    var tangentRotationMatrix = tangentRotationMatrixScratch;\r\n    if (stRotation !== 0 || rotation !== 0) {\r\n        var center = Rectangle.center(rectangle, centerScratch);\r\n        var axis = ellipsoid.geodeticSurfaceNormalCartographic(center, v1Scratch);\r\n        Quaternion.fromAxisAngle(axis, -stRotation, quaternionScratch);\r\n        Matrix3.fromQuaternion(quaternionScratch, tangentRotationMatrix);\r\n    } else {\r\n        Matrix3.clone(Matrix3.IDENTITY, tangentRotationMatrix);\r\n    }\r\n\r\n    var surfaceHeight = rectangleGeometry._surfaceHeight;\r\n    var extrudedHeight = rectangleGeometry._extrudedHeight;\r\n    var extrude = !CesiumMath.equalsEpsilon(surfaceHeight, extrudedHeight, 0, CesiumMath.EPSILON2);\r\n\r\n    computedOptions.lonScalar = 1.0 / rectangleGeometry._rectangle.width;\r\n    computedOptions.latScalar = 1.0 / rectangleGeometry._rectangle.height;\r\n    computedOptions.tangentRotationMatrix = tangentRotationMatrix;\r\n\r\n    var geometry;\r\n    var boundingSphere;\r\n    rectangle = rectangleGeometry._rectangle;\r\n    if (extrude) {\r\n        geometry = constructExtrudedRectangle(rectangleGeometry, computedOptions);\r\n        var topBS = BoundingSphere.fromRectangle3D(rectangle, ellipsoid, surfaceHeight, topBoundingSphere);\r\n        var bottomBS = BoundingSphere.fromRectangle3D(rectangle, ellipsoid, extrudedHeight, bottomBoundingSphere);\r\n        boundingSphere = BoundingSphere.union(topBS, bottomBS);\r\n    } else {\r\n        geometry = constructRectangle(rectangleGeometry, computedOptions);\r\n        geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(geometry.attributes.position.values, surfaceHeight, ellipsoid, false);\r\n\r\n        if (defined(rectangleGeometry._offsetAttribute)) {\r\n            var length = geometry.attributes.position.values.length;\r\n            var applyOffset = new Uint8Array(length / 3);\r\n            var offsetValue = rectangleGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n            arrayFill(applyOffset, offsetValue);\r\n            geometry.attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute: 1,\r\n                values: applyOffset\r\n            });\r\n        }\r\n\r\n        boundingSphere = BoundingSphere.fromRectangle3D(rectangle, ellipsoid, surfaceHeight);\r\n    }\r\n\r\n    if (!vertexFormat.position) {\r\n        delete geometry.attributes.position;\r\n    }\r\n\r\n    return new Geometry({\r\n        attributes: geometry.attributes,\r\n        indices: geometry.indices,\r\n        primitiveType: geometry.primitiveType,\r\n        boundingSphere: boundingSphere,\r\n        offsetAttribute: rectangleGeometry._offsetAttribute\r\n    });\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nRectangleGeometry.createShadowVolume = function (rectangleGeometry, minHeightFunc, maxHeightFunc) {\r\n    var granularity = rectangleGeometry._granularity;\r\n    var ellipsoid = rectangleGeometry._ellipsoid;\r\n\r\n    var minHeight = minHeightFunc(granularity, ellipsoid);\r\n    var maxHeight = maxHeightFunc(granularity, ellipsoid);\r\n\r\n    return new RectangleGeometry({\r\n        rectangle: rectangleGeometry._rectangle,\r\n        rotation: rectangleGeometry._rotation,\r\n        ellipsoid: ellipsoid,\r\n        stRotation: rectangleGeometry._stRotation,\r\n        granularity: granularity,\r\n        extrudedHeight: maxHeight,\r\n        height: minHeight,\r\n        vertexFormat: VertexFormat.POSITION_ONLY,\r\n        shadowVolume: true\r\n    });\r\n};\r\n\r\nvar unrotatedTextureRectangleScratch = new Rectangle();\r\nvar points2DScratch = [new Cartesian2(), new Cartesian2(), new Cartesian2()];\r\nvar rotation2DScratch = new Matrix2();\r\nvar rectangleCenterScratch = new Cartographic();\r\n\r\nfunction textureCoordinateRotationPoints(rectangleGeometry) {\r\n    if (rectangleGeometry._stRotation === 0.0) {\r\n        return [0, 0, 0, 1, 1, 0];\r\n    }\r\n\r\n    var rectangle = Rectangle.clone(rectangleGeometry._rectangle, unrotatedTextureRectangleScratch);\r\n    var granularity = rectangleGeometry._granularity;\r\n    var ellipsoid = rectangleGeometry._ellipsoid;\r\n\r\n    // Rotate to align the texture coordinates with ENU\r\n    var rotation = rectangleGeometry._rotation - rectangleGeometry._stRotation;\r\n\r\n    var unrotatedTextureRectangle = computeRectangle(rectangle, granularity, rotation, ellipsoid, unrotatedTextureRectangleScratch);\r\n\r\n    // Assume a computed \"east-north\" texture coordinate system based on spherical or planar tricks, bounded by `boundingRectangle`.\r\n    // The \"desired\" texture coordinate system forms an oriented rectangle (un-oriented computed) around the geometry that completely and tightly bounds it.\r\n    // We want to map from the \"east-north\" texture coordinate system into the \"desired\" system using a pair of lines (analagous planes in 2D)\r\n    // Compute 3 corners of the \"desired\" texture coordinate system in \"east-north\" texture space by the following in cartographic space:\r\n    // - rotate 3 of the corners in unrotatedTextureRectangle by stRotation around the center of the bounding rectangle\r\n    // - apply the \"east-north\" system's normalization formula to the rotated cartographics, even though this is likely to produce values outside [0-1].\r\n    // This gives us a set of points in the \"east-north\" texture coordinate system that can be used to map \"east-north\" texture coordinates to \"desired.\"\r\n\r\n    var points2D = points2DScratch;\r\n    points2D[0].x = unrotatedTextureRectangle.west;\r\n    points2D[0].y = unrotatedTextureRectangle.south;\r\n\r\n    points2D[1].x = unrotatedTextureRectangle.west;\r\n    points2D[1].y = unrotatedTextureRectangle.north;\r\n\r\n    points2D[2].x = unrotatedTextureRectangle.east;\r\n    points2D[2].y = unrotatedTextureRectangle.south;\r\n\r\n    var boundingRectangle = rectangleGeometry.rectangle;\r\n    var toDesiredInComputed = Matrix2.fromRotation(rectangleGeometry._stRotation, rotation2DScratch);\r\n    var boundingRectangleCenter = Rectangle.center(boundingRectangle, rectangleCenterScratch);\r\n\r\n    for (var i = 0; i < 3; ++i) {\r\n        var point2D = points2D[i];\r\n        point2D.x -= boundingRectangleCenter.longitude;\r\n        point2D.y -= boundingRectangleCenter.latitude;\r\n        Matrix2.multiplyByVector(toDesiredInComputed, point2D, point2D);\r\n        point2D.x += boundingRectangleCenter.longitude;\r\n        point2D.y += boundingRectangleCenter.latitude;\r\n\r\n        // Convert point into east-north texture coordinate space\r\n        point2D.x = (point2D.x - boundingRectangle.west) / boundingRectangle.width;\r\n        point2D.y = (point2D.y - boundingRectangle.south) / boundingRectangle.height;\r\n    }\r\n\r\n    var minXYCorner = points2D[0];\r\n    var maxYCorner = points2D[1];\r\n    var maxXCorner = points2D[2];\r\n    var result = new Array(6);\r\n    Cartesian2.pack(minXYCorner, result);\r\n    Cartesian2.pack(maxYCorner, result, 2);\r\n    Cartesian2.pack(maxXCorner, result, 4);\r\n    return result;\r\n}\r\n\r\nObject.defineProperties(RectangleGeometry.prototype, {\r\n    /**\r\n     * @private\r\n     */\r\n    rectangle: {\r\n        get: function () {\r\n            if (!defined(this._rotatedRectangle)) {\r\n                this._rotatedRectangle = computeRectangle(this._rectangle, this._granularity, this._rotation, this._ellipsoid);\r\n            }\r\n            return this._rotatedRectangle;\r\n        }\r\n    },\r\n    /**\r\n     * For remapping texture coordinates when rendering RectangleGeometries as GroundPrimitives.\r\n     * This version permits skew in textures by computing offsets directly in cartographic space and\r\n     * more accurately approximates rendering RectangleGeometries with height as standard Primitives.\r\n     * @see Geometry#_textureCoordinateRotationPoints\r\n     * @private\r\n     */\r\n    textureCoordinateRotationPoints: {\r\n        get: function () {\r\n            if (!defined(this._textureCoordinateRotationPoints)) {\r\n                this._textureCoordinateRotationPoints = textureCoordinateRotationPoints(this);\r\n            }\r\n            return this._textureCoordinateRotationPoints;\r\n        }\r\n    }\r\n});\r\nexport default RectangleGeometry;\r\n","import defined from '../Core/defined.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\nimport Rectangle from '../Core/Rectangle.js';\r\nimport RectangleGeometry from '../Core/RectangleGeometry.js';\r\n\r\nfunction createRectangleGeometry(rectangleGeometry, offset) {\r\n    if (defined(offset)) {\r\n        rectangleGeometry = RectangleGeometry.unpack(rectangleGeometry, offset);\r\n    }\r\n    rectangleGeometry._ellipsoid = Ellipsoid.clone(rectangleGeometry._ellipsoid);\r\n    rectangleGeometry._rectangle = Rectangle.clone(rectangleGeometry._rectangle);\r\n    return RectangleGeometry.createGeometry(rectangleGeometry);\r\n}\r\nexport default createRectangleGeometry;\r\n"],"names":["Cartesian3","Rectangle","Cartesian2","BoundingSphere","Geometry","GeometryAttributes","PrimitiveType","GeometryAttribute","ComponentDatatype","Matrix3","CesiumMath","RectangleGeometryLibrary","IndexDatatype","VertexFormat","PolygonPipeline","defined","GeometryOffsetAttribute","arrayFill","GeometryPipeline","GeometryInstance","Cartographic","defaultValue","Check","DeveloperError","Ellipsoid","Quaternion","Matrix2"],"mappings":"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"}