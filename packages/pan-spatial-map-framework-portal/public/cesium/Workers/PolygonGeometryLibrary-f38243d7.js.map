{"version":3,"file":"PolygonGeometryLibrary-f38243d7.js","sources":["../../../../Source/Core/Queue.js","../../../../Source/Core/PolygonGeometryLibrary.js"],"sourcesContent":["/**\r\n * A queue that can enqueue items at the end, and dequeue items from the front.\r\n *\r\n * @alias Queue\r\n * @constructor\r\n */\r\nfunction Queue() {\r\n    this._array = [];\r\n    this._offset = 0;\r\n    this._length = 0;\r\n}\r\n\r\nObject.defineProperties(Queue.prototype, {\r\n    /**\r\n     * The length of the queue.\r\n     *\r\n     * @memberof Queue.prototype\r\n     *\r\n     * @type {Number}\r\n     * @readonly\r\n     */\r\n    length: {\r\n        get: function () {\r\n            return this._length;\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Enqueues the specified item.\r\n *\r\n * @param {*} item The item to enqueue.\r\n */\r\nQueue.prototype.enqueue = function (item) {\r\n    this._array.push(item);\r\n    this._length++;\r\n};\r\n\r\n/**\r\n * Dequeues an item.  Returns undefined if the queue is empty.\r\n *\r\n * @returns {*} The the dequeued item.\r\n */\r\nQueue.prototype.dequeue = function () {\r\n    if (this._length === 0) {\r\n        return undefined;\r\n    }\r\n\r\n    var array = this._array;\r\n    var offset = this._offset;\r\n    var item = array[offset];\r\n    array[offset] = undefined;\r\n\r\n    offset++;\r\n    if (offset > 10 && offset * 2 > array.length) {\r\n        //compact array\r\n        this._array = array.slice(offset);\r\n        offset = 0;\r\n    }\r\n\r\n    this._offset = offset;\r\n    this._length--;\r\n\r\n    return item;\r\n};\r\n\r\n/**\r\n * Returns the item at the front of the queue.  Returns undefined if the queue is empty.\r\n *\r\n * @returns {*} The item at the front of the queue.\r\n */\r\nQueue.prototype.peek = function () {\r\n    if (this._length === 0) {\r\n        return undefined;\r\n    }\r\n\r\n    return this._array[this._offset];\r\n};\r\n\r\n/**\r\n * Check whether this queue contains the specified item.\r\n *\r\n * @param {*} item The item to search for.\r\n */\r\nQueue.prototype.contains = function (item) {\r\n    return this._array.indexOf(item) !== -1;\r\n};\r\n\r\n/**\r\n * Remove all items from the queue.\r\n */\r\nQueue.prototype.clear = function () {\r\n    this._array.length = this._offset = this._length = 0;\r\n};\r\n\r\n/**\r\n * Sort the items in the queue in-place.\r\n *\r\n * @param {Queue.Comparator} compareFunction A function that defines the sort order.\r\n */\r\nQueue.prototype.sort = function (compareFunction) {\r\n    if (this._offset > 0) {\r\n        //compact array\r\n        this._array = this._array.slice(this._offset);\r\n        this._offset = 0;\r\n    }\r\n\r\n    this._array.sort(compareFunction);\r\n};\r\n\r\n/**\r\n * A function used to compare two items while sorting a queue.\r\n * @callback Queue.Comparator\r\n *\r\n * @param {*} a An item in the array.\r\n * @param {*} b An item in the array.\r\n * @returns {Number} Returns a negative value if <code>a</code> is less than <code>b</code>,\r\n *          a positive value if <code>a</code> is greater than <code>b</code>, or\r\n *          0 if <code>a</code> is equal to <code>b</code>.\r\n *\r\n * @example\r\n * function compareNumbers(a, b) {\r\n *     return a - b;\r\n * }\r\n */\r\nexport default Queue;\r\n","import ArcType from './ArcType.js';\r\nimport arrayRemoveDuplicates from './arrayRemoveDuplicates.js';\r\nimport Cartesian2 from './Cartesian2.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Cartographic from './Cartographic.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport EllipsoidRhumbLine from './EllipsoidRhumbLine.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport GeometryPipeline from './GeometryPipeline.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport CesiumMath from './Math.js';\r\nimport Matrix3 from './Matrix3.js';\r\nimport PolygonPipeline from './PolygonPipeline.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\nimport Quaternion from './Quaternion.js';\r\nimport Queue from './Queue.js';\r\nimport WindingOrder from './WindingOrder.js';\r\n\r\n/**\r\n * @private\r\n */\r\nvar PolygonGeometryLibrary = {};\r\n\r\nPolygonGeometryLibrary.computeHierarchyPackedLength = function (polygonHierarchy) {\r\n    var numComponents = 0;\r\n    var stack = [polygonHierarchy];\r\n    while (stack.length > 0) {\r\n        var hierarchy = stack.pop();\r\n        if (!defined(hierarchy)) {\r\n            continue;\r\n        }\r\n\r\n        numComponents += 2;\r\n\r\n        var positions = hierarchy.positions;\r\n        var holes = hierarchy.holes;\r\n\r\n        if (defined(positions)) {\r\n            numComponents += positions.length * Cartesian3.packedLength;\r\n        }\r\n\r\n        if (defined(holes)) {\r\n            var length = holes.length;\r\n            for (var i = 0; i < length; ++i) {\r\n                stack.push(holes[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    return numComponents;\r\n};\r\n\r\nPolygonGeometryLibrary.packPolygonHierarchy = function (polygonHierarchy, array, startingIndex) {\r\n    var stack = [polygonHierarchy];\r\n    while (stack.length > 0) {\r\n        var hierarchy = stack.pop();\r\n        if (!defined(hierarchy)) {\r\n            continue;\r\n        }\r\n\r\n        var positions = hierarchy.positions;\r\n        var holes = hierarchy.holes;\r\n\r\n        array[startingIndex++] = defined(positions) ? positions.length : 0;\r\n        array[startingIndex++] = defined(holes) ? holes.length : 0;\r\n\r\n        if (defined(positions)) {\r\n            var positionsLength = positions.length;\r\n            for (var i = 0; i < positionsLength; ++i, startingIndex += 3) {\r\n                Cartesian3.pack(positions[i], array, startingIndex);\r\n            }\r\n        }\r\n\r\n        if (defined(holes)) {\r\n            var holesLength = holes.length;\r\n            for (var j = 0; j < holesLength; ++j) {\r\n                stack.push(holes[j]);\r\n            }\r\n        }\r\n    }\r\n\r\n    return startingIndex;\r\n};\r\n\r\nPolygonGeometryLibrary.unpackPolygonHierarchy = function (array, startingIndex) {\r\n    var positionsLength = array[startingIndex++];\r\n    var holesLength = array[startingIndex++];\r\n\r\n    var positions = new Array(positionsLength);\r\n    var holes = holesLength > 0 ? new Array(holesLength) : undefined;\r\n\r\n    for (var i = 0; i < positionsLength; ++i, startingIndex += Cartesian3.packedLength) {\r\n        positions[i] = Cartesian3.unpack(array, startingIndex);\r\n    }\r\n\r\n    for (var j = 0; j < holesLength; ++j) {\r\n        holes[j] = PolygonGeometryLibrary.unpackPolygonHierarchy(array, startingIndex);\r\n        startingIndex = holes[j].startingIndex;\r\n        delete holes[j].startingIndex;\r\n    }\r\n\r\n    return {\r\n        positions: positions,\r\n        holes: holes,\r\n        startingIndex: startingIndex\r\n    };\r\n};\r\n\r\nvar distanceScratch = new Cartesian3();\r\nfunction getPointAtDistance(p0, p1, distance, length) {\r\n    Cartesian3.subtract(p1, p0, distanceScratch);\r\n    Cartesian3.multiplyByScalar(distanceScratch, distance / length, distanceScratch);\r\n    Cartesian3.add(p0, distanceScratch, distanceScratch);\r\n    return [distanceScratch.x, distanceScratch.y, distanceScratch.z];\r\n}\r\n\r\nPolygonGeometryLibrary.subdivideLineCount = function (p0, p1, minDistance) {\r\n    var distance = Cartesian3.distance(p0, p1);\r\n    var n = distance / minDistance;\r\n    var countDivide = Math.max(0, Math.ceil(CesiumMath.log2(n)));\r\n    return Math.pow(2, countDivide);\r\n};\r\n\r\nvar scratchCartographic0 = new Cartographic();\r\nvar scratchCartographic1 = new Cartographic();\r\nvar scratchCartographic2 = new Cartographic();\r\nvar scratchCartesian0 = new Cartesian3();\r\nPolygonGeometryLibrary.subdivideRhumbLineCount = function (ellipsoid, p0, p1, minDistance) {\r\n    var c0 = ellipsoid.cartesianToCartographic(p0, scratchCartographic0);\r\n    var c1 = ellipsoid.cartesianToCartographic(p1, scratchCartographic1);\r\n    var rhumb = new EllipsoidRhumbLine(c0, c1, ellipsoid);\r\n    var n = rhumb.surfaceDistance / minDistance;\r\n    var countDivide = Math.max(0, Math.ceil(CesiumMath.log2(n)));\r\n    return Math.pow(2, countDivide);\r\n};\r\n\r\nPolygonGeometryLibrary.subdivideLine = function (p0, p1, minDistance, result) {\r\n    var numVertices = PolygonGeometryLibrary.subdivideLineCount(p0, p1, minDistance);\r\n    var length = Cartesian3.distance(p0, p1);\r\n    var distanceBetweenVertices = length / numVertices;\r\n\r\n    if (!defined(result)) {\r\n        result = [];\r\n    }\r\n\r\n    var positions = result;\r\n    positions.length = numVertices * 3;\r\n\r\n    var index = 0;\r\n    for (var i = 0; i < numVertices; i++) {\r\n        var p = getPointAtDistance(p0, p1, i * distanceBetweenVertices, length);\r\n        positions[index++] = p[0];\r\n        positions[index++] = p[1];\r\n        positions[index++] = p[2];\r\n    }\r\n\r\n    return positions;\r\n};\r\n\r\nPolygonGeometryLibrary.subdivideRhumbLine = function (ellipsoid, p0, p1, minDistance, result) {\r\n    var c0 = ellipsoid.cartesianToCartographic(p0, scratchCartographic0);\r\n    var c1 = ellipsoid.cartesianToCartographic(p1, scratchCartographic1);\r\n    var rhumb = new EllipsoidRhumbLine(c0, c1, ellipsoid);\r\n\r\n    var n = rhumb.surfaceDistance / minDistance;\r\n    var countDivide = Math.max(0, Math.ceil(CesiumMath.log2(n)));\r\n    var numVertices = Math.pow(2, countDivide);\r\n    var distanceBetweenVertices = rhumb.surfaceDistance / numVertices;\r\n\r\n    if (!defined(result)) {\r\n        result = [];\r\n    }\r\n\r\n    var positions = result;\r\n    positions.length = numVertices * 3;\r\n\r\n    var index = 0;\r\n    for (var i = 0; i < numVertices; i++) {\r\n        var c = rhumb.interpolateUsingSurfaceDistance(i * distanceBetweenVertices, scratchCartographic2);\r\n        var p = ellipsoid.cartographicToCartesian(c, scratchCartesian0);\r\n        positions[index++] = p.x;\r\n        positions[index++] = p.y;\r\n        positions[index++] = p.z;\r\n    }\r\n\r\n    return positions;\r\n};\r\n\r\nvar scaleToGeodeticHeightN1 = new Cartesian3();\r\nvar scaleToGeodeticHeightN2 = new Cartesian3();\r\nvar scaleToGeodeticHeightP1 = new Cartesian3();\r\nvar scaleToGeodeticHeightP2 = new Cartesian3();\r\n\r\nPolygonGeometryLibrary.scaleToGeodeticHeightExtruded = function (geometry, maxHeight, minHeight, ellipsoid, perPositionHeight) {\r\n    ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\r\n\r\n    var n1 = scaleToGeodeticHeightN1;\r\n    var n2 = scaleToGeodeticHeightN2;\r\n    var p = scaleToGeodeticHeightP1;\r\n    var p2 = scaleToGeodeticHeightP2;\r\n\r\n    if (defined(geometry) && defined(geometry.attributes) && defined(geometry.attributes.position)) {\r\n        var positions = geometry.attributes.position.values;\r\n        var length = positions.length / 2;\r\n\r\n        for (var i = 0; i < length; i += 3) {\r\n            Cartesian3.fromArray(positions, i, p);\r\n\r\n            ellipsoid.geodeticSurfaceNormal(p, n1);\r\n            p2 = ellipsoid.scaleToGeodeticSurface(p, p2);\r\n            n2 = Cartesian3.multiplyByScalar(n1, minHeight, n2);\r\n            n2 = Cartesian3.add(p2, n2, n2);\r\n            positions[i + length] = n2.x;\r\n            positions[i + 1 + length] = n2.y;\r\n            positions[i + 2 + length] = n2.z;\r\n\r\n            if (perPositionHeight) {\r\n                p2 = Cartesian3.clone(p, p2);\r\n            }\r\n            n2 = Cartesian3.multiplyByScalar(n1, maxHeight, n2);\r\n            n2 = Cartesian3.add(p2, n2, n2);\r\n            positions[i] = n2.x;\r\n            positions[i + 1] = n2.y;\r\n            positions[i + 2] = n2.z;\r\n        }\r\n    }\r\n    return geometry;\r\n};\r\n\r\nPolygonGeometryLibrary.polygonOutlinesFromHierarchy = function (polygonHierarchy, scaleToEllipsoidSurface, ellipsoid) {\r\n    // create from a polygon hierarchy\r\n    // Algorithm adapted from http://www.geometrictools.com/Documentation/TriangulationByEarClipping.pdf\r\n    var polygons = [];\r\n    var queue = new Queue();\r\n    queue.enqueue(polygonHierarchy);\r\n    var i;\r\n    var j;\r\n    var length;\r\n    while (queue.length !== 0) {\r\n        var outerNode = queue.dequeue();\r\n        var outerRing = outerNode.positions;\r\n        if (scaleToEllipsoidSurface) {\r\n            length = outerRing.length;\r\n            for (i = 0; i < length; i++) {\r\n                ellipsoid.scaleToGeodeticSurface(outerRing[i], outerRing[i]);\r\n            }\r\n        }\r\n        outerRing = arrayRemoveDuplicates(outerRing, Cartesian3.equalsEpsilon, true);\r\n        if (outerRing.length < 3) {\r\n            continue;\r\n        }\r\n\r\n        var numChildren = outerNode.holes ? outerNode.holes.length : 0;\r\n        // The outer polygon contains inner polygons\r\n        for (i = 0; i < numChildren; i++) {\r\n            var hole = outerNode.holes[i];\r\n            var holePositions = hole.positions;\r\n            if (scaleToEllipsoidSurface) {\r\n                length = holePositions.length;\r\n                for (j = 0; j < length; ++j) {\r\n                    ellipsoid.scaleToGeodeticSurface(holePositions[j], holePositions[j]);\r\n                }\r\n            }\r\n            holePositions = arrayRemoveDuplicates(holePositions, Cartesian3.equalsEpsilon, true);\r\n            if (holePositions.length < 3) {\r\n                continue;\r\n            }\r\n            polygons.push(holePositions);\r\n\r\n            var numGrandchildren = 0;\r\n            if (defined(hole.holes)) {\r\n                numGrandchildren = hole.holes.length;\r\n            }\r\n\r\n            for (j = 0; j < numGrandchildren; j++) {\r\n                queue.enqueue(hole.holes[j]);\r\n            }\r\n        }\r\n\r\n        polygons.push(outerRing);\r\n    }\r\n\r\n    return polygons;\r\n};\r\n\r\nPolygonGeometryLibrary.polygonsFromHierarchy = function (polygonHierarchy, projectPointsTo2D, scaleToEllipsoidSurface, ellipsoid) {\r\n    // create from a polygon hierarchy\r\n    // Algorithm adapted from http://www.geometrictools.com/Documentation/TriangulationByEarClipping.pdf\r\n    var hierarchy = [];\r\n    var polygons = [];\r\n\r\n    var queue = new Queue();\r\n    queue.enqueue(polygonHierarchy);\r\n\r\n    while (queue.length !== 0) {\r\n        var outerNode = queue.dequeue();\r\n        var outerRing = outerNode.positions;\r\n        var holes = outerNode.holes;\r\n\r\n        var i;\r\n        var length;\r\n        if (scaleToEllipsoidSurface) {\r\n            length = outerRing.length;\r\n            for (i = 0; i < length; i++) {\r\n                ellipsoid.scaleToGeodeticSurface(outerRing[i], outerRing[i]);\r\n            }\r\n        }\r\n\r\n        outerRing = arrayRemoveDuplicates(outerRing, Cartesian3.equalsEpsilon, true);\r\n        if (outerRing.length < 3) {\r\n            continue;\r\n        }\r\n\r\n        var positions2D = projectPointsTo2D(outerRing);\r\n        if (!defined(positions2D)) {\r\n            continue;\r\n        }\r\n        var holeIndices = [];\r\n\r\n        var originalWindingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\r\n        if (originalWindingOrder === WindingOrder.CLOCKWISE) {\r\n            positions2D.reverse();\r\n            outerRing = outerRing.slice().reverse();\r\n        }\r\n\r\n        var positions = outerRing.slice();\r\n        var numChildren = defined(holes) ? holes.length : 0;\r\n        var polygonHoles = [];\r\n        var j;\r\n\r\n        for (i = 0; i < numChildren; i++) {\r\n            var hole = holes[i];\r\n            var holePositions = hole.positions;\r\n            if (scaleToEllipsoidSurface) {\r\n                length = holePositions.length;\r\n                for (j = 0; j < length; ++j) {\r\n                    ellipsoid.scaleToGeodeticSurface(holePositions[j], holePositions[j]);\r\n                }\r\n            }\r\n\r\n            holePositions = arrayRemoveDuplicates(holePositions, Cartesian3.equalsEpsilon, true);\r\n            if (holePositions.length < 3) {\r\n                continue;\r\n            }\r\n\r\n            var holePositions2D = projectPointsTo2D(holePositions);\r\n            if (!defined(holePositions2D)) {\r\n                continue;\r\n            }\r\n\r\n            originalWindingOrder = PolygonPipeline.computeWindingOrder2D(holePositions2D);\r\n            if (originalWindingOrder === WindingOrder.CLOCKWISE) {\r\n                holePositions2D.reverse();\r\n                holePositions = holePositions.slice().reverse();\r\n            }\r\n\r\n            polygonHoles.push(holePositions);\r\n            holeIndices.push(positions.length);\r\n            positions = positions.concat(holePositions);\r\n            positions2D = positions2D.concat(holePositions2D);\r\n\r\n            var numGrandchildren = 0;\r\n            if (defined(hole.holes)) {\r\n                numGrandchildren = hole.holes.length;\r\n            }\r\n\r\n            for (j = 0; j < numGrandchildren; j++) {\r\n                queue.enqueue(hole.holes[j]);\r\n            }\r\n        }\r\n\r\n        hierarchy.push({\r\n            outerRing: outerRing,\r\n            holes: polygonHoles\r\n        });\r\n        polygons.push({\r\n            positions: positions,\r\n            positions2D: positions2D,\r\n            holes: holeIndices\r\n        });\r\n    }\r\n\r\n    return {\r\n        hierarchy: hierarchy,\r\n        polygons: polygons\r\n    };\r\n};\r\n\r\nvar computeBoundingRectangleCartesian2 = new Cartesian2();\r\nvar computeBoundingRectangleCartesian3 = new Cartesian3();\r\nvar computeBoundingRectangleQuaternion = new Quaternion();\r\nvar computeBoundingRectangleMatrix3 = new Matrix3();\r\nPolygonGeometryLibrary.computeBoundingRectangle = function (planeNormal, projectPointTo2D, positions, angle, result) {\r\n    var rotation = Quaternion.fromAxisAngle(planeNormal, angle, computeBoundingRectangleQuaternion);\r\n    var textureMatrix = Matrix3.fromQuaternion(rotation, computeBoundingRectangleMatrix3);\r\n\r\n    var minX = Number.POSITIVE_INFINITY;\r\n    var maxX = Number.NEGATIVE_INFINITY;\r\n    var minY = Number.POSITIVE_INFINITY;\r\n    var maxY = Number.NEGATIVE_INFINITY;\r\n\r\n    var length = positions.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        var p = Cartesian3.clone(positions[i], computeBoundingRectangleCartesian3);\r\n        Matrix3.multiplyByVector(textureMatrix, p, p);\r\n        var st = projectPointTo2D(p, computeBoundingRectangleCartesian2);\r\n\r\n        if (defined(st)) {\r\n            minX = Math.min(minX, st.x);\r\n            maxX = Math.max(maxX, st.x);\r\n\r\n            minY = Math.min(minY, st.y);\r\n            maxY = Math.max(maxY, st.y);\r\n        }\r\n    }\r\n\r\n    result.x = minX;\r\n    result.y = minY;\r\n    result.width = maxX - minX;\r\n    result.height = maxY - minY;\r\n    return result;\r\n};\r\n\r\nPolygonGeometryLibrary.createGeometryFromPositions = function (ellipsoid, polygon, granularity, perPositionHeight, vertexFormat, arcType) {\r\n    var indices = PolygonPipeline.triangulate(polygon.positions2D, polygon.holes);\r\n\r\n    /* If polygon is completely unrenderable, just use the first three vertices */\r\n    if (indices.length < 3) {\r\n        indices = [0, 1, 2];\r\n    }\r\n\r\n    var positions = polygon.positions;\r\n\r\n    if (perPositionHeight) {\r\n        var length = positions.length;\r\n        var flattenedPositions = new Array(length * 3);\r\n        var index = 0;\r\n        for (var i = 0; i < length; i++) {\r\n            var p = positions[i];\r\n            flattenedPositions[index++] = p.x;\r\n            flattenedPositions[index++] = p.y;\r\n            flattenedPositions[index++] = p.z;\r\n        }\r\n        var geometry = new Geometry({\r\n            attributes: {\r\n                position: new GeometryAttribute({\r\n                    componentDatatype: ComponentDatatype.DOUBLE,\r\n                    componentsPerAttribute: 3,\r\n                    values: flattenedPositions\r\n                })\r\n            },\r\n            indices: indices,\r\n            primitiveType: PrimitiveType.TRIANGLES\r\n        });\r\n\r\n        if (vertexFormat.normal) {\r\n            return GeometryPipeline.computeNormal(geometry);\r\n        }\r\n\r\n        return geometry;\r\n    }\r\n\r\n    if (arcType === ArcType.GEODESIC) {\r\n        return PolygonPipeline.computeSubdivision(ellipsoid, positions, indices, granularity);\r\n    } else if (arcType === ArcType.RHUMB) {\r\n        return PolygonPipeline.computeRhumbLineSubdivision(ellipsoid, positions, indices, granularity);\r\n    }\r\n};\r\n\r\nvar computeWallIndicesSubdivided = [];\r\nvar p1Scratch = new Cartesian3();\r\nvar p2Scratch = new Cartesian3();\r\n\r\nPolygonGeometryLibrary.computeWallGeometry = function (positions, ellipsoid, granularity, perPositionHeight, arcType) {\r\n    var edgePositions;\r\n    var topEdgeLength;\r\n    var i;\r\n    var p1;\r\n    var p2;\r\n\r\n    var length = positions.length;\r\n    var index = 0;\r\n\r\n    if (!perPositionHeight) {\r\n        var minDistance = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\r\n\r\n        var numVertices = 0;\r\n        if (arcType === ArcType.GEODESIC) {\r\n            for (i = 0; i < length; i++) {\r\n                numVertices += PolygonGeometryLibrary.subdivideLineCount(positions[i], positions[(i + 1) % length], minDistance);\r\n            }\r\n        } else if (arcType === ArcType.RHUMB) {\r\n            for (i = 0; i < length; i++) {\r\n                numVertices += PolygonGeometryLibrary.subdivideRhumbLineCount(ellipsoid, positions[i], positions[(i + 1) % length], minDistance);\r\n            }\r\n        }\r\n\r\n        topEdgeLength = (numVertices + length) * 3;\r\n        edgePositions = new Array(topEdgeLength * 2);\r\n        for (i = 0; i < length; i++) {\r\n            p1 = positions[i];\r\n            p2 = positions[(i + 1) % length];\r\n\r\n            var tempPositions;\r\n            if (arcType === ArcType.GEODESIC) {\r\n                tempPositions = PolygonGeometryLibrary.subdivideLine(p1, p2, minDistance, computeWallIndicesSubdivided);\r\n            } else if (arcType === ArcType.RHUMB) {\r\n                tempPositions = PolygonGeometryLibrary.subdivideRhumbLine(ellipsoid, p1, p2, minDistance, computeWallIndicesSubdivided);\r\n            }\r\n            var tempPositionsLength = tempPositions.length;\r\n            for (var j = 0; j < tempPositionsLength; ++j, ++index) {\r\n                edgePositions[index] = tempPositions[j];\r\n                edgePositions[index + topEdgeLength] = tempPositions[j];\r\n            }\r\n\r\n            edgePositions[index] = p2.x;\r\n            edgePositions[index + topEdgeLength] = p2.x;\r\n            ++index;\r\n\r\n            edgePositions[index] = p2.y;\r\n            edgePositions[index + topEdgeLength] = p2.y;\r\n            ++index;\r\n\r\n            edgePositions[index] = p2.z;\r\n            edgePositions[index + topEdgeLength] = p2.z;\r\n            ++index;\r\n        }\r\n    } else {\r\n        topEdgeLength = length * 3 * 2;\r\n        edgePositions = new Array(topEdgeLength * 2);\r\n        for (i = 0; i < length; i++) {\r\n            p1 = positions[i];\r\n            p2 = positions[(i + 1) % length];\r\n            edgePositions[index] = edgePositions[index + topEdgeLength] = p1.x;\r\n            ++index;\r\n            edgePositions[index] = edgePositions[index + topEdgeLength] = p1.y;\r\n            ++index;\r\n            edgePositions[index] = edgePositions[index + topEdgeLength] = p1.z;\r\n            ++index;\r\n            edgePositions[index] = edgePositions[index + topEdgeLength] = p2.x;\r\n            ++index;\r\n            edgePositions[index] = edgePositions[index + topEdgeLength] = p2.y;\r\n            ++index;\r\n            edgePositions[index] = edgePositions[index + topEdgeLength] = p2.z;\r\n            ++index;\r\n        }\r\n    }\r\n\r\n    length = edgePositions.length;\r\n    var indices = IndexDatatype.createTypedArray(length / 3, length - positions.length * 6);\r\n    var edgeIndex = 0;\r\n    length /= 6;\r\n\r\n    for (i = 0; i < length; i++) {\r\n        var UL = i;\r\n        var UR = UL + 1;\r\n        var LL = UL + length;\r\n        var LR = LL + 1;\r\n\r\n        p1 = Cartesian3.fromArray(edgePositions, UL * 3, p1Scratch);\r\n        p2 = Cartesian3.fromArray(edgePositions, UR * 3, p2Scratch);\r\n        if (Cartesian3.equalsEpsilon(p1, p2, CesiumMath.EPSILON10, CesiumMath.EPSILON10)) {\r\n            //skip corner\r\n            continue;\r\n        }\r\n\r\n        indices[edgeIndex++] = UL;\r\n        indices[edgeIndex++] = LL;\r\n        indices[edgeIndex++] = UR;\r\n        indices[edgeIndex++] = UR;\r\n        indices[edgeIndex++] = LL;\r\n        indices[edgeIndex++] = LR;\r\n    }\r\n\r\n    return new Geometry({\r\n        attributes: new GeometryAttributes({\r\n            position: new GeometryAttribute({\r\n                componentDatatype: ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute: 3,\r\n                values: edgePositions\r\n            })\r\n        }),\r\n        indices: indices,\r\n        primitiveType: PrimitiveType.TRIANGLES\r\n    });\r\n};\r\nexport default PolygonGeometryLibrary;\r\n"],"names":["defined","Cartesian3","CesiumMath","Cartographic","EllipsoidRhumbLine","defaultValue","Ellipsoid","arrayRemoveDuplicates","PolygonPipeline","WindingOrder","Cartesian2","Quaternion","Matrix3","Geometry","GeometryAttribute","ComponentDatatype","PrimitiveType","GeometryPipeline","ArcType","IndexDatatype","GeometryAttributes"],"mappings":"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"}