{"version":3,"file":"FrustumGeometry-b4c1aa45.js","sources":["../../../../Source/Core/CullingVolume.js","../../../../Source/Core/OrthographicOffCenterFrustum.js","../../../../Source/Core/OrthographicFrustum.js","../../../../Source/Core/PerspectiveOffCenterFrustum.js","../../../../Source/Core/PerspectiveFrustum.js","../../../../Source/Core/FrustumGeometry.js"],"sourcesContent":["import Cartesian3 from './Cartesian3.js';\r\nimport Cartesian4 from './Cartesian4.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport Intersect from './Intersect.js';\r\nimport Plane from './Plane.js';\r\n\r\n/**\r\n * The culling volume defined by planes.\r\n *\r\n * @alias CullingVolume\r\n * @constructor\r\n *\r\n * @param {Cartesian4[]} [planes] An array of clipping planes.\r\n */\r\nfunction CullingVolume(planes) {\r\n    /**\r\n     * Each plane is represented by a Cartesian4 object, where the x, y, and z components\r\n     * define the unit vector normal to the plane, and the w component is the distance of the\r\n     * plane from the origin.\r\n     * @type {Cartesian4[]}\r\n     * @default []\r\n     */\r\n    this.planes = defaultValue(planes, []);\r\n}\r\n\r\nvar faces = [new Cartesian3(), new Cartesian3(), new Cartesian3()];\r\nCartesian3.clone(Cartesian3.UNIT_X, faces[0]);\r\nCartesian3.clone(Cartesian3.UNIT_Y, faces[1]);\r\nCartesian3.clone(Cartesian3.UNIT_Z, faces[2]);\r\n\r\nvar scratchPlaneCenter = new Cartesian3();\r\nvar scratchPlaneNormal = new Cartesian3();\r\nvar scratchPlane = new Plane(new Cartesian3(1.0, 0.0, 0.0), 0.0);\r\n\r\n/**\r\n * Constructs a culling volume from a bounding sphere. Creates six planes that create a box containing the sphere.\r\n * The planes are aligned to the x, y, and z axes in world coordinates.\r\n *\r\n * @param {BoundingSphere} boundingSphere The bounding sphere used to create the culling volume.\r\n * @param {CullingVolume} [result] The object onto which to store the result.\r\n * @returns {CullingVolume} The culling volume created from the bounding sphere.\r\n */\r\nCullingVolume.fromBoundingSphere = function (boundingSphere, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(boundingSphere)) {\r\n        throw new DeveloperError('boundingSphere is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    if (!defined(result)) {\r\n        result = new CullingVolume();\r\n    }\r\n\r\n    var length = faces.length;\r\n    var planes = result.planes;\r\n    planes.length = 2 * length;\r\n\r\n    var center = boundingSphere.center;\r\n    var radius = boundingSphere.radius;\r\n\r\n    var planeIndex = 0;\r\n\r\n    for (var i = 0; i < length; ++i) {\r\n        var faceNormal = faces[i];\r\n\r\n        var plane0 = planes[planeIndex];\r\n        var plane1 = planes[planeIndex + 1];\r\n\r\n        if (!defined(plane0)) {\r\n            plane0 = planes[planeIndex] = new Cartesian4();\r\n        }\r\n        if (!defined(plane1)) {\r\n            plane1 = planes[planeIndex + 1] = new Cartesian4();\r\n        }\r\n\r\n        Cartesian3.multiplyByScalar(faceNormal, -radius, scratchPlaneCenter);\r\n        Cartesian3.add(center, scratchPlaneCenter, scratchPlaneCenter);\r\n\r\n        plane0.x = faceNormal.x;\r\n        plane0.y = faceNormal.y;\r\n        plane0.z = faceNormal.z;\r\n        plane0.w = -Cartesian3.dot(faceNormal, scratchPlaneCenter);\r\n\r\n        Cartesian3.multiplyByScalar(faceNormal, radius, scratchPlaneCenter);\r\n        Cartesian3.add(center, scratchPlaneCenter, scratchPlaneCenter);\r\n\r\n        plane1.x = -faceNormal.x;\r\n        plane1.y = -faceNormal.y;\r\n        plane1.z = -faceNormal.z;\r\n        plane1.w = -Cartesian3.dot(Cartesian3.negate(faceNormal, scratchPlaneNormal), scratchPlaneCenter);\r\n\r\n        planeIndex += 2;\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Determines whether a bounding volume intersects the culling volume.\r\n *\r\n * @param {Object} boundingVolume The bounding volume whose intersection with the culling volume is to be tested.\r\n * @returns {Intersect}  Intersect.OUTSIDE, Intersect.INTERSECTING, or Intersect.INSIDE.\r\n */\r\nCullingVolume.prototype.computeVisibility = function (boundingVolume) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(boundingVolume)) {\r\n        throw new DeveloperError('boundingVolume is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var planes = this.planes;\r\n    var intersecting = false;\r\n    for (var k = 0, len = planes.length; k < len; ++k) {\r\n        var result = boundingVolume.intersectPlane(Plane.fromCartesian4(planes[k], scratchPlane));\r\n        if (result === Intersect.OUTSIDE) {\r\n            return Intersect.OUTSIDE;\r\n        } else if (result === Intersect.INTERSECTING) {\r\n            intersecting = true;\r\n        }\r\n    }\r\n\r\n    return intersecting ? Intersect.INTERSECTING : Intersect.INSIDE;\r\n};\r\n\r\n/**\r\n * Determines whether a bounding volume intersects the culling volume.\r\n *\r\n * @param {Object} boundingVolume The bounding volume whose intersection with the culling volume is to be tested.\r\n * @param {Number} parentPlaneMask A bit mask from the boundingVolume's parent's check against the same culling\r\n *                                 volume, such that if (planeMask & (1 << planeIndex) === 0), for k < 31, then\r\n *                                 the parent (and therefore this) volume is completely inside plane[planeIndex]\r\n *                                 and that plane check can be skipped.\r\n * @returns {Number} A plane mask as described above (which can be applied to this boundingVolume's children).\r\n *\r\n * @private\r\n */\r\nCullingVolume.prototype.computeVisibilityWithPlaneMask = function (boundingVolume, parentPlaneMask) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(boundingVolume)) {\r\n        throw new DeveloperError('boundingVolume is required.');\r\n    }\r\n    if (!defined(parentPlaneMask)) {\r\n        throw new DeveloperError('parentPlaneMask is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    if (parentPlaneMask === CullingVolume.MASK_OUTSIDE || parentPlaneMask === CullingVolume.MASK_INSIDE) {\r\n        // parent is completely outside or completely inside, so this child is as well.\r\n        return parentPlaneMask;\r\n    }\r\n\r\n    // Start with MASK_INSIDE (all zeros) so that after the loop, the return value can be compared with MASK_INSIDE.\r\n    // (Because if there are fewer than 31 planes, the upper bits wont be changed.)\r\n    var mask = CullingVolume.MASK_INSIDE;\r\n\r\n    var planes = this.planes;\r\n    for (var k = 0, len = planes.length; k < len; ++k) {\r\n        // For k greater than 31 (since 31 is the maximum number of INSIDE/INTERSECTING bits we can store), skip the optimization.\r\n        var flag = k < 31 ? 1 << k : 0;\r\n        if (k < 31 && (parentPlaneMask & flag) === 0) {\r\n            // boundingVolume is known to be INSIDE this plane.\r\n            continue;\r\n        }\r\n\r\n        var result = boundingVolume.intersectPlane(Plane.fromCartesian4(planes[k], scratchPlane));\r\n        if (result === Intersect.OUTSIDE) {\r\n            return CullingVolume.MASK_OUTSIDE;\r\n        } else if (result === Intersect.INTERSECTING) {\r\n            mask |= flag;\r\n        }\r\n    }\r\n\r\n    return mask;\r\n};\r\n\r\n/**\r\n * For plane masks (as used in {@link CullingVolume#computeVisibilityWithPlaneMask}), this special value\r\n * represents the case where the object bounding volume is entirely outside the culling volume.\r\n *\r\n * @type {Number}\r\n * @private\r\n */\r\nCullingVolume.MASK_OUTSIDE = 0xffffffff;\r\n\r\n/**\r\n * For plane masks (as used in {@link CullingVolume.prototype.computeVisibilityWithPlaneMask}), this value\r\n * represents the case where the object bounding volume is entirely inside the culling volume.\r\n *\r\n * @type {Number}\r\n * @private\r\n */\r\nCullingVolume.MASK_INSIDE = 0x00000000;\r\n\r\n/**\r\n * For plane masks (as used in {@link CullingVolume.prototype.computeVisibilityWithPlaneMask}), this value\r\n * represents the case where the object bounding volume (may) intersect all planes of the culling volume.\r\n *\r\n * @type {Number}\r\n * @private\r\n */\r\nCullingVolume.MASK_INDETERMINATE = 0x7fffffff;\r\nexport default CullingVolume;\r\n","import Cartesian3 from './Cartesian3.js';\r\nimport Cartesian4 from './Cartesian4.js';\r\nimport CullingVolume from './CullingVolume.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport CesiumMath from './Math.js';\r\nimport Matrix4 from './Matrix4.js';\r\n\r\n/**\r\n * The viewing frustum is defined by 6 planes.\r\n * Each plane is represented by a {@link Cartesian4} object, where the x, y, and z components\r\n * define the unit vector normal to the plane, and the w component is the distance of the\r\n * plane from the origin/camera position.\r\n *\r\n * @alias OrthographicOffCenterFrustum\r\n * @constructor\r\n *\r\n * @param {Object} [options] An object with the following properties:\r\n * @param {Number} [options.left] The left clipping plane distance.\r\n * @param {Number} [options.right] The right clipping plane distance.\r\n * @param {Number} [options.top] The top clipping plane distance.\r\n * @param {Number} [options.bottom] The bottom clipping plane distance.\r\n * @param {Number} [options.near=1.0] The near clipping plane distance.\r\n * @param {Number} [options.far=500000000.0] The far clipping plane distance.\r\n *\r\n * @example\r\n * var maxRadii = ellipsoid.maximumRadius;\r\n *\r\n * var frustum = new Cesium.OrthographicOffCenterFrustum();\r\n * frustum.right = maxRadii * Cesium.Math.PI;\r\n * frustum.left = -c.frustum.right;\r\n * frustum.top = c.frustum.right * (canvas.clientHeight / canvas.clientWidth);\r\n * frustum.bottom = -c.frustum.top;\r\n * frustum.near = 0.01 * maxRadii;\r\n * frustum.far = 50.0 * maxRadii;\r\n */\r\nfunction OrthographicOffCenterFrustum(options) {\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n    /**\r\n     * The left clipping plane.\r\n     * @type {Number}\r\n     * @default undefined\r\n     */\r\n    this.left = options.left;\r\n    this._left = undefined;\r\n\r\n    /**\r\n     * The right clipping plane.\r\n     * @type {Number}\r\n     * @default undefined\r\n     */\r\n    this.right = options.right;\r\n    this._right = undefined;\r\n\r\n    /**\r\n     * The top clipping plane.\r\n     * @type {Number}\r\n     * @default undefined\r\n     */\r\n    this.top = options.top;\r\n    this._top = undefined;\r\n\r\n    /**\r\n     * The bottom clipping plane.\r\n     * @type {Number}\r\n     * @default undefined\r\n     */\r\n    this.bottom = options.bottom;\r\n    this._bottom = undefined;\r\n\r\n    /**\r\n     * The distance of the near plane.\r\n     * @type {Number}\r\n     * @default 1.0\r\n     */\r\n    this.near = defaultValue(options.near, 1.0);\r\n    this._near = this.near;\r\n\r\n    /**\r\n     * The distance of the far plane.\r\n     * @type {Number}\r\n     * @default 500000000.0;\r\n     */\r\n    this.far = defaultValue(options.far, 500000000.0);\r\n    this._far = this.far;\r\n\r\n    this._cullingVolume = new CullingVolume();\r\n    this._orthographicMatrix = new Matrix4();\r\n}\r\n\r\nfunction update(frustum) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(frustum.right) || !defined(frustum.left) || !defined(frustum.top) || !defined(frustum.bottom) || !defined(frustum.near) || !defined(frustum.far)) {\r\n        throw new DeveloperError('right, left, top, bottom, near, or far parameters are not set.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    if (\r\n        frustum.top !== frustum._top ||\r\n        frustum.bottom !== frustum._bottom ||\r\n        frustum.left !== frustum._left ||\r\n        frustum.right !== frustum._right ||\r\n        frustum.near !== frustum._near ||\r\n        frustum.far !== frustum._far\r\n    ) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (frustum.left > frustum.right) {\r\n            throw new DeveloperError('right must be greater than left.');\r\n        }\r\n        if (frustum.bottom > frustum.top) {\r\n            throw new DeveloperError('top must be greater than bottom.');\r\n        }\r\n        if (frustum.near <= 0 || frustum.near > frustum.far) {\r\n            throw new DeveloperError('near must be greater than zero and less than far.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        frustum._left = frustum.left;\r\n        frustum._right = frustum.right;\r\n        frustum._top = frustum.top;\r\n        frustum._bottom = frustum.bottom;\r\n        frustum._near = frustum.near;\r\n        frustum._far = frustum.far;\r\n        frustum._orthographicMatrix = Matrix4.computeOrthographicOffCenter(\r\n            frustum.left,\r\n            frustum.right,\r\n            frustum.bottom,\r\n            frustum.top,\r\n            frustum.near,\r\n            frustum.far,\r\n            frustum._orthographicMatrix\r\n        );\r\n    }\r\n}\r\n\r\nObject.defineProperties(OrthographicOffCenterFrustum.prototype, {\r\n    /**\r\n     * Gets the orthographic projection matrix computed from the view frustum.\r\n     * @memberof OrthographicOffCenterFrustum.prototype\r\n     * @type {Matrix4}\r\n     * @readonly\r\n     */\r\n    projectionMatrix: {\r\n        get: function () {\r\n            update(this);\r\n            return this._orthographicMatrix;\r\n        }\r\n    }\r\n});\r\n\r\nvar getPlanesRight = new Cartesian3();\r\nvar getPlanesNearCenter = new Cartesian3();\r\nvar getPlanesPoint = new Cartesian3();\r\nvar negateScratch = new Cartesian3();\r\n\r\n/**\r\n * Creates a culling volume for this frustum.\r\n *\r\n * @param {Cartesian3} position The eye position.\r\n * @param {Cartesian3} direction The view direction.\r\n * @param {Cartesian3} up The up direction.\r\n * @returns {CullingVolume} A culling volume at the given position and orientation.\r\n *\r\n * @example\r\n * // Check if a bounding volume intersects the frustum.\r\n * var cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\r\n * var intersect = cullingVolume.computeVisibility(boundingVolume);\r\n */\r\nOrthographicOffCenterFrustum.prototype.computeCullingVolume = function (position, direction, up) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(position)) {\r\n        throw new DeveloperError('position is required.');\r\n    }\r\n    if (!defined(direction)) {\r\n        throw new DeveloperError('direction is required.');\r\n    }\r\n    if (!defined(up)) {\r\n        throw new DeveloperError('up is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var planes = this._cullingVolume.planes;\r\n    var t = this.top;\r\n    var b = this.bottom;\r\n    var r = this.right;\r\n    var l = this.left;\r\n    var n = this.near;\r\n    var f = this.far;\r\n\r\n    var right = Cartesian3.cross(direction, up, getPlanesRight);\r\n    Cartesian3.normalize(right, right);\r\n    var nearCenter = getPlanesNearCenter;\r\n    Cartesian3.multiplyByScalar(direction, n, nearCenter);\r\n    Cartesian3.add(position, nearCenter, nearCenter);\r\n\r\n    var point = getPlanesPoint;\r\n\r\n    // Left plane\r\n    Cartesian3.multiplyByScalar(right, l, point);\r\n    Cartesian3.add(nearCenter, point, point);\r\n\r\n    var plane = planes[0];\r\n    if (!defined(plane)) {\r\n        plane = planes[0] = new Cartesian4();\r\n    }\r\n    plane.x = right.x;\r\n    plane.y = right.y;\r\n    plane.z = right.z;\r\n    plane.w = -Cartesian3.dot(right, point);\r\n\r\n    // Right plane\r\n    Cartesian3.multiplyByScalar(right, r, point);\r\n    Cartesian3.add(nearCenter, point, point);\r\n\r\n    plane = planes[1];\r\n    if (!defined(plane)) {\r\n        plane = planes[1] = new Cartesian4();\r\n    }\r\n    plane.x = -right.x;\r\n    plane.y = -right.y;\r\n    plane.z = -right.z;\r\n    plane.w = -Cartesian3.dot(Cartesian3.negate(right, negateScratch), point);\r\n\r\n    // Bottom plane\r\n    Cartesian3.multiplyByScalar(up, b, point);\r\n    Cartesian3.add(nearCenter, point, point);\r\n\r\n    plane = planes[2];\r\n    if (!defined(plane)) {\r\n        plane = planes[2] = new Cartesian4();\r\n    }\r\n    plane.x = up.x;\r\n    plane.y = up.y;\r\n    plane.z = up.z;\r\n    plane.w = -Cartesian3.dot(up, point);\r\n\r\n    // Top plane\r\n    Cartesian3.multiplyByScalar(up, t, point);\r\n    Cartesian3.add(nearCenter, point, point);\r\n\r\n    plane = planes[3];\r\n    if (!defined(plane)) {\r\n        plane = planes[3] = new Cartesian4();\r\n    }\r\n    plane.x = -up.x;\r\n    plane.y = -up.y;\r\n    plane.z = -up.z;\r\n    plane.w = -Cartesian3.dot(Cartesian3.negate(up, negateScratch), point);\r\n\r\n    // Near plane\r\n    plane = planes[4];\r\n    if (!defined(plane)) {\r\n        plane = planes[4] = new Cartesian4();\r\n    }\r\n    plane.x = direction.x;\r\n    plane.y = direction.y;\r\n    plane.z = direction.z;\r\n    plane.w = -Cartesian3.dot(direction, nearCenter);\r\n\r\n    // Far plane\r\n    Cartesian3.multiplyByScalar(direction, f, point);\r\n    Cartesian3.add(position, point, point);\r\n\r\n    plane = planes[5];\r\n    if (!defined(plane)) {\r\n        plane = planes[5] = new Cartesian4();\r\n    }\r\n    plane.x = -direction.x;\r\n    plane.y = -direction.y;\r\n    plane.z = -direction.z;\r\n    plane.w = -Cartesian3.dot(Cartesian3.negate(direction, negateScratch), point);\r\n\r\n    return this._cullingVolume;\r\n};\r\n\r\n/**\r\n * Returns the pixel's width and height in meters.\r\n *\r\n * @param {Number} drawingBufferWidth The width of the drawing buffer.\r\n * @param {Number} drawingBufferHeight The height of the drawing buffer.\r\n * @param {Number} distance The distance to the near plane in meters.\r\n * @param {Number} pixelRatio The scaling factor from pixel space to coordinate space.\r\n * @param {Cartesian2} result The object onto which to store the result.\r\n * @returns {Cartesian2} The modified result parameter or a new instance of {@link Cartesian2} with the pixel's width and height in the x and y properties, respectively.\r\n *\r\n * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\r\n * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\r\n * @exception {DeveloperError} pixelRatio must be greater than zero.\r\n *\r\n * @example\r\n * // Example 1\r\n * // Get the width and height of a pixel.\r\n * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 0.0, scene.pixelRatio, new Cesium.Cartesian2());\r\n */\r\nOrthographicOffCenterFrustum.prototype.getPixelDimensions = function (drawingBufferWidth, drawingBufferHeight, distance, pixelRatio, result) {\r\n    update(this);\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(drawingBufferWidth) || !defined(drawingBufferHeight)) {\r\n        throw new DeveloperError('Both drawingBufferWidth and drawingBufferHeight are required.');\r\n    }\r\n    if (drawingBufferWidth <= 0) {\r\n        throw new DeveloperError('drawingBufferWidth must be greater than zero.');\r\n    }\r\n    if (drawingBufferHeight <= 0) {\r\n        throw new DeveloperError('drawingBufferHeight must be greater than zero.');\r\n    }\r\n    if (!defined(distance)) {\r\n        throw new DeveloperError('distance is required.');\r\n    }\r\n    if (!defined(pixelRatio)) {\r\n        throw new DeveloperError('pixelRatio is required.');\r\n    }\r\n    if (pixelRatio <= 0) {\r\n        throw new DeveloperError('pixelRatio must be greater than zero.');\r\n    }\r\n    if (!defined(result)) {\r\n        throw new DeveloperError('A result object is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var frustumWidth = this.right - this.left;\r\n    var frustumHeight = this.top - this.bottom;\r\n    var pixelWidth = (pixelRatio * frustumWidth) / drawingBufferWidth;\r\n    var pixelHeight = (pixelRatio * frustumHeight) / drawingBufferHeight;\r\n\r\n    result.x = pixelWidth;\r\n    result.y = pixelHeight;\r\n    return result;\r\n};\r\n\r\n/**\r\n * Returns a duplicate of a OrthographicOffCenterFrustum instance.\r\n *\r\n * @param {OrthographicOffCenterFrustum} [result] The object onto which to store the result.\r\n * @returns {OrthographicOffCenterFrustum} The modified result parameter or a new OrthographicOffCenterFrustum instance if one was not provided.\r\n */\r\nOrthographicOffCenterFrustum.prototype.clone = function (result) {\r\n    if (!defined(result)) {\r\n        result = new OrthographicOffCenterFrustum();\r\n    }\r\n\r\n    result.left = this.left;\r\n    result.right = this.right;\r\n    result.top = this.top;\r\n    result.bottom = this.bottom;\r\n    result.near = this.near;\r\n    result.far = this.far;\r\n\r\n    // force update of clone to compute matrices\r\n    result._left = undefined;\r\n    result._right = undefined;\r\n    result._top = undefined;\r\n    result._bottom = undefined;\r\n    result._near = undefined;\r\n    result._far = undefined;\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Compares the provided OrthographicOffCenterFrustum componentwise and returns\r\n * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n *\r\n * @param {OrthographicOffCenterFrustum} [other] The right hand side OrthographicOffCenterFrustum.\r\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n */\r\nOrthographicOffCenterFrustum.prototype.equals = function (other) {\r\n    return (\r\n        defined(other) &&\r\n        other instanceof OrthographicOffCenterFrustum &&\r\n        this.right === other.right &&\r\n        this.left === other.left &&\r\n        this.top === other.top &&\r\n        this.bottom === other.bottom &&\r\n        this.near === other.near &&\r\n        this.far === other.far\r\n    );\r\n};\r\n\r\n/**\r\n * Compares the provided OrthographicOffCenterFrustum componentwise and returns\r\n * <code>true</code> if they pass an absolute or relative tolerance test,\r\n * <code>false</code> otherwise.\r\n *\r\n * @param {OrthographicOffCenterFrustum} other The right hand side OrthographicOffCenterFrustum.\r\n * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\r\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n * @returns {Boolean} <code>true</code> if this and other are within the provided epsilon, <code>false</code> otherwise.\r\n */\r\nOrthographicOffCenterFrustum.prototype.equalsEpsilon = function (other, relativeEpsilon, absoluteEpsilon) {\r\n    return (\r\n        other === this ||\r\n        (defined(other) &&\r\n            other instanceof OrthographicOffCenterFrustum &&\r\n            CesiumMath.equalsEpsilon(this.right, other.right, relativeEpsilon, absoluteEpsilon) &&\r\n            CesiumMath.equalsEpsilon(this.left, other.left, relativeEpsilon, absoluteEpsilon) &&\r\n            CesiumMath.equalsEpsilon(this.top, other.top, relativeEpsilon, absoluteEpsilon) &&\r\n            CesiumMath.equalsEpsilon(this.bottom, other.bottom, relativeEpsilon, absoluteEpsilon) &&\r\n            CesiumMath.equalsEpsilon(this.near, other.near, relativeEpsilon, absoluteEpsilon) &&\r\n            CesiumMath.equalsEpsilon(this.far, other.far, relativeEpsilon, absoluteEpsilon))\r\n    );\r\n};\r\nexport default OrthographicOffCenterFrustum;\r\n","import Check from './Check.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport CesiumMath from './Math.js';\r\nimport OrthographicOffCenterFrustum from './OrthographicOffCenterFrustum.js';\r\n\r\n/**\r\n * The viewing frustum is defined by 6 planes.\r\n * Each plane is represented by a {@link Cartesian4} object, where the x, y, and z components\r\n * define the unit vector normal to the plane, and the w component is the distance of the\r\n * plane from the origin/camera position.\r\n *\r\n * @alias OrthographicFrustum\r\n * @constructor\r\n *\r\n * @param {Object} [options] An object with the following properties:\r\n * @param {Number} [options.width] The width of the frustum in meters.\r\n * @param {Number} [options.aspectRatio] The aspect ratio of the frustum's width to it's height.\r\n * @param {Number} [options.near=1.0] The distance of the near plane.\r\n * @param {Number} [options.far=500000000.0] The distance of the far plane.\r\n *\r\n * @example\r\n * var maxRadii = ellipsoid.maximumRadius;\r\n *\r\n * var frustum = new Cesium.OrthographicFrustum();\r\n * frustum.near = 0.01 * maxRadii;\r\n * frustum.far = 50.0 * maxRadii;\r\n */\r\nfunction OrthographicFrustum(options) {\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n    this._offCenterFrustum = new OrthographicOffCenterFrustum();\r\n\r\n    /**\r\n     * The horizontal width of the frustum in meters.\r\n     * @type {Number}\r\n     * @default undefined\r\n     */\r\n    this.width = options.width;\r\n    this._width = undefined;\r\n\r\n    /**\r\n     * The aspect ratio of the frustum's width to it's height.\r\n     * @type {Number}\r\n     * @default undefined\r\n     */\r\n    this.aspectRatio = options.aspectRatio;\r\n    this._aspectRatio = undefined;\r\n\r\n    /**\r\n     * The distance of the near plane.\r\n     * @type {Number}\r\n     * @default 1.0\r\n     */\r\n    this.near = defaultValue(options.near, 1.0);\r\n    this._near = this.near;\r\n\r\n    /**\r\n     * The distance of the far plane.\r\n     * @type {Number}\r\n     * @default 500000000.0;\r\n     */\r\n    this.far = defaultValue(options.far, 500000000.0);\r\n    this._far = this.far;\r\n}\r\n\r\n/**\r\n * The number of elements used to pack the object into an array.\r\n * @type {Number}\r\n */\r\nOrthographicFrustum.packedLength = 4;\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {OrthographicFrustum} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nOrthographicFrustum.pack = function (value, array, startingIndex) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.typeOf.object('value', value);\r\n    Check.defined('array', array);\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    array[startingIndex++] = value.width;\r\n    array[startingIndex++] = value.aspectRatio;\r\n    array[startingIndex++] = value.near;\r\n    array[startingIndex] = value.far;\r\n\r\n    return array;\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {OrthographicFrustum} [result] The object into which to store the result.\r\n * @returns {OrthographicFrustum} The modified result parameter or a new OrthographicFrustum instance if one was not provided.\r\n */\r\nOrthographicFrustum.unpack = function (array, startingIndex, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined('array', array);\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    if (!defined(result)) {\r\n        result = new OrthographicFrustum();\r\n    }\r\n\r\n    result.width = array[startingIndex++];\r\n    result.aspectRatio = array[startingIndex++];\r\n    result.near = array[startingIndex++];\r\n    result.far = array[startingIndex];\r\n\r\n    return result;\r\n};\r\n\r\nfunction update(frustum) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(frustum.width) || !defined(frustum.aspectRatio) || !defined(frustum.near) || !defined(frustum.far)) {\r\n        throw new DeveloperError('width, aspectRatio, near, or far parameters are not set.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var f = frustum._offCenterFrustum;\r\n\r\n    if (frustum.width !== frustum._width || frustum.aspectRatio !== frustum._aspectRatio || frustum.near !== frustum._near || frustum.far !== frustum._far) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (frustum.aspectRatio < 0) {\r\n            throw new DeveloperError('aspectRatio must be positive.');\r\n        }\r\n        if (frustum.near < 0 || frustum.near > frustum.far) {\r\n            throw new DeveloperError('near must be greater than zero and less than far.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        frustum._aspectRatio = frustum.aspectRatio;\r\n        frustum._width = frustum.width;\r\n        frustum._near = frustum.near;\r\n        frustum._far = frustum.far;\r\n\r\n        var ratio = 1.0 / frustum.aspectRatio;\r\n        f.right = frustum.width * 0.5;\r\n        f.left = -f.right;\r\n        f.top = ratio * f.right;\r\n        f.bottom = -f.top;\r\n        f.near = frustum.near;\r\n        f.far = frustum.far;\r\n    }\r\n}\r\n\r\nObject.defineProperties(OrthographicFrustum.prototype, {\r\n    /**\r\n     * Gets the orthographic projection matrix computed from the view frustum.\r\n     * @memberof OrthographicFrustum.prototype\r\n     * @type {Matrix4}\r\n     * @readonly\r\n     */\r\n    projectionMatrix: {\r\n        get: function () {\r\n            update(this);\r\n            return this._offCenterFrustum.projectionMatrix;\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Creates a culling volume for this frustum.\r\n *\r\n * @param {Cartesian3} position The eye position.\r\n * @param {Cartesian3} direction The view direction.\r\n * @param {Cartesian3} up The up direction.\r\n * @returns {CullingVolume} A culling volume at the given position and orientation.\r\n *\r\n * @example\r\n * // Check if a bounding volume intersects the frustum.\r\n * var cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\r\n * var intersect = cullingVolume.computeVisibility(boundingVolume);\r\n */\r\nOrthographicFrustum.prototype.computeCullingVolume = function (position, direction, up) {\r\n    update(this);\r\n    return this._offCenterFrustum.computeCullingVolume(position, direction, up);\r\n};\r\n\r\n/**\r\n * Returns the pixel's width and height in meters.\r\n *\r\n * @param {Number} drawingBufferWidth The width of the drawing buffer.\r\n * @param {Number} drawingBufferHeight The height of the drawing buffer.\r\n * @param {Number} distance The distance to the near plane in meters.\r\n * @param {Number} pixelRatio The scaling factor from pixel space to coordinate space.\r\n * @param {Cartesian2} result The object onto which to store the result.\r\n * @returns {Cartesian2} The modified result parameter or a new instance of {@link Cartesian2} with the pixel's width and height in the x and y properties, respectively.\r\n *\r\n * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\r\n * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\r\n * @exception {DeveloperError} pixelRatio must be greater than zero.\r\n *\r\n * @example\r\n * // Example 1\r\n * // Get the width and height of a pixel.\r\n * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 0.0, scene.pixelRatio, new Cesium.Cartesian2());\r\n */\r\nOrthographicFrustum.prototype.getPixelDimensions = function (drawingBufferWidth, drawingBufferHeight, distance, pixelRatio, result) {\r\n    update(this);\r\n    return this._offCenterFrustum.getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, pixelRatio, result);\r\n};\r\n\r\n/**\r\n * Returns a duplicate of a OrthographicFrustum instance.\r\n *\r\n * @param {OrthographicFrustum} [result] The object onto which to store the result.\r\n * @returns {OrthographicFrustum} The modified result parameter or a new OrthographicFrustum instance if one was not provided.\r\n */\r\nOrthographicFrustum.prototype.clone = function (result) {\r\n    if (!defined(result)) {\r\n        result = new OrthographicFrustum();\r\n    }\r\n\r\n    result.aspectRatio = this.aspectRatio;\r\n    result.width = this.width;\r\n    result.near = this.near;\r\n    result.far = this.far;\r\n\r\n    // force update of clone to compute matrices\r\n    result._aspectRatio = undefined;\r\n    result._width = undefined;\r\n    result._near = undefined;\r\n    result._far = undefined;\r\n\r\n    this._offCenterFrustum.clone(result._offCenterFrustum);\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Compares the provided OrthographicFrustum componentwise and returns\r\n * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n *\r\n * @param {OrthographicFrustum} [other] The right hand side OrthographicFrustum.\r\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n */\r\nOrthographicFrustum.prototype.equals = function (other) {\r\n    if (!defined(other) || !(other instanceof OrthographicFrustum)) {\r\n        return false;\r\n    }\r\n\r\n    update(this);\r\n    update(other);\r\n\r\n    return this.width === other.width && this.aspectRatio === other.aspectRatio && this._offCenterFrustum.equals(other._offCenterFrustum);\r\n};\r\n\r\n/**\r\n * Compares the provided OrthographicFrustum componentwise and returns\r\n * <code>true</code> if they pass an absolute or relative tolerance test,\r\n * <code>false</code> otherwise.\r\n *\r\n * @param {OrthographicFrustum} other The right hand side OrthographicFrustum.\r\n * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\r\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n * @returns {Boolean} <code>true</code> if this and other are within the provided epsilon, <code>false</code> otherwise.\r\n */\r\nOrthographicFrustum.prototype.equalsEpsilon = function (other, relativeEpsilon, absoluteEpsilon) {\r\n    if (!defined(other) || !(other instanceof OrthographicFrustum)) {\r\n        return false;\r\n    }\r\n\r\n    update(this);\r\n    update(other);\r\n\r\n    return (\r\n        CesiumMath.equalsEpsilon(this.width, other.width, relativeEpsilon, absoluteEpsilon) &&\r\n        CesiumMath.equalsEpsilon(this.aspectRatio, other.aspectRatio, relativeEpsilon, absoluteEpsilon) &&\r\n        this._offCenterFrustum.equalsEpsilon(other._offCenterFrustum, relativeEpsilon, absoluteEpsilon)\r\n    );\r\n};\r\nexport default OrthographicFrustum;\r\n","import Cartesian3 from './Cartesian3.js';\r\nimport Cartesian4 from './Cartesian4.js';\r\nimport CullingVolume from './CullingVolume.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport CesiumMath from './Math.js';\r\nimport Matrix4 from './Matrix4.js';\r\n\r\n/**\r\n * The viewing frustum is defined by 6 planes.\r\n * Each plane is represented by a {@link Cartesian4} object, where the x, y, and z components\r\n * define the unit vector normal to the plane, and the w component is the distance of the\r\n * plane from the origin/camera position.\r\n *\r\n * @alias PerspectiveOffCenterFrustum\r\n * @constructor\r\n *\r\n * @param {Object} [options] An object with the following properties:\r\n * @param {Number} [options.left] The left clipping plane distance.\r\n * @param {Number} [options.right] The right clipping plane distance.\r\n * @param {Number} [options.top] The top clipping plane distance.\r\n * @param {Number} [options.bottom] The bottom clipping plane distance.\r\n * @param {Number} [options.near=1.0] The near clipping plane distance.\r\n * @param {Number} [options.far=500000000.0] The far clipping plane distance.\r\n *\r\n * @example\r\n * var frustum = new Cesium.PerspectiveOffCenterFrustum({\r\n *     left : -1.0,\r\n *     right : 1.0,\r\n *     top : 1.0,\r\n *     bottom : -1.0,\r\n *     near : 1.0,\r\n *     far : 100.0\r\n * });\r\n *\r\n * @see PerspectiveFrustum\r\n */\r\nfunction PerspectiveOffCenterFrustum(options) {\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n    /**\r\n     * Defines the left clipping plane.\r\n     * @type {Number}\r\n     * @default undefined\r\n     */\r\n    this.left = options.left;\r\n    this._left = undefined;\r\n\r\n    /**\r\n     * Defines the right clipping plane.\r\n     * @type {Number}\r\n     * @default undefined\r\n     */\r\n    this.right = options.right;\r\n    this._right = undefined;\r\n\r\n    /**\r\n     * Defines the top clipping plane.\r\n     * @type {Number}\r\n     * @default undefined\r\n     */\r\n    this.top = options.top;\r\n    this._top = undefined;\r\n\r\n    /**\r\n     * Defines the bottom clipping plane.\r\n     * @type {Number}\r\n     * @default undefined\r\n     */\r\n    this.bottom = options.bottom;\r\n    this._bottom = undefined;\r\n\r\n    /**\r\n     * The distance of the near plane.\r\n     * @type {Number}\r\n     * @default 1.0\r\n     */\r\n    this.near = defaultValue(options.near, 1.0);\r\n    this._near = this.near;\r\n\r\n    /**\r\n     * The distance of the far plane.\r\n     * @type {Number}\r\n     * @default 500000000.0\r\n     */\r\n    this.far = defaultValue(options.far, 500000000.0);\r\n    this._far = this.far;\r\n\r\n    this._cullingVolume = new CullingVolume();\r\n    this._perspectiveMatrix = new Matrix4();\r\n    this._infinitePerspective = new Matrix4();\r\n}\r\n\r\nfunction update(frustum) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(frustum.right) || !defined(frustum.left) || !defined(frustum.top) || !defined(frustum.bottom) || !defined(frustum.near) || !defined(frustum.far)) {\r\n        throw new DeveloperError('right, left, top, bottom, near, or far parameters are not set.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var t = frustum.top;\r\n    var b = frustum.bottom;\r\n    var r = frustum.right;\r\n    var l = frustum.left;\r\n    var n = frustum.near;\r\n    var f = frustum.far;\r\n\r\n    if (t !== frustum._top || b !== frustum._bottom || l !== frustum._left || r !== frustum._right || n !== frustum._near || f !== frustum._far) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (frustum.near <= 0 || frustum.near > frustum.far) {\r\n            throw new DeveloperError('near must be greater than zero and less than far.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        frustum._left = l;\r\n        frustum._right = r;\r\n        frustum._top = t;\r\n        frustum._bottom = b;\r\n        frustum._near = n;\r\n        frustum._far = f;\r\n        frustum._perspectiveMatrix = Matrix4.computePerspectiveOffCenter(l, r, b, t, n, f, frustum._perspectiveMatrix);\r\n        frustum._infinitePerspective = Matrix4.computeInfinitePerspectiveOffCenter(l, r, b, t, n, frustum._infinitePerspective);\r\n    }\r\n}\r\n\r\nObject.defineProperties(PerspectiveOffCenterFrustum.prototype, {\r\n    /**\r\n     * Gets the perspective projection matrix computed from the view frustum.\r\n     * @memberof PerspectiveOffCenterFrustum.prototype\r\n     * @type {Matrix4}\r\n     * @readonly\r\n     *\r\n     * @see PerspectiveOffCenterFrustum#infiniteProjectionMatrix\r\n     */\r\n    projectionMatrix: {\r\n        get: function () {\r\n            update(this);\r\n            return this._perspectiveMatrix;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Gets the perspective projection matrix computed from the view frustum with an infinite far plane.\r\n     * @memberof PerspectiveOffCenterFrustum.prototype\r\n     * @type {Matrix4}\r\n     * @readonly\r\n     *\r\n     * @see PerspectiveOffCenterFrustum#projectionMatrix\r\n     */\r\n    infiniteProjectionMatrix: {\r\n        get: function () {\r\n            update(this);\r\n            return this._infinitePerspective;\r\n        }\r\n    }\r\n});\r\n\r\nvar getPlanesRight = new Cartesian3();\r\nvar getPlanesNearCenter = new Cartesian3();\r\nvar getPlanesFarCenter = new Cartesian3();\r\nvar getPlanesNormal = new Cartesian3();\r\n/**\r\n * Creates a culling volume for this frustum.\r\n *\r\n * @param {Cartesian3} position The eye position.\r\n * @param {Cartesian3} direction The view direction.\r\n * @param {Cartesian3} up The up direction.\r\n * @returns {CullingVolume} A culling volume at the given position and orientation.\r\n *\r\n * @example\r\n * // Check if a bounding volume intersects the frustum.\r\n * var cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\r\n * var intersect = cullingVolume.computeVisibility(boundingVolume);\r\n */\r\nPerspectiveOffCenterFrustum.prototype.computeCullingVolume = function (position, direction, up) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(position)) {\r\n        throw new DeveloperError('position is required.');\r\n    }\r\n\r\n    if (!defined(direction)) {\r\n        throw new DeveloperError('direction is required.');\r\n    }\r\n\r\n    if (!defined(up)) {\r\n        throw new DeveloperError('up is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var planes = this._cullingVolume.planes;\r\n\r\n    var t = this.top;\r\n    var b = this.bottom;\r\n    var r = this.right;\r\n    var l = this.left;\r\n    var n = this.near;\r\n    var f = this.far;\r\n\r\n    var right = Cartesian3.cross(direction, up, getPlanesRight);\r\n\r\n    var nearCenter = getPlanesNearCenter;\r\n    Cartesian3.multiplyByScalar(direction, n, nearCenter);\r\n    Cartesian3.add(position, nearCenter, nearCenter);\r\n\r\n    var farCenter = getPlanesFarCenter;\r\n    Cartesian3.multiplyByScalar(direction, f, farCenter);\r\n    Cartesian3.add(position, farCenter, farCenter);\r\n\r\n    var normal = getPlanesNormal;\r\n\r\n    //Left plane computation\r\n    Cartesian3.multiplyByScalar(right, l, normal);\r\n    Cartesian3.add(nearCenter, normal, normal);\r\n    Cartesian3.subtract(normal, position, normal);\r\n    Cartesian3.normalize(normal, normal);\r\n    Cartesian3.cross(normal, up, normal);\r\n    Cartesian3.normalize(normal, normal);\r\n\r\n    var plane = planes[0];\r\n    if (!defined(plane)) {\r\n        plane = planes[0] = new Cartesian4();\r\n    }\r\n    plane.x = normal.x;\r\n    plane.y = normal.y;\r\n    plane.z = normal.z;\r\n    plane.w = -Cartesian3.dot(normal, position);\r\n\r\n    //Right plane computation\r\n    Cartesian3.multiplyByScalar(right, r, normal);\r\n    Cartesian3.add(nearCenter, normal, normal);\r\n    Cartesian3.subtract(normal, position, normal);\r\n    Cartesian3.cross(up, normal, normal);\r\n    Cartesian3.normalize(normal, normal);\r\n\r\n    plane = planes[1];\r\n    if (!defined(plane)) {\r\n        plane = planes[1] = new Cartesian4();\r\n    }\r\n    plane.x = normal.x;\r\n    plane.y = normal.y;\r\n    plane.z = normal.z;\r\n    plane.w = -Cartesian3.dot(normal, position);\r\n\r\n    //Bottom plane computation\r\n    Cartesian3.multiplyByScalar(up, b, normal);\r\n    Cartesian3.add(nearCenter, normal, normal);\r\n    Cartesian3.subtract(normal, position, normal);\r\n    Cartesian3.cross(right, normal, normal);\r\n    Cartesian3.normalize(normal, normal);\r\n\r\n    plane = planes[2];\r\n    if (!defined(plane)) {\r\n        plane = planes[2] = new Cartesian4();\r\n    }\r\n    plane.x = normal.x;\r\n    plane.y = normal.y;\r\n    plane.z = normal.z;\r\n    plane.w = -Cartesian3.dot(normal, position);\r\n\r\n    //Top plane computation\r\n    Cartesian3.multiplyByScalar(up, t, normal);\r\n    Cartesian3.add(nearCenter, normal, normal);\r\n    Cartesian3.subtract(normal, position, normal);\r\n    Cartesian3.cross(normal, right, normal);\r\n    Cartesian3.normalize(normal, normal);\r\n\r\n    plane = planes[3];\r\n    if (!defined(plane)) {\r\n        plane = planes[3] = new Cartesian4();\r\n    }\r\n    plane.x = normal.x;\r\n    plane.y = normal.y;\r\n    plane.z = normal.z;\r\n    plane.w = -Cartesian3.dot(normal, position);\r\n\r\n    //Near plane computation\r\n    plane = planes[4];\r\n    if (!defined(plane)) {\r\n        plane = planes[4] = new Cartesian4();\r\n    }\r\n    plane.x = direction.x;\r\n    plane.y = direction.y;\r\n    plane.z = direction.z;\r\n    plane.w = -Cartesian3.dot(direction, nearCenter);\r\n\r\n    //Far plane computation\r\n    Cartesian3.negate(direction, normal);\r\n\r\n    plane = planes[5];\r\n    if (!defined(plane)) {\r\n        plane = planes[5] = new Cartesian4();\r\n    }\r\n    plane.x = normal.x;\r\n    plane.y = normal.y;\r\n    plane.z = normal.z;\r\n    plane.w = -Cartesian3.dot(normal, farCenter);\r\n\r\n    return this._cullingVolume;\r\n};\r\n\r\n/**\r\n * Returns the pixel's width and height in meters.\r\n *\r\n * @param {Number} drawingBufferWidth The width of the drawing buffer.\r\n * @param {Number} drawingBufferHeight The height of the drawing buffer.\r\n * @param {Number} distance The distance to the near plane in meters.\r\n * @param {Number} pixelRatio The scaling factor from pixel space to coordinate space.\r\n * @param {Cartesian2} result The object onto which to store the result.\r\n * @returns {Cartesian2} The modified result parameter or a new instance of {@link Cartesian2} with the pixel's width and height in the x and y properties, respectively.\r\n *\r\n * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\r\n * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\r\n * @exception {DeveloperError} pixelRatio must be greater than zero.\r\n *\r\n * @example\r\n * // Example 1\r\n * // Get the width and height of a pixel.\r\n * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 1.0, scene.pixelRatio, new Cesium.Cartesian2());\r\n *\r\n * @example\r\n * // Example 2\r\n * // Get the width and height of a pixel if the near plane was set to 'distance'.\r\n * // For example, get the size of a pixel of an image on a billboard.\r\n * var position = camera.position;\r\n * var direction = camera.direction;\r\n * var toCenter = Cesium.Cartesian3.subtract(primitive.boundingVolume.center, position, new Cesium.Cartesian3());      // vector from camera to a primitive\r\n * var toCenterProj = Cesium.Cartesian3.multiplyByScalar(direction, Cesium.Cartesian3.dot(direction, toCenter), new Cesium.Cartesian3()); // project vector onto camera direction vector\r\n * var distance = Cesium.Cartesian3.magnitude(toCenterProj);\r\n * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, distance, scene.pixelRatio, new Cesium.Cartesian2());\r\n */\r\nPerspectiveOffCenterFrustum.prototype.getPixelDimensions = function (drawingBufferWidth, drawingBufferHeight, distance, pixelRatio, result) {\r\n    update(this);\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(drawingBufferWidth) || !defined(drawingBufferHeight)) {\r\n        throw new DeveloperError('Both drawingBufferWidth and drawingBufferHeight are required.');\r\n    }\r\n    if (drawingBufferWidth <= 0) {\r\n        throw new DeveloperError('drawingBufferWidth must be greater than zero.');\r\n    }\r\n    if (drawingBufferHeight <= 0) {\r\n        throw new DeveloperError('drawingBufferHeight must be greater than zero.');\r\n    }\r\n    if (!defined(distance)) {\r\n        throw new DeveloperError('distance is required.');\r\n    }\r\n    if (!defined(pixelRatio)) {\r\n        throw new DeveloperError('pixelRatio is required');\r\n    }\r\n    if (pixelRatio <= 0) {\r\n        throw new DeveloperError('pixelRatio must be greater than zero.');\r\n    }\r\n    if (!defined(result)) {\r\n        throw new DeveloperError('A result object is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var inverseNear = 1.0 / this.near;\r\n    var tanTheta = this.top * inverseNear;\r\n    var pixelHeight = (2.0 * pixelRatio * distance * tanTheta) / drawingBufferHeight;\r\n    tanTheta = this.right * inverseNear;\r\n    var pixelWidth = (2.0 * pixelRatio * distance * tanTheta) / drawingBufferWidth;\r\n\r\n    result.x = pixelWidth;\r\n    result.y = pixelHeight;\r\n    return result;\r\n};\r\n\r\n/**\r\n * Returns a duplicate of a PerspectiveOffCenterFrustum instance.\r\n *\r\n * @param {PerspectiveOffCenterFrustum} [result] The object onto which to store the result.\r\n * @returns {PerspectiveOffCenterFrustum} The modified result parameter or a new PerspectiveFrustum instance if one was not provided.\r\n */\r\nPerspectiveOffCenterFrustum.prototype.clone = function (result) {\r\n    if (!defined(result)) {\r\n        result = new PerspectiveOffCenterFrustum();\r\n    }\r\n\r\n    result.right = this.right;\r\n    result.left = this.left;\r\n    result.top = this.top;\r\n    result.bottom = this.bottom;\r\n    result.near = this.near;\r\n    result.far = this.far;\r\n\r\n    // force update of clone to compute matrices\r\n    result._left = undefined;\r\n    result._right = undefined;\r\n    result._top = undefined;\r\n    result._bottom = undefined;\r\n    result._near = undefined;\r\n    result._far = undefined;\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Compares the provided PerspectiveOffCenterFrustum componentwise and returns\r\n * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n *\r\n * @param {PerspectiveOffCenterFrustum} [other] The right hand side PerspectiveOffCenterFrustum.\r\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n */\r\nPerspectiveOffCenterFrustum.prototype.equals = function (other) {\r\n    return (\r\n        defined(other) &&\r\n        other instanceof PerspectiveOffCenterFrustum &&\r\n        this.right === other.right &&\r\n        this.left === other.left &&\r\n        this.top === other.top &&\r\n        this.bottom === other.bottom &&\r\n        this.near === other.near &&\r\n        this.far === other.far\r\n    );\r\n};\r\n\r\n/**\r\n * Compares the provided PerspectiveOffCenterFrustum componentwise and returns\r\n * <code>true</code> if they pass an absolute or relative tolerance test,\r\n * <code>false</code> otherwise.\r\n *\r\n * @param {PerspectiveOffCenterFrustum} other The right hand side PerspectiveOffCenterFrustum.\r\n * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\r\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n * @returns {Boolean} <code>true</code> if this and other are within the provided epsilon, <code>false</code> otherwise.\r\n */\r\nPerspectiveOffCenterFrustum.prototype.equalsEpsilon = function (other, relativeEpsilon, absoluteEpsilon) {\r\n    return (\r\n        other === this ||\r\n        (defined(other) &&\r\n            other instanceof PerspectiveOffCenterFrustum &&\r\n            CesiumMath.equalsEpsilon(this.right, other.right, relativeEpsilon, absoluteEpsilon) &&\r\n            CesiumMath.equalsEpsilon(this.left, other.left, relativeEpsilon, absoluteEpsilon) &&\r\n            CesiumMath.equalsEpsilon(this.top, other.top, relativeEpsilon, absoluteEpsilon) &&\r\n            CesiumMath.equalsEpsilon(this.bottom, other.bottom, relativeEpsilon, absoluteEpsilon) &&\r\n            CesiumMath.equalsEpsilon(this.near, other.near, relativeEpsilon, absoluteEpsilon) &&\r\n            CesiumMath.equalsEpsilon(this.far, other.far, relativeEpsilon, absoluteEpsilon))\r\n    );\r\n};\r\nexport default PerspectiveOffCenterFrustum;\r\n","import Check from './Check.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport CesiumMath from './Math.js';\r\nimport PerspectiveOffCenterFrustum from './PerspectiveOffCenterFrustum.js';\r\n\r\n/**\r\n * The viewing frustum is defined by 6 planes.\r\n * Each plane is represented by a {@link Cartesian4} object, where the x, y, and z components\r\n * define the unit vector normal to the plane, and the w component is the distance of the\r\n * plane from the origin/camera position.\r\n *\r\n * @alias PerspectiveFrustum\r\n * @constructor\r\n *\r\n * @param {Object} [options] An object with the following properties:\r\n * @param {Number} [options.fov] The angle of the field of view (FOV), in radians.\r\n * @param {Number} [options.aspectRatio] The aspect ratio of the frustum's width to it's height.\r\n * @param {Number} [options.near=1.0] The distance of the near plane.\r\n * @param {Number} [options.far=500000000.0] The distance of the far plane.\r\n * @param {Number} [options.xOffset=0.0] The offset in the x direction.\r\n * @param {Number} [options.yOffset=0.0] The offset in the y direction.\r\n *\r\n * @example\r\n * var frustum = new Cesium.PerspectiveFrustum({\r\n *     fov : Cesium.Math.PI_OVER_THREE,\r\n *     aspectRatio : canvas.clientWidth / canvas.clientHeight\r\n *     near : 1.0,\r\n *     far : 1000.0\r\n * });\r\n *\r\n * @see PerspectiveOffCenterFrustum\r\n */\r\nfunction PerspectiveFrustum(options) {\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n    this._offCenterFrustum = new PerspectiveOffCenterFrustum();\r\n\r\n    /**\r\n     * The angle of the field of view (FOV), in radians.  This angle will be used\r\n     * as the horizontal FOV if the width is greater than the height, otherwise\r\n     * it will be the vertical FOV.\r\n     * @type {Number}\r\n     * @default undefined\r\n     */\r\n    this.fov = options.fov;\r\n    this._fov = undefined;\r\n    this._fovy = undefined;\r\n\r\n    this._sseDenominator = undefined;\r\n\r\n    /**\r\n     * The aspect ratio of the frustum's width to it's height.\r\n     * @type {Number}\r\n     * @default undefined\r\n     */\r\n    this.aspectRatio = options.aspectRatio;\r\n    this._aspectRatio = undefined;\r\n\r\n    /**\r\n     * The distance of the near plane.\r\n     * @type {Number}\r\n     * @default 1.0\r\n     */\r\n    this.near = defaultValue(options.near, 1.0);\r\n    this._near = this.near;\r\n\r\n    /**\r\n     * The distance of the far plane.\r\n     * @type {Number}\r\n     * @default 500000000.0\r\n     */\r\n    this.far = defaultValue(options.far, 500000000.0);\r\n    this._far = this.far;\r\n\r\n    /**\r\n     * Offsets the frustum in the x direction.\r\n     * @type {Number}\r\n     * @default 0.0\r\n     */\r\n    this.xOffset = defaultValue(options.xOffset, 0.0);\r\n    this._xOffset = this.xOffset;\r\n\r\n    /**\r\n     * Offsets the frustum in the y direction.\r\n     * @type {Number}\r\n     * @default 0.0\r\n     */\r\n    this.yOffset = defaultValue(options.yOffset, 0.0);\r\n    this._yOffset = this.yOffset;\r\n}\r\n\r\n/**\r\n * The number of elements used to pack the object into an array.\r\n * @type {Number}\r\n */\r\nPerspectiveFrustum.packedLength = 6;\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {PerspectiveFrustum} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nPerspectiveFrustum.pack = function (value, array, startingIndex) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.typeOf.object('value', value);\r\n    Check.defined('array', array);\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    array[startingIndex++] = value.fov;\r\n    array[startingIndex++] = value.aspectRatio;\r\n    array[startingIndex++] = value.near;\r\n    array[startingIndex++] = value.far;\r\n    array[startingIndex++] = value.xOffset;\r\n    array[startingIndex] = value.yOffset;\r\n\r\n    return array;\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {PerspectiveFrustum} [result] The object into which to store the result.\r\n * @returns {PerspectiveFrustum} The modified result parameter or a new PerspectiveFrustum instance if one was not provided.\r\n */\r\nPerspectiveFrustum.unpack = function (array, startingIndex, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined('array', array);\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    if (!defined(result)) {\r\n        result = new PerspectiveFrustum();\r\n    }\r\n\r\n    result.fov = array[startingIndex++];\r\n    result.aspectRatio = array[startingIndex++];\r\n    result.near = array[startingIndex++];\r\n    result.far = array[startingIndex++];\r\n    result.xOffset = array[startingIndex++];\r\n    result.yOffset = array[startingIndex];\r\n\r\n    return result;\r\n};\r\n\r\nfunction update(frustum) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(frustum.fov) || !defined(frustum.aspectRatio) || !defined(frustum.near) || !defined(frustum.far)) {\r\n        throw new DeveloperError('fov, aspectRatio, near, or far parameters are not set.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var f = frustum._offCenterFrustum;\r\n\r\n    if (\r\n        frustum.fov !== frustum._fov ||\r\n        frustum.aspectRatio !== frustum._aspectRatio ||\r\n        frustum.near !== frustum._near ||\r\n        frustum.far !== frustum._far ||\r\n        frustum.xOffset !== frustum._xOffset ||\r\n        frustum.yOffset !== frustum._yOffset\r\n    ) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (frustum.fov < 0 || frustum.fov >= Math.PI) {\r\n            throw new DeveloperError('fov must be in the range [0, PI).');\r\n        }\r\n\r\n        if (frustum.aspectRatio < 0) {\r\n            throw new DeveloperError('aspectRatio must be positive.');\r\n        }\r\n\r\n        if (frustum.near < 0 || frustum.near > frustum.far) {\r\n            throw new DeveloperError('near must be greater than zero and less than far.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        frustum._aspectRatio = frustum.aspectRatio;\r\n        frustum._fov = frustum.fov;\r\n        frustum._fovy = frustum.aspectRatio <= 1 ? frustum.fov : Math.atan(Math.tan(frustum.fov * 0.5) / frustum.aspectRatio) * 2.0;\r\n        frustum._near = frustum.near;\r\n        frustum._far = frustum.far;\r\n        frustum._sseDenominator = 2.0 * Math.tan(0.5 * frustum._fovy);\r\n        frustum._xOffset = frustum.xOffset;\r\n        frustum._yOffset = frustum.yOffset;\r\n\r\n        f.top = frustum.near * Math.tan(0.5 * frustum._fovy);\r\n        f.bottom = -f.top;\r\n        f.right = frustum.aspectRatio * f.top;\r\n        f.left = -f.right;\r\n        f.near = frustum.near;\r\n        f.far = frustum.far;\r\n\r\n        f.right += frustum.xOffset;\r\n        f.left += frustum.xOffset;\r\n        f.top += frustum.yOffset;\r\n        f.bottom += frustum.yOffset;\r\n    }\r\n}\r\n\r\nObject.defineProperties(PerspectiveFrustum.prototype, {\r\n    /**\r\n     * Gets the perspective projection matrix computed from the view frustum.\r\n     * @memberof PerspectiveFrustum.prototype\r\n     * @type {Matrix4}\r\n     * @readonly\r\n     *\r\n     * @see PerspectiveFrustum#infiniteProjectionMatrix\r\n     */\r\n    projectionMatrix: {\r\n        get: function () {\r\n            update(this);\r\n            return this._offCenterFrustum.projectionMatrix;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The perspective projection matrix computed from the view frustum with an infinite far plane.\r\n     * @memberof PerspectiveFrustum.prototype\r\n     * @type {Matrix4}\r\n     * @readonly\r\n     *\r\n     * @see PerspectiveFrustum#projectionMatrix\r\n     */\r\n    infiniteProjectionMatrix: {\r\n        get: function () {\r\n            update(this);\r\n            return this._offCenterFrustum.infiniteProjectionMatrix;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Gets the angle of the vertical field of view, in radians.\r\n     * @memberof PerspectiveFrustum.prototype\r\n     * @type {Number}\r\n     * @readonly\r\n     * @default undefined\r\n     */\r\n    fovy: {\r\n        get: function () {\r\n            update(this);\r\n            return this._fovy;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @readonly\r\n     * @private\r\n     */\r\n    sseDenominator: {\r\n        get: function () {\r\n            update(this);\r\n            return this._sseDenominator;\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Creates a culling volume for this frustum.\r\n *\r\n * @param {Cartesian3} position The eye position.\r\n * @param {Cartesian3} direction The view direction.\r\n * @param {Cartesian3} up The up direction.\r\n * @returns {CullingVolume} A culling volume at the given position and orientation.\r\n *\r\n * @example\r\n * // Check if a bounding volume intersects the frustum.\r\n * var cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\r\n * var intersect = cullingVolume.computeVisibility(boundingVolume);\r\n */\r\nPerspectiveFrustum.prototype.computeCullingVolume = function (position, direction, up) {\r\n    update(this);\r\n    return this._offCenterFrustum.computeCullingVolume(position, direction, up);\r\n};\r\n\r\n/**\r\n * Returns the pixel's width and height in meters.\r\n *\r\n * @param {Number} drawingBufferWidth The width of the drawing buffer.\r\n * @param {Number} drawingBufferHeight The height of the drawing buffer.\r\n * @param {Number} distance The distance to the near plane in meters.\r\n * @param {Number} pixelRatio The scaling factor from pixel space to coordinate space.\r\n * @param {Cartesian2} result The object onto which to store the result.\r\n * @returns {Cartesian2} The modified result parameter or a new instance of {@link Cartesian2} with the pixel's width and height in the x and y properties, respectively.\r\n *\r\n * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\r\n * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\r\n * @exception {DeveloperError} pixelRatio must be greater than zero.\r\n *\r\n * @example\r\n * // Example 1\r\n * // Get the width and height of a pixel.\r\n * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 1.0, scene.pixelRatio, new Cesium.Cartesian2());\r\n *\r\n * @example\r\n * // Example 2\r\n * // Get the width and height of a pixel if the near plane was set to 'distance'.\r\n * // For example, get the size of a pixel of an image on a billboard.\r\n * var position = camera.position;\r\n * var direction = camera.direction;\r\n * var toCenter = Cesium.Cartesian3.subtract(primitive.boundingVolume.center, position, new Cesium.Cartesian3());      // vector from camera to a primitive\r\n * var toCenterProj = Cesium.Cartesian3.multiplyByScalar(direction, Cesium.Cartesian3.dot(direction, toCenter), new Cesium.Cartesian3()); // project vector onto camera direction vector\r\n * var distance = Cesium.Cartesian3.magnitude(toCenterProj);\r\n * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, distance, scene.pixelRatio, new Cesium.Cartesian2());\r\n */\r\nPerspectiveFrustum.prototype.getPixelDimensions = function (drawingBufferWidth, drawingBufferHeight, distance, pixelRatio, result) {\r\n    update(this);\r\n    return this._offCenterFrustum.getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, pixelRatio, result);\r\n};\r\n\r\n/**\r\n * Returns a duplicate of a PerspectiveFrustum instance.\r\n *\r\n * @param {PerspectiveFrustum} [result] The object onto which to store the result.\r\n * @returns {PerspectiveFrustum} The modified result parameter or a new PerspectiveFrustum instance if one was not provided.\r\n */\r\nPerspectiveFrustum.prototype.clone = function (result) {\r\n    if (!defined(result)) {\r\n        result = new PerspectiveFrustum();\r\n    }\r\n\r\n    result.aspectRatio = this.aspectRatio;\r\n    result.fov = this.fov;\r\n    result.near = this.near;\r\n    result.far = this.far;\r\n\r\n    // force update of clone to compute matrices\r\n    result._aspectRatio = undefined;\r\n    result._fov = undefined;\r\n    result._near = undefined;\r\n    result._far = undefined;\r\n\r\n    this._offCenterFrustum.clone(result._offCenterFrustum);\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Compares the provided PerspectiveFrustum componentwise and returns\r\n * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n *\r\n * @param {PerspectiveFrustum} [other] The right hand side PerspectiveFrustum.\r\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n */\r\nPerspectiveFrustum.prototype.equals = function (other) {\r\n    if (!defined(other) || !(other instanceof PerspectiveFrustum)) {\r\n        return false;\r\n    }\r\n\r\n    update(this);\r\n    update(other);\r\n\r\n    return this.fov === other.fov && this.aspectRatio === other.aspectRatio && this._offCenterFrustum.equals(other._offCenterFrustum);\r\n};\r\n\r\n/**\r\n * Compares the provided PerspectiveFrustum componentwise and returns\r\n * <code>true</code> if they pass an absolute or relative tolerance test,\r\n * <code>false</code> otherwise.\r\n *\r\n * @param {PerspectiveFrustum} other The right hand side PerspectiveFrustum.\r\n * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\r\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n * @returns {Boolean} <code>true</code> if this and other are within the provided epsilon, <code>false</code> otherwise.\r\n */\r\nPerspectiveFrustum.prototype.equalsEpsilon = function (other, relativeEpsilon, absoluteEpsilon) {\r\n    if (!defined(other) || !(other instanceof PerspectiveFrustum)) {\r\n        return false;\r\n    }\r\n\r\n    update(this);\r\n    update(other);\r\n\r\n    return (\r\n        CesiumMath.equalsEpsilon(this.fov, other.fov, relativeEpsilon, absoluteEpsilon) &&\r\n        CesiumMath.equalsEpsilon(this.aspectRatio, other.aspectRatio, relativeEpsilon, absoluteEpsilon) &&\r\n        this._offCenterFrustum.equalsEpsilon(other._offCenterFrustum, relativeEpsilon, absoluteEpsilon)\r\n    );\r\n};\r\nexport default PerspectiveFrustum;\r\n","import BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Cartesian4 from './Cartesian4.js';\r\nimport Check from './Check.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport Matrix3 from './Matrix3.js';\r\nimport Matrix4 from './Matrix4.js';\r\nimport OrthographicFrustum from './OrthographicFrustum.js';\r\nimport PerspectiveFrustum from './PerspectiveFrustum.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\nimport Quaternion from './Quaternion.js';\r\nimport VertexFormat from './VertexFormat.js';\r\n\r\nvar PERSPECTIVE = 0;\r\nvar ORTHOGRAPHIC = 1;\r\n\r\n/**\r\n * Describes a frustum at the given the origin and orientation.\r\n *\r\n * @alias FrustumGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {PerspectiveFrustum|OrthographicFrustum} options.frustum The frustum.\r\n * @param {Cartesian3} options.origin The origin of the frustum.\r\n * @param {Quaternion} options.orientation The orientation of the frustum.\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n */\r\nfunction FrustumGeometry(options) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.typeOf.object('options', options);\r\n    Check.typeOf.object('options.frustum', options.frustum);\r\n    Check.typeOf.object('options.origin', options.origin);\r\n    Check.typeOf.object('options.orientation', options.orientation);\r\n    //>>includeEnd('debug');\r\n\r\n    var frustum = options.frustum;\r\n    var orientation = options.orientation;\r\n    var origin = options.origin;\r\n    var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\r\n\r\n    // This is private because it is used by DebugCameraPrimitive to draw a multi-frustum by\r\n    // creating multiple FrustumGeometrys. This way the near plane of one frustum doesn't overlap\r\n    // the far plane of another.\r\n    var drawNearPlane = defaultValue(options._drawNearPlane, true);\r\n\r\n    var frustumType;\r\n    var frustumPackedLength;\r\n    if (frustum instanceof PerspectiveFrustum) {\r\n        frustumType = PERSPECTIVE;\r\n        frustumPackedLength = PerspectiveFrustum.packedLength;\r\n    } else if (frustum instanceof OrthographicFrustum) {\r\n        frustumType = ORTHOGRAPHIC;\r\n        frustumPackedLength = OrthographicFrustum.packedLength;\r\n    }\r\n\r\n    this._frustumType = frustumType;\r\n    this._frustum = frustum.clone();\r\n    this._origin = Cartesian3.clone(origin);\r\n    this._orientation = Quaternion.clone(orientation);\r\n    this._drawNearPlane = drawNearPlane;\r\n    this._vertexFormat = vertexFormat;\r\n    this._workerName = 'createFrustumGeometry';\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    this.packedLength = 2 + frustumPackedLength + Cartesian3.packedLength + Quaternion.packedLength + VertexFormat.packedLength;\r\n}\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {FrustumGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nFrustumGeometry.pack = function (value, array, startingIndex) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.typeOf.object('value', value);\r\n    Check.defined('array', array);\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    var frustumType = value._frustumType;\r\n    var frustum = value._frustum;\r\n\r\n    array[startingIndex++] = frustumType;\r\n\r\n    if (frustumType === PERSPECTIVE) {\r\n        PerspectiveFrustum.pack(frustum, array, startingIndex);\r\n        startingIndex += PerspectiveFrustum.packedLength;\r\n    } else {\r\n        OrthographicFrustum.pack(frustum, array, startingIndex);\r\n        startingIndex += OrthographicFrustum.packedLength;\r\n    }\r\n\r\n    Cartesian3.pack(value._origin, array, startingIndex);\r\n    startingIndex += Cartesian3.packedLength;\r\n    Quaternion.pack(value._orientation, array, startingIndex);\r\n    startingIndex += Quaternion.packedLength;\r\n    VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n    startingIndex += VertexFormat.packedLength;\r\n    array[startingIndex] = value._drawNearPlane ? 1.0 : 0.0;\r\n\r\n    return array;\r\n};\r\n\r\nvar scratchPackPerspective = new PerspectiveFrustum();\r\nvar scratchPackOrthographic = new OrthographicFrustum();\r\nvar scratchPackQuaternion = new Quaternion();\r\nvar scratchPackorigin = new Cartesian3();\r\nvar scratchVertexFormat = new VertexFormat();\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {FrustumGeometry} [result] The object into which to store the result.\r\n */\r\nFrustumGeometry.unpack = function (array, startingIndex, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined('array', array);\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    var frustumType = array[startingIndex++];\r\n\r\n    var frustum;\r\n    if (frustumType === PERSPECTIVE) {\r\n        frustum = PerspectiveFrustum.unpack(array, startingIndex, scratchPackPerspective);\r\n        startingIndex += PerspectiveFrustum.packedLength;\r\n    } else {\r\n        frustum = OrthographicFrustum.unpack(array, startingIndex, scratchPackOrthographic);\r\n        startingIndex += OrthographicFrustum.packedLength;\r\n    }\r\n\r\n    var origin = Cartesian3.unpack(array, startingIndex, scratchPackorigin);\r\n    startingIndex += Cartesian3.packedLength;\r\n    var orientation = Quaternion.unpack(array, startingIndex, scratchPackQuaternion);\r\n    startingIndex += Quaternion.packedLength;\r\n    var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\r\n    startingIndex += VertexFormat.packedLength;\r\n    var drawNearPlane = array[startingIndex] === 1.0;\r\n\r\n    if (!defined(result)) {\r\n        return new FrustumGeometry({\r\n            frustum: frustum,\r\n            origin: origin,\r\n            orientation: orientation,\r\n            vertexFormat: vertexFormat,\r\n            _drawNearPlane: drawNearPlane\r\n        });\r\n    }\r\n\r\n    var frustumResult = frustumType === result._frustumType ? result._frustum : undefined;\r\n    result._frustum = frustum.clone(frustumResult);\r\n\r\n    result._frustumType = frustumType;\r\n    result._origin = Cartesian3.clone(origin, result._origin);\r\n    result._orientation = Quaternion.clone(orientation, result._orientation);\r\n    result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n    result._drawNearPlane = drawNearPlane;\r\n\r\n    return result;\r\n};\r\n\r\nfunction getAttributes(offset, normals, tangents, bitangents, st, normal, tangent, bitangent) {\r\n    var stOffset = (offset / 3) * 2;\r\n\r\n    for (var i = 0; i < 4; ++i) {\r\n        if (defined(normals)) {\r\n            normals[offset] = normal.x;\r\n            normals[offset + 1] = normal.y;\r\n            normals[offset + 2] = normal.z;\r\n        }\r\n        if (defined(tangents)) {\r\n            tangents[offset] = tangent.x;\r\n            tangents[offset + 1] = tangent.y;\r\n            tangents[offset + 2] = tangent.z;\r\n        }\r\n        if (defined(bitangents)) {\r\n            bitangents[offset] = bitangent.x;\r\n            bitangents[offset + 1] = bitangent.y;\r\n            bitangents[offset + 2] = bitangent.z;\r\n        }\r\n        offset += 3;\r\n    }\r\n\r\n    st[stOffset] = 0.0;\r\n    st[stOffset + 1] = 0.0;\r\n    st[stOffset + 2] = 1.0;\r\n    st[stOffset + 3] = 0.0;\r\n    st[stOffset + 4] = 1.0;\r\n    st[stOffset + 5] = 1.0;\r\n    st[stOffset + 6] = 0.0;\r\n    st[stOffset + 7] = 1.0;\r\n}\r\n\r\nvar scratchRotationMatrix = new Matrix3();\r\nvar scratchViewMatrix = new Matrix4();\r\nvar scratchInverseMatrix = new Matrix4();\r\n\r\nvar scratchXDirection = new Cartesian3();\r\nvar scratchYDirection = new Cartesian3();\r\nvar scratchZDirection = new Cartesian3();\r\nvar scratchNegativeX = new Cartesian3();\r\nvar scratchNegativeY = new Cartesian3();\r\nvar scratchNegativeZ = new Cartesian3();\r\n\r\nvar frustumSplits = new Array(3);\r\n\r\nvar frustumCornersNDC = new Array(4);\r\nfrustumCornersNDC[0] = new Cartesian4(-1.0, -1.0, 1.0, 1.0);\r\nfrustumCornersNDC[1] = new Cartesian4(1.0, -1.0, 1.0, 1.0);\r\nfrustumCornersNDC[2] = new Cartesian4(1.0, 1.0, 1.0, 1.0);\r\nfrustumCornersNDC[3] = new Cartesian4(-1.0, 1.0, 1.0, 1.0);\r\n\r\nvar scratchFrustumCorners = new Array(4);\r\nfor (var i = 0; i < 4; ++i) {\r\n    scratchFrustumCorners[i] = new Cartesian4();\r\n}\r\n\r\nFrustumGeometry._computeNearFarPlanes = function (origin, orientation, frustumType, frustum, positions, xDirection, yDirection, zDirection) {\r\n    var rotationMatrix = Matrix3.fromQuaternion(orientation, scratchRotationMatrix);\r\n    var x = defaultValue(xDirection, scratchXDirection);\r\n    var y = defaultValue(yDirection, scratchYDirection);\r\n    var z = defaultValue(zDirection, scratchZDirection);\r\n\r\n    x = Matrix3.getColumn(rotationMatrix, 0, x);\r\n    y = Matrix3.getColumn(rotationMatrix, 1, y);\r\n    z = Matrix3.getColumn(rotationMatrix, 2, z);\r\n\r\n    Cartesian3.normalize(x, x);\r\n    Cartesian3.normalize(y, y);\r\n    Cartesian3.normalize(z, z);\r\n\r\n    Cartesian3.negate(x, x);\r\n\r\n    var view = Matrix4.computeView(origin, z, y, x, scratchViewMatrix);\r\n\r\n    var inverseView;\r\n    var inverseViewProjection;\r\n    if (frustumType === PERSPECTIVE) {\r\n        var projection = frustum.projectionMatrix;\r\n        var viewProjection = Matrix4.multiply(projection, view, scratchInverseMatrix);\r\n        inverseViewProjection = Matrix4.inverse(viewProjection, scratchInverseMatrix);\r\n    } else {\r\n        inverseView = Matrix4.inverseTransformation(view, scratchInverseMatrix);\r\n    }\r\n\r\n    if (defined(inverseViewProjection)) {\r\n        frustumSplits[0] = frustum.near;\r\n        frustumSplits[1] = frustum.far;\r\n    } else {\r\n        frustumSplits[0] = 0.0;\r\n        frustumSplits[1] = frustum.near;\r\n        frustumSplits[2] = frustum.far;\r\n    }\r\n\r\n    for (var i = 0; i < 2; ++i) {\r\n        for (var j = 0; j < 4; ++j) {\r\n            var corner = Cartesian4.clone(frustumCornersNDC[j], scratchFrustumCorners[j]);\r\n\r\n            if (!defined(inverseViewProjection)) {\r\n                if (defined(frustum._offCenterFrustum)) {\r\n                    frustum = frustum._offCenterFrustum;\r\n                }\r\n\r\n                var near = frustumSplits[i];\r\n                var far = frustumSplits[i + 1];\r\n\r\n                corner.x = (corner.x * (frustum.right - frustum.left) + frustum.left + frustum.right) * 0.5;\r\n                corner.y = (corner.y * (frustum.top - frustum.bottom) + frustum.bottom + frustum.top) * 0.5;\r\n                corner.z = (corner.z * (near - far) - near - far) * 0.5;\r\n                corner.w = 1.0;\r\n\r\n                Matrix4.multiplyByVector(inverseView, corner, corner);\r\n            } else {\r\n                corner = Matrix4.multiplyByVector(inverseViewProjection, corner, corner);\r\n\r\n                // Reverse perspective divide\r\n                var w = 1.0 / corner.w;\r\n                Cartesian3.multiplyByScalar(corner, w, corner);\r\n\r\n                Cartesian3.subtract(corner, origin, corner);\r\n                Cartesian3.normalize(corner, corner);\r\n\r\n                var fac = Cartesian3.dot(z, corner);\r\n                Cartesian3.multiplyByScalar(corner, frustumSplits[i] / fac, corner);\r\n                Cartesian3.add(corner, origin, corner);\r\n            }\r\n\r\n            positions[12 * i + j * 3] = corner.x;\r\n            positions[12 * i + j * 3 + 1] = corner.y;\r\n            positions[12 * i + j * 3 + 2] = corner.z;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of a frustum, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {FrustumGeometry} frustumGeometry A description of the frustum.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nFrustumGeometry.createGeometry = function (frustumGeometry) {\r\n    var frustumType = frustumGeometry._frustumType;\r\n    var frustum = frustumGeometry._frustum;\r\n    var origin = frustumGeometry._origin;\r\n    var orientation = frustumGeometry._orientation;\r\n    var drawNearPlane = frustumGeometry._drawNearPlane;\r\n    var vertexFormat = frustumGeometry._vertexFormat;\r\n\r\n    var numberOfPlanes = drawNearPlane ? 6 : 5;\r\n    var positions = new Float64Array(3 * 4 * 6);\r\n    FrustumGeometry._computeNearFarPlanes(origin, orientation, frustumType, frustum, positions);\r\n\r\n    // -x plane\r\n    var offset = 3 * 4 * 2;\r\n    positions[offset] = positions[3 * 4];\r\n    positions[offset + 1] = positions[3 * 4 + 1];\r\n    positions[offset + 2] = positions[3 * 4 + 2];\r\n    positions[offset + 3] = positions[0];\r\n    positions[offset + 4] = positions[1];\r\n    positions[offset + 5] = positions[2];\r\n    positions[offset + 6] = positions[3 * 3];\r\n    positions[offset + 7] = positions[3 * 3 + 1];\r\n    positions[offset + 8] = positions[3 * 3 + 2];\r\n    positions[offset + 9] = positions[3 * 7];\r\n    positions[offset + 10] = positions[3 * 7 + 1];\r\n    positions[offset + 11] = positions[3 * 7 + 2];\r\n\r\n    // -y plane\r\n    offset += 3 * 4;\r\n    positions[offset] = positions[3 * 5];\r\n    positions[offset + 1] = positions[3 * 5 + 1];\r\n    positions[offset + 2] = positions[3 * 5 + 2];\r\n    positions[offset + 3] = positions[3];\r\n    positions[offset + 4] = positions[3 + 1];\r\n    positions[offset + 5] = positions[3 + 2];\r\n    positions[offset + 6] = positions[0];\r\n    positions[offset + 7] = positions[1];\r\n    positions[offset + 8] = positions[2];\r\n    positions[offset + 9] = positions[3 * 4];\r\n    positions[offset + 10] = positions[3 * 4 + 1];\r\n    positions[offset + 11] = positions[3 * 4 + 2];\r\n\r\n    // +x plane\r\n    offset += 3 * 4;\r\n    positions[offset] = positions[3];\r\n    positions[offset + 1] = positions[3 + 1];\r\n    positions[offset + 2] = positions[3 + 2];\r\n    positions[offset + 3] = positions[3 * 5];\r\n    positions[offset + 4] = positions[3 * 5 + 1];\r\n    positions[offset + 5] = positions[3 * 5 + 2];\r\n    positions[offset + 6] = positions[3 * 6];\r\n    positions[offset + 7] = positions[3 * 6 + 1];\r\n    positions[offset + 8] = positions[3 * 6 + 2];\r\n    positions[offset + 9] = positions[3 * 2];\r\n    positions[offset + 10] = positions[3 * 2 + 1];\r\n    positions[offset + 11] = positions[3 * 2 + 2];\r\n\r\n    // +y plane\r\n    offset += 3 * 4;\r\n    positions[offset] = positions[3 * 2];\r\n    positions[offset + 1] = positions[3 * 2 + 1];\r\n    positions[offset + 2] = positions[3 * 2 + 2];\r\n    positions[offset + 3] = positions[3 * 6];\r\n    positions[offset + 4] = positions[3 * 6 + 1];\r\n    positions[offset + 5] = positions[3 * 6 + 2];\r\n    positions[offset + 6] = positions[3 * 7];\r\n    positions[offset + 7] = positions[3 * 7 + 1];\r\n    positions[offset + 8] = positions[3 * 7 + 2];\r\n    positions[offset + 9] = positions[3 * 3];\r\n    positions[offset + 10] = positions[3 * 3 + 1];\r\n    positions[offset + 11] = positions[3 * 3 + 2];\r\n\r\n    if (!drawNearPlane) {\r\n        positions = positions.subarray(3 * 4);\r\n    }\r\n\r\n    var attributes = new GeometryAttributes({\r\n        position: new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute: 3,\r\n            values: positions\r\n        })\r\n    });\r\n\r\n    if (defined(vertexFormat.normal) || defined(vertexFormat.tangent) || defined(vertexFormat.bitangent) || defined(vertexFormat.st)) {\r\n        var normals = defined(vertexFormat.normal) ? new Float32Array(3 * 4 * numberOfPlanes) : undefined;\r\n        var tangents = defined(vertexFormat.tangent) ? new Float32Array(3 * 4 * numberOfPlanes) : undefined;\r\n        var bitangents = defined(vertexFormat.bitangent) ? new Float32Array(3 * 4 * numberOfPlanes) : undefined;\r\n        var st = defined(vertexFormat.st) ? new Float32Array(2 * 4 * numberOfPlanes) : undefined;\r\n\r\n        var x = scratchXDirection;\r\n        var y = scratchYDirection;\r\n        var z = scratchZDirection;\r\n\r\n        var negativeX = Cartesian3.negate(x, scratchNegativeX);\r\n        var negativeY = Cartesian3.negate(y, scratchNegativeY);\r\n        var negativeZ = Cartesian3.negate(z, scratchNegativeZ);\r\n\r\n        offset = 0;\r\n        if (drawNearPlane) {\r\n            getAttributes(offset, normals, tangents, bitangents, st, negativeZ, x, y); // near\r\n            offset += 3 * 4;\r\n        }\r\n        getAttributes(offset, normals, tangents, bitangents, st, z, negativeX, y); // far\r\n        offset += 3 * 4;\r\n        getAttributes(offset, normals, tangents, bitangents, st, negativeX, negativeZ, y); // -x\r\n        offset += 3 * 4;\r\n        getAttributes(offset, normals, tangents, bitangents, st, negativeY, negativeZ, negativeX); // -y\r\n        offset += 3 * 4;\r\n        getAttributes(offset, normals, tangents, bitangents, st, x, z, y); // +x\r\n        offset += 3 * 4;\r\n        getAttributes(offset, normals, tangents, bitangents, st, y, z, negativeX); // +y\r\n\r\n        if (defined(normals)) {\r\n            attributes.normal = new GeometryAttribute({\r\n                componentDatatype: ComponentDatatype.FLOAT,\r\n                componentsPerAttribute: 3,\r\n                values: normals\r\n            });\r\n        }\r\n        if (defined(tangents)) {\r\n            attributes.tangent = new GeometryAttribute({\r\n                componentDatatype: ComponentDatatype.FLOAT,\r\n                componentsPerAttribute: 3,\r\n                values: tangents\r\n            });\r\n        }\r\n        if (defined(bitangents)) {\r\n            attributes.bitangent = new GeometryAttribute({\r\n                componentDatatype: ComponentDatatype.FLOAT,\r\n                componentsPerAttribute: 3,\r\n                values: bitangents\r\n            });\r\n        }\r\n        if (defined(st)) {\r\n            attributes.st = new GeometryAttribute({\r\n                componentDatatype: ComponentDatatype.FLOAT,\r\n                componentsPerAttribute: 2,\r\n                values: st\r\n            });\r\n        }\r\n    }\r\n\r\n    var indices = new Uint16Array(6 * numberOfPlanes);\r\n    for (var i = 0; i < numberOfPlanes; ++i) {\r\n        var indexOffset = i * 6;\r\n        var index = i * 4;\r\n\r\n        indices[indexOffset] = index;\r\n        indices[indexOffset + 1] = index + 1;\r\n        indices[indexOffset + 2] = index + 2;\r\n        indices[indexOffset + 3] = index;\r\n        indices[indexOffset + 4] = index + 2;\r\n        indices[indexOffset + 5] = index + 3;\r\n    }\r\n\r\n    return new Geometry({\r\n        attributes: attributes,\r\n        indices: indices,\r\n        primitiveType: PrimitiveType.TRIANGLES,\r\n        boundingSphere: BoundingSphere.fromVertices(positions)\r\n    });\r\n};\r\nexport default FrustumGeometry;\r\n"],"names":["defaultValue","Cartesian3","Plane","defined","DeveloperError","Cartesian4","Intersect","Matrix4","update","getPlanesRight","getPlanesNearCenter","CesiumMath","Check","VertexFormat","Quaternion","Matrix3","GeometryAttributes","GeometryAttribute","ComponentDatatype","Geometry","PrimitiveType","BoundingSphere"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;IAQA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,SAAS,aAAa,CAAC,MAAM,EAAE;IAC/B;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,MAAM,GAAGA,iBAAY,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;IAC3C,CAAC;AACD;IACA,IAAI,KAAK,GAAG,CAAC,IAAIC,qBAAU,EAAE,EAAE,IAAIA,qBAAU,EAAE,EAAE,IAAIA,qBAAU,EAAE,CAAC,CAAC;AACnEA,yBAAU,CAAC,KAAK,CAACA,qBAAU,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9CA,yBAAU,CAAC,KAAK,CAACA,qBAAU,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9CA,yBAAU,CAAC,KAAK,CAACA,qBAAU,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C;IACA,IAAI,kBAAkB,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC1C,IAAI,kBAAkB,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC1C,IAAI,YAAY,GAAG,IAAIC,WAAK,CAAC,IAAID,qBAAU,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;AACjE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,aAAa,CAAC,kBAAkB,GAAG,UAAU,cAAc,EAAE,MAAM,EAAE;IACrE;IACA,IAAI,IAAI,CAACE,YAAO,CAAC,cAAc,CAAC,EAAE;IAClC,QAAQ,MAAM,IAAIC,oBAAc,CAAC,6BAA6B,CAAC,CAAC;IAChE,KAAK;IACL;AACA;IACA,IAAI,IAAI,CAACD,YAAO,CAAC,MAAM,CAAC,EAAE;IAC1B,QAAQ,MAAM,GAAG,IAAI,aAAa,EAAE,CAAC;IACrC,KAAK;AACL;IACA,IAAI,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;IAC9B,IAAI,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;IAC/B,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,MAAM,CAAC;AAC/B;IACA,IAAI,IAAI,MAAM,GAAG,cAAc,CAAC,MAAM,CAAC;IACvC,IAAI,IAAI,MAAM,GAAG,cAAc,CAAC,MAAM,CAAC;AACvC;IACA,IAAI,IAAI,UAAU,GAAG,CAAC,CAAC;AACvB;IACA,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;IACrC,QAAQ,IAAI,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAClC;IACA,QAAQ,IAAI,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;IACxC,QAAQ,IAAI,MAAM,GAAG,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;AAC5C;IACA,QAAQ,IAAI,CAACA,YAAO,CAAC,MAAM,CAAC,EAAE;IAC9B,YAAY,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,IAAIE,qBAAU,EAAE,CAAC;IAC3D,SAAS;IACT,QAAQ,IAAI,CAACF,YAAO,CAAC,MAAM,CAAC,EAAE;IAC9B,YAAY,MAAM,GAAG,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,IAAIE,qBAAU,EAAE,CAAC;IAC/D,SAAS;AACT;IACA,QAAQJ,qBAAU,CAAC,gBAAgB,CAAC,UAAU,EAAE,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC;IAC7E,QAAQA,qBAAU,CAAC,GAAG,CAAC,MAAM,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,CAAC;AACvE;IACA,QAAQ,MAAM,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;IAChC,QAAQ,MAAM,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;IAChC,QAAQ,MAAM,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;IAChC,QAAQ,MAAM,CAAC,CAAC,GAAG,CAACA,qBAAU,CAAC,GAAG,CAAC,UAAU,EAAE,kBAAkB,CAAC,CAAC;AACnE;IACA,QAAQA,qBAAU,CAAC,gBAAgB,CAAC,UAAU,EAAE,MAAM,EAAE,kBAAkB,CAAC,CAAC;IAC5E,QAAQA,qBAAU,CAAC,GAAG,CAAC,MAAM,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,CAAC;AACvE;IACA,QAAQ,MAAM,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;IACjC,QAAQ,MAAM,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;IACjC,QAAQ,MAAM,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;IACjC,QAAQ,MAAM,CAAC,CAAC,GAAG,CAACA,qBAAU,CAAC,GAAG,CAACA,qBAAU,CAAC,MAAM,CAAC,UAAU,EAAE,kBAAkB,CAAC,EAAE,kBAAkB,CAAC,CAAC;AAC1G;IACA,QAAQ,UAAU,IAAI,CAAC,CAAC;IACxB,KAAK;AACL;IACA,IAAI,OAAO,MAAM,CAAC;IAClB,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA,aAAa,CAAC,SAAS,CAAC,iBAAiB,GAAG,UAAU,cAAc,EAAE;IACtE;IACA,IAAI,IAAI,CAACE,YAAO,CAAC,cAAc,CAAC,EAAE;IAClC,QAAQ,MAAM,IAAIC,oBAAc,CAAC,6BAA6B,CAAC,CAAC;IAChE,KAAK;IACL;AACA;IACA,IAAI,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IAC7B,IAAI,IAAI,YAAY,GAAG,KAAK,CAAC;IAC7B,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,EAAE;IACvD,QAAQ,IAAI,MAAM,GAAG,cAAc,CAAC,cAAc,CAACF,WAAK,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC,CAAC;IAClG,QAAQ,IAAI,MAAM,KAAKI,oBAAS,CAAC,OAAO,EAAE;IAC1C,YAAY,OAAOA,oBAAS,CAAC,OAAO,CAAC;IACrC,SAAS,MAAM,IAAI,MAAM,KAAKA,oBAAS,CAAC,YAAY,EAAE;IACtD,YAAY,YAAY,GAAG,IAAI,CAAC;IAChC,SAAS;IACT,KAAK;AACL;IACA,IAAI,OAAO,YAAY,GAAGA,oBAAS,CAAC,YAAY,GAAGA,oBAAS,CAAC,MAAM,CAAC;IACpE,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,aAAa,CAAC,SAAS,CAAC,8BAA8B,GAAG,UAAU,cAAc,EAAE,eAAe,EAAE;IACpG;IACA,IAAI,IAAI,CAACH,YAAO,CAAC,cAAc,CAAC,EAAE;IAClC,QAAQ,MAAM,IAAIC,oBAAc,CAAC,6BAA6B,CAAC,CAAC;IAChE,KAAK;IACL,IAAI,IAAI,CAACD,YAAO,CAAC,eAAe,CAAC,EAAE;IACnC,QAAQ,MAAM,IAAIC,oBAAc,CAAC,8BAA8B,CAAC,CAAC;IACjE,KAAK;IACL;AACA;IACA,IAAI,IAAI,eAAe,KAAK,aAAa,CAAC,YAAY,IAAI,eAAe,KAAK,aAAa,CAAC,WAAW,EAAE;IACzG;IACA,QAAQ,OAAO,eAAe,CAAC;IAC/B,KAAK;AACL;IACA;IACA;IACA,IAAI,IAAI,IAAI,GAAG,aAAa,CAAC,WAAW,CAAC;AACzC;IACA,IAAI,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IAC7B,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,EAAE;IACvD;IACA,QAAQ,IAAI,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACvC,QAAQ,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,eAAe,GAAG,IAAI,MAAM,CAAC,EAAE;IACtD;IACA,YAAY,SAAS;IACrB,SAAS;AACT;IACA,QAAQ,IAAI,MAAM,GAAG,cAAc,CAAC,cAAc,CAACF,WAAK,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC,CAAC;IAClG,QAAQ,IAAI,MAAM,KAAKI,oBAAS,CAAC,OAAO,EAAE;IAC1C,YAAY,OAAO,aAAa,CAAC,YAAY,CAAC;IAC9C,SAAS,MAAM,IAAI,MAAM,KAAKA,oBAAS,CAAC,YAAY,EAAE;IACtD,YAAY,IAAI,IAAI,IAAI,CAAC;IACzB,SAAS;IACT,KAAK;AACL;IACA,IAAI,OAAO,IAAI,CAAC;IAChB,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,aAAa,CAAC,YAAY,GAAG,UAAU,CAAC;AACxC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,aAAa,CAAC,WAAW,GAAG,UAAU,CAAC;AACvC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,aAAa,CAAC,kBAAkB,GAAG,UAAU;;ICjM7C;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,SAAS,4BAA4B,CAAC,OAAO,EAAE;IAC/C,IAAI,OAAO,GAAGN,iBAAY,CAAC,OAAO,EAAEA,iBAAY,CAAC,YAAY,CAAC,CAAC;AAC/D;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;IAC7B,IAAI,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;AAC3B;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;IAC/B,IAAI,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;AAC5B;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;IAC3B,IAAI,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;AAC1B;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IACjC,IAAI,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;AAC7B;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,IAAI,GAAGA,iBAAY,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAChD,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;AAC3B;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,GAAG,GAAGA,iBAAY,CAAC,OAAO,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;IACtD,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC;AACzB;IACA,IAAI,IAAI,CAAC,cAAc,GAAG,IAAI,aAAa,EAAE,CAAC;IAC9C,IAAI,IAAI,CAAC,mBAAmB,GAAG,IAAIO,kBAAO,EAAE,CAAC;IAC7C,CAAC;AACD;IACA,SAASC,QAAM,CAAC,OAAO,EAAE;IACzB;IACA,IAAI,IAAI,CAACL,YAAO,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAACA,YAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAACA,YAAO,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAACA,YAAO,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAACA,YAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAACA,YAAO,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;IACnK,QAAQ,MAAM,IAAIC,oBAAc,CAAC,gEAAgE,CAAC,CAAC;IACnG,KAAK;IACL;AACA;IACA,IAAI;IACJ,QAAQ,OAAO,CAAC,GAAG,KAAK,OAAO,CAAC,IAAI;IACpC,QAAQ,OAAO,CAAC,MAAM,KAAK,OAAO,CAAC,OAAO;IAC1C,QAAQ,OAAO,CAAC,IAAI,KAAK,OAAO,CAAC,KAAK;IACtC,QAAQ,OAAO,CAAC,KAAK,KAAK,OAAO,CAAC,MAAM;IACxC,QAAQ,OAAO,CAAC,IAAI,KAAK,OAAO,CAAC,KAAK;IACtC,QAAQ,OAAO,CAAC,GAAG,KAAK,OAAO,CAAC,IAAI;IACpC,MAAM;IACN;IACA,QAAQ,IAAI,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,KAAK,EAAE;IAC1C,YAAY,MAAM,IAAIA,oBAAc,CAAC,kCAAkC,CAAC,CAAC;IACzE,SAAS;IACT,QAAQ,IAAI,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE;IAC1C,YAAY,MAAM,IAAIA,oBAAc,CAAC,kCAAkC,CAAC,CAAC;IACzE,SAAS;IACT,QAAQ,IAAI,OAAO,CAAC,IAAI,IAAI,CAAC,IAAI,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,EAAE;IAC7D,YAAY,MAAM,IAAIA,oBAAc,CAAC,mDAAmD,CAAC,CAAC;IAC1F,SAAS;IACT;AACA;IACA,QAAQ,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC;IACrC,QAAQ,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC;IACvC,QAAQ,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC;IACnC,QAAQ,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC;IACzC,QAAQ,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC;IACrC,QAAQ,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC;IACnC,QAAQ,OAAO,CAAC,mBAAmB,GAAGG,kBAAO,CAAC,4BAA4B;IAC1E,YAAY,OAAO,CAAC,IAAI;IACxB,YAAY,OAAO,CAAC,KAAK;IACzB,YAAY,OAAO,CAAC,MAAM;IAC1B,YAAY,OAAO,CAAC,GAAG;IACvB,YAAY,OAAO,CAAC,IAAI;IACxB,YAAY,OAAO,CAAC,GAAG;IACvB,YAAY,OAAO,CAAC,mBAAmB;IACvC,SAAS,CAAC;IACV,KAAK;IACL,CAAC;AACD;IACA,MAAM,CAAC,gBAAgB,CAAC,4BAA4B,CAAC,SAAS,EAAE;IAChE;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,gBAAgB,EAAE;IACtB,QAAQ,GAAG,EAAE,YAAY;IACzB,YAAYC,QAAM,CAAC,IAAI,CAAC,CAAC;IACzB,YAAY,OAAO,IAAI,CAAC,mBAAmB,CAAC;IAC5C,SAAS;IACT,KAAK;IACL,CAAC,CAAC,CAAC;AACH;IACA,IAAIC,gBAAc,GAAG,IAAIR,qBAAU,EAAE,CAAC;IACtC,IAAIS,qBAAmB,GAAG,IAAIT,qBAAU,EAAE,CAAC;IAC3C,IAAI,cAAc,GAAG,IAAIA,qBAAU,EAAE,CAAC;IACtC,IAAI,aAAa,GAAG,IAAIA,qBAAU,EAAE,CAAC;AACrC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,4BAA4B,CAAC,SAAS,CAAC,oBAAoB,GAAG,UAAU,QAAQ,EAAE,SAAS,EAAE,EAAE,EAAE;IACjG;IACA,IAAI,IAAI,CAACE,YAAO,CAAC,QAAQ,CAAC,EAAE;IAC5B,QAAQ,MAAM,IAAIC,oBAAc,CAAC,uBAAuB,CAAC,CAAC;IAC1D,KAAK;IACL,IAAI,IAAI,CAACD,YAAO,CAAC,SAAS,CAAC,EAAE;IAC7B,QAAQ,MAAM,IAAIC,oBAAc,CAAC,wBAAwB,CAAC,CAAC;IAC3D,KAAK;IACL,IAAI,IAAI,CAACD,YAAO,CAAC,EAAE,CAAC,EAAE;IACtB,QAAQ,MAAM,IAAIC,oBAAc,CAAC,iBAAiB,CAAC,CAAC;IACpD,KAAK;IACL;AACA;IACA,IAAI,IAAI,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;IAC5C,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;IACrB,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;IACxB,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;IACvB,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;IACtB,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;IACtB,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;AACrB;IACA,IAAI,IAAI,KAAK,GAAGH,qBAAU,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,EAAEQ,gBAAc,CAAC,CAAC;IAChE,IAAIR,qBAAU,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACvC,IAAI,IAAI,UAAU,GAAGS,qBAAmB,CAAC;IACzC,IAAIT,qBAAU,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;IAC1D,IAAIA,qBAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;AACrD;IACA,IAAI,IAAI,KAAK,GAAG,cAAc,CAAC;AAC/B;IACA;IACA,IAAIA,qBAAU,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;IACjD,IAAIA,qBAAU,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;AAC7C;IACA,IAAI,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAC1B,IAAI,IAAI,CAACE,YAAO,CAAC,KAAK,CAAC,EAAE;IACzB,QAAQ,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAIE,qBAAU,EAAE,CAAC;IAC7C,KAAK;IACL,IAAI,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;IACtB,IAAI,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;IACtB,IAAI,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;IACtB,IAAI,KAAK,CAAC,CAAC,GAAG,CAACJ,qBAAU,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AAC5C;IACA;IACA,IAAIA,qBAAU,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;IACjD,IAAIA,qBAAU,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;AAC7C;IACA,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACtB,IAAI,IAAI,CAACE,YAAO,CAAC,KAAK,CAAC,EAAE;IACzB,QAAQ,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAIE,qBAAU,EAAE,CAAC;IAC7C,KAAK;IACL,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;IACvB,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;IACvB,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;IACvB,IAAI,KAAK,CAAC,CAAC,GAAG,CAACJ,qBAAU,CAAC,GAAG,CAACA,qBAAU,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,CAAC,EAAE,KAAK,CAAC,CAAC;AAC9E;IACA;IACA,IAAIA,qBAAU,CAAC,gBAAgB,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;IAC9C,IAAIA,qBAAU,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;AAC7C;IACA,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACtB,IAAI,IAAI,CAACE,YAAO,CAAC,KAAK,CAAC,EAAE;IACzB,QAAQ,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAIE,qBAAU,EAAE,CAAC;IAC7C,KAAK;IACL,IAAI,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IACnB,IAAI,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IACnB,IAAI,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IACnB,IAAI,KAAK,CAAC,CAAC,GAAG,CAACJ,qBAAU,CAAC,GAAG,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;AACzC;IACA;IACA,IAAIA,qBAAU,CAAC,gBAAgB,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;IAC9C,IAAIA,qBAAU,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;AAC7C;IACA,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACtB,IAAI,IAAI,CAACE,YAAO,CAAC,KAAK,CAAC,EAAE;IACzB,QAAQ,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAIE,qBAAU,EAAE,CAAC;IAC7C,KAAK;IACL,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;IACpB,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;IACpB,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;IACpB,IAAI,KAAK,CAAC,CAAC,GAAG,CAACJ,qBAAU,CAAC,GAAG,CAACA,qBAAU,CAAC,MAAM,CAAC,EAAE,EAAE,aAAa,CAAC,EAAE,KAAK,CAAC,CAAC;AAC3E;IACA;IACA,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACtB,IAAI,IAAI,CAACE,YAAO,CAAC,KAAK,CAAC,EAAE;IACzB,QAAQ,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAIE,qBAAU,EAAE,CAAC;IAC7C,KAAK;IACL,IAAI,KAAK,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IAC1B,IAAI,KAAK,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IAC1B,IAAI,KAAK,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IAC1B,IAAI,KAAK,CAAC,CAAC,GAAG,CAACJ,qBAAU,CAAC,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;AACrD;IACA;IACA,IAAIA,qBAAU,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;IACrD,IAAIA,qBAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;AAC3C;IACA,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACtB,IAAI,IAAI,CAACE,YAAO,CAAC,KAAK,CAAC,EAAE;IACzB,QAAQ,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAIE,qBAAU,EAAE,CAAC;IAC7C,KAAK;IACL,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;IAC3B,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;IAC3B,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;IAC3B,IAAI,KAAK,CAAC,CAAC,GAAG,CAACJ,qBAAU,CAAC,GAAG,CAACA,qBAAU,CAAC,MAAM,CAAC,SAAS,EAAE,aAAa,CAAC,EAAE,KAAK,CAAC,CAAC;AAClF;IACA,IAAI,OAAO,IAAI,CAAC,cAAc,CAAC;IAC/B,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,4BAA4B,CAAC,SAAS,CAAC,kBAAkB,GAAG,UAAU,kBAAkB,EAAE,mBAAmB,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,EAAE;IAC7I,IAAIO,QAAM,CAAC,IAAI,CAAC,CAAC;AACjB;IACA;IACA,IAAI,IAAI,CAACL,YAAO,CAAC,kBAAkB,CAAC,IAAI,CAACA,YAAO,CAAC,mBAAmB,CAAC,EAAE;IACvE,QAAQ,MAAM,IAAIC,oBAAc,CAAC,+DAA+D,CAAC,CAAC;IAClG,KAAK;IACL,IAAI,IAAI,kBAAkB,IAAI,CAAC,EAAE;IACjC,QAAQ,MAAM,IAAIA,oBAAc,CAAC,+CAA+C,CAAC,CAAC;IAClF,KAAK;IACL,IAAI,IAAI,mBAAmB,IAAI,CAAC,EAAE;IAClC,QAAQ,MAAM,IAAIA,oBAAc,CAAC,gDAAgD,CAAC,CAAC;IACnF,KAAK;IACL,IAAI,IAAI,CAACD,YAAO,CAAC,QAAQ,CAAC,EAAE;IAC5B,QAAQ,MAAM,IAAIC,oBAAc,CAAC,uBAAuB,CAAC,CAAC;IAC1D,KAAK;IACL,IAAI,IAAI,CAACD,YAAO,CAAC,UAAU,CAAC,EAAE;IAC9B,QAAQ,MAAM,IAAIC,oBAAc,CAAC,yBAAyB,CAAC,CAAC;IAC5D,KAAK;IACL,IAAI,IAAI,UAAU,IAAI,CAAC,EAAE;IACzB,QAAQ,MAAM,IAAIA,oBAAc,CAAC,uCAAuC,CAAC,CAAC;IAC1E,KAAK;IACL,IAAI,IAAI,CAACD,YAAO,CAAC,MAAM,CAAC,EAAE;IAC1B,QAAQ,MAAM,IAAIC,oBAAc,CAAC,8BAA8B,CAAC,CAAC;IACjE,KAAK;IACL;AACA;IACA,IAAI,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;IAC9C,IAAI,IAAI,aAAa,GAAG,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;IAC/C,IAAI,IAAI,UAAU,GAAG,CAAC,UAAU,GAAG,YAAY,IAAI,kBAAkB,CAAC;IACtE,IAAI,IAAI,WAAW,GAAG,CAAC,UAAU,GAAG,aAAa,IAAI,mBAAmB,CAAC;AACzE;IACA,IAAI,MAAM,CAAC,CAAC,GAAG,UAAU,CAAC;IAC1B,IAAI,MAAM,CAAC,CAAC,GAAG,WAAW,CAAC;IAC3B,IAAI,OAAO,MAAM,CAAC;IAClB,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA,4BAA4B,CAAC,SAAS,CAAC,KAAK,GAAG,UAAU,MAAM,EAAE;IACjE,IAAI,IAAI,CAACD,YAAO,CAAC,MAAM,CAAC,EAAE;IAC1B,QAAQ,MAAM,GAAG,IAAI,4BAA4B,EAAE,CAAC;IACpD,KAAK;AACL;IACA,IAAI,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IAC5B,IAAI,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;IAC9B,IAAI,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;IAC1B,IAAI,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IAChC,IAAI,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IAC5B,IAAI,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;AAC1B;IACA;IACA,IAAI,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC;IAC7B,IAAI,MAAM,CAAC,MAAM,GAAG,SAAS,CAAC;IAC9B,IAAI,MAAM,CAAC,IAAI,GAAG,SAAS,CAAC;IAC5B,IAAI,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC;IAC/B,IAAI,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC;IAC7B,IAAI,MAAM,CAAC,IAAI,GAAG,SAAS,CAAC;AAC5B;IACA,IAAI,OAAO,MAAM,CAAC;IAClB,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,4BAA4B,CAAC,SAAS,CAAC,MAAM,GAAG,UAAU,KAAK,EAAE;IACjE,IAAI;IACJ,QAAQA,YAAO,CAAC,KAAK,CAAC;IACtB,QAAQ,KAAK,YAAY,4BAA4B;IACrD,QAAQ,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK;IAClC,QAAQ,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI;IAChC,QAAQ,IAAI,CAAC,GAAG,KAAK,KAAK,CAAC,GAAG;IAC9B,QAAQ,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM;IACpC,QAAQ,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI;IAChC,QAAQ,IAAI,CAAC,GAAG,KAAK,KAAK,CAAC,GAAG;IAC9B,MAAM;IACN,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,4BAA4B,CAAC,SAAS,CAAC,aAAa,GAAG,UAAU,KAAK,EAAE,eAAe,EAAE,eAAe,EAAE;IAC1G,IAAI;IACJ,QAAQ,KAAK,KAAK,IAAI;IACtB,SAASA,YAAO,CAAC,KAAK,CAAC;IACvB,YAAY,KAAK,YAAY,4BAA4B;IACzD,YAAYQ,iBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,eAAe,EAAE,eAAe,CAAC;IAC/F,YAAYA,iBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,eAAe,EAAE,eAAe,CAAC;IAC7F,YAAYA,iBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,EAAE,eAAe,EAAE,eAAe,CAAC;IAC3F,YAAYA,iBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,EAAE,eAAe,EAAE,eAAe,CAAC;IACjG,YAAYA,iBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,eAAe,EAAE,eAAe,CAAC;IAC7F,YAAYA,iBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,EAAE,eAAe,EAAE,eAAe,CAAC,CAAC;IAC5F,MAAM;IACN,CAAC;;IC7YD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,SAAS,mBAAmB,CAAC,OAAO,EAAE;IACtC,IAAI,OAAO,GAAGX,iBAAY,CAAC,OAAO,EAAEA,iBAAY,CAAC,YAAY,CAAC,CAAC;AAC/D;IACA,IAAI,IAAI,CAAC,iBAAiB,GAAG,IAAI,4BAA4B,EAAE,CAAC;AAChE;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;IAC/B,IAAI,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;AAC5B;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;IAC3C,IAAI,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;AAClC;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,IAAI,GAAGA,iBAAY,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAChD,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;AAC3B;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,GAAG,GAAGA,iBAAY,CAAC,OAAO,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;IACtD,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC;IACzB,CAAC;AACD;IACA;IACA;IACA;IACA;IACA,mBAAmB,CAAC,YAAY,GAAG,CAAC,CAAC;AACrC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,mBAAmB,CAAC,IAAI,GAAG,UAAU,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE;IAClE;IACA,IAAIY,WAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACxC,IAAIA,WAAK,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAClC;AACA;IACA,IAAI,aAAa,GAAGZ,iBAAY,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;AACnD;IACA,IAAI,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC;IACzC,IAAI,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC;IAC/C,IAAI,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC;IACxC,IAAI,KAAK,CAAC,aAAa,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC;AACrC;IACA,IAAI,OAAO,KAAK,CAAC;IACjB,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,mBAAmB,CAAC,MAAM,GAAG,UAAU,KAAK,EAAE,aAAa,EAAE,MAAM,EAAE;IACrE;IACA,IAAIY,WAAK,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAClC;AACA;IACA,IAAI,aAAa,GAAGZ,iBAAY,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;AACnD;IACA,IAAI,IAAI,CAACG,YAAO,CAAC,MAAM,CAAC,EAAE;IAC1B,QAAQ,MAAM,GAAG,IAAI,mBAAmB,EAAE,CAAC;IAC3C,KAAK;AACL;IACA,IAAI,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IAC1C,IAAI,MAAM,CAAC,WAAW,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IAChD,IAAI,MAAM,CAAC,IAAI,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IACzC,IAAI,MAAM,CAAC,GAAG,GAAG,KAAK,CAAC,aAAa,CAAC,CAAC;AACtC;IACA,IAAI,OAAO,MAAM,CAAC;IAClB,CAAC,CAAC;AACF;IACA,SAASK,QAAM,CAAC,OAAO,EAAE;IACzB;IACA,IAAI,IAAI,CAACL,YAAO,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAACA,YAAO,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAACA,YAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAACA,YAAO,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;IACrH,QAAQ,MAAM,IAAIC,oBAAc,CAAC,0DAA0D,CAAC,CAAC;IAC7F,KAAK;IACL;AACA;IACA,IAAI,IAAI,CAAC,GAAG,OAAO,CAAC,iBAAiB,CAAC;AACtC;IACA,IAAI,IAAI,OAAO,CAAC,KAAK,KAAK,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,WAAW,KAAK,OAAO,CAAC,YAAY,IAAI,OAAO,CAAC,IAAI,KAAK,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,GAAG,KAAK,OAAO,CAAC,IAAI,EAAE;IAC5J;IACA,QAAQ,IAAI,OAAO,CAAC,WAAW,GAAG,CAAC,EAAE;IACrC,YAAY,MAAM,IAAIA,oBAAc,CAAC,+BAA+B,CAAC,CAAC;IACtE,SAAS;IACT,QAAQ,IAAI,OAAO,CAAC,IAAI,GAAG,CAAC,IAAI,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,EAAE;IAC5D,YAAY,MAAM,IAAIA,oBAAc,CAAC,mDAAmD,CAAC,CAAC;IAC1F,SAAS;IACT;AACA;IACA,QAAQ,OAAO,CAAC,YAAY,GAAG,OAAO,CAAC,WAAW,CAAC;IACnD,QAAQ,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC;IACvC,QAAQ,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC;IACrC,QAAQ,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC;AACnC;IACA,QAAQ,IAAI,KAAK,GAAG,GAAG,GAAG,OAAO,CAAC,WAAW,CAAC;IAC9C,QAAQ,CAAC,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,GAAG,GAAG,CAAC;IACtC,QAAQ,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC;IAC1B,QAAQ,CAAC,CAAC,GAAG,GAAG,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;IAChC,QAAQ,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;IAC1B,QAAQ,CAAC,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;IAC9B,QAAQ,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;IAC5B,KAAK;IACL,CAAC;AACD;IACA,MAAM,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,SAAS,EAAE;IACvD;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,gBAAgB,EAAE;IACtB,QAAQ,GAAG,EAAE,YAAY;IACzB,YAAYI,QAAM,CAAC,IAAI,CAAC,CAAC;IACzB,YAAY,OAAO,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC;IAC3D,SAAS;IACT,KAAK;IACL,CAAC,CAAC,CAAC;AACH;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,mBAAmB,CAAC,SAAS,CAAC,oBAAoB,GAAG,UAAU,QAAQ,EAAE,SAAS,EAAE,EAAE,EAAE;IACxF,IAAIA,QAAM,CAAC,IAAI,CAAC,CAAC;IACjB,IAAI,OAAO,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,QAAQ,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC;IAChF,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,mBAAmB,CAAC,SAAS,CAAC,kBAAkB,GAAG,UAAU,kBAAkB,EAAE,mBAAmB,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,EAAE;IACpI,IAAIA,QAAM,CAAC,IAAI,CAAC,CAAC;IACjB,IAAI,OAAO,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;IAC5H,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA,mBAAmB,CAAC,SAAS,CAAC,KAAK,GAAG,UAAU,MAAM,EAAE;IACxD,IAAI,IAAI,CAACL,YAAO,CAAC,MAAM,CAAC,EAAE;IAC1B,QAAQ,MAAM,GAAG,IAAI,mBAAmB,EAAE,CAAC;IAC3C,KAAK;AACL;IACA,IAAI,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;IAC1C,IAAI,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;IAC9B,IAAI,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IAC5B,IAAI,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;AAC1B;IACA;IACA,IAAI,MAAM,CAAC,YAAY,GAAG,SAAS,CAAC;IACpC,IAAI,MAAM,CAAC,MAAM,GAAG,SAAS,CAAC;IAC9B,IAAI,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC;IAC7B,IAAI,MAAM,CAAC,IAAI,GAAG,SAAS,CAAC;AAC5B;IACA,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;AAC3D;IACA,IAAI,OAAO,MAAM,CAAC;IAClB,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,mBAAmB,CAAC,SAAS,CAAC,MAAM,GAAG,UAAU,KAAK,EAAE;IACxD,IAAI,IAAI,CAACA,YAAO,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,YAAY,mBAAmB,CAAC,EAAE;IACpE,QAAQ,OAAO,KAAK,CAAC;IACrB,KAAK;AACL;IACA,IAAIK,QAAM,CAAC,IAAI,CAAC,CAAC;IACjB,IAAIA,QAAM,CAAC,KAAK,CAAC,CAAC;AAClB;IACA,IAAI,OAAO,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK,IAAI,IAAI,CAAC,WAAW,KAAK,KAAK,CAAC,WAAW,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;IAC1I,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,mBAAmB,CAAC,SAAS,CAAC,aAAa,GAAG,UAAU,KAAK,EAAE,eAAe,EAAE,eAAe,EAAE;IACjG,IAAI,IAAI,CAACL,YAAO,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,YAAY,mBAAmB,CAAC,EAAE;IACpE,QAAQ,OAAO,KAAK,CAAC;IACrB,KAAK;AACL;IACA,IAAIK,QAAM,CAAC,IAAI,CAAC,CAAC;IACjB,IAAIA,QAAM,CAAC,KAAK,CAAC,CAAC;AAClB;IACA,IAAI;IACJ,QAAQG,iBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,eAAe,EAAE,eAAe,CAAC;IAC3F,QAAQA,iBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,WAAW,EAAE,eAAe,EAAE,eAAe,CAAC;IACvG,QAAQ,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,KAAK,CAAC,iBAAiB,EAAE,eAAe,EAAE,eAAe,CAAC;IACvG,MAAM;IACN,CAAC;;ICnRD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,SAAS,2BAA2B,CAAC,OAAO,EAAE;IAC9C,IAAI,OAAO,GAAGX,iBAAY,CAAC,OAAO,EAAEA,iBAAY,CAAC,YAAY,CAAC,CAAC;AAC/D;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;IAC7B,IAAI,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;AAC3B;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;IAC/B,IAAI,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;AAC5B;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;IAC3B,IAAI,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;AAC1B;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IACjC,IAAI,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;AAC7B;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,IAAI,GAAGA,iBAAY,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAChD,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;AAC3B;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,GAAG,GAAGA,iBAAY,CAAC,OAAO,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;IACtD,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC;AACzB;IACA,IAAI,IAAI,CAAC,cAAc,GAAG,IAAI,aAAa,EAAE,CAAC;IAC9C,IAAI,IAAI,CAAC,kBAAkB,GAAG,IAAIO,kBAAO,EAAE,CAAC;IAC5C,IAAI,IAAI,CAAC,oBAAoB,GAAG,IAAIA,kBAAO,EAAE,CAAC;IAC9C,CAAC;AACD;IACA,SAASC,QAAM,CAAC,OAAO,EAAE;IACzB;IACA,IAAI,IAAI,CAACL,YAAO,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAACA,YAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAACA,YAAO,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAACA,YAAO,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAACA,YAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAACA,YAAO,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;IACnK,QAAQ,MAAM,IAAIC,oBAAc,CAAC,gEAAgE,CAAC,CAAC;IACnG,KAAK;IACL;AACA;IACA,IAAI,IAAI,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC;IACxB,IAAI,IAAI,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC;IAC3B,IAAI,IAAI,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC;IAC1B,IAAI,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC;IACzB,IAAI,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC;IACzB,IAAI,IAAI,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC;AACxB;IACA,IAAI,IAAI,CAAC,KAAK,OAAO,CAAC,IAAI,IAAI,CAAC,KAAK,OAAO,CAAC,OAAO,IAAI,CAAC,KAAK,OAAO,CAAC,KAAK,IAAI,CAAC,KAAK,OAAO,CAAC,MAAM,IAAI,CAAC,KAAK,OAAO,CAAC,KAAK,IAAI,CAAC,KAAK,OAAO,CAAC,IAAI,EAAE;IACjJ;IACA,QAAQ,IAAI,OAAO,CAAC,IAAI,IAAI,CAAC,IAAI,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,EAAE;IAC7D,YAAY,MAAM,IAAIA,oBAAc,CAAC,mDAAmD,CAAC,CAAC;IAC1F,SAAS;IACT;AACA;IACA,QAAQ,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC;IAC1B,QAAQ,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;IAC3B,QAAQ,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC;IACzB,QAAQ,OAAO,CAAC,OAAO,GAAG,CAAC,CAAC;IAC5B,QAAQ,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC;IAC1B,QAAQ,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC;IACzB,QAAQ,OAAO,CAAC,kBAAkB,GAAGG,kBAAO,CAAC,2BAA2B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,kBAAkB,CAAC,CAAC;IACvH,QAAQ,OAAO,CAAC,oBAAoB,GAAGA,kBAAO,CAAC,mCAAmC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,oBAAoB,CAAC,CAAC;IAChI,KAAK;IACL,CAAC;AACD;IACA,MAAM,CAAC,gBAAgB,CAAC,2BAA2B,CAAC,SAAS,EAAE;IAC/D;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,gBAAgB,EAAE;IACtB,QAAQ,GAAG,EAAE,YAAY;IACzB,YAAYC,QAAM,CAAC,IAAI,CAAC,CAAC;IACzB,YAAY,OAAO,IAAI,CAAC,kBAAkB,CAAC;IAC3C,SAAS;IACT,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,wBAAwB,EAAE;IAC9B,QAAQ,GAAG,EAAE,YAAY;IACzB,YAAYA,QAAM,CAAC,IAAI,CAAC,CAAC;IACzB,YAAY,OAAO,IAAI,CAAC,oBAAoB,CAAC;IAC7C,SAAS;IACT,KAAK;IACL,CAAC,CAAC,CAAC;AACH;IACA,IAAI,cAAc,GAAG,IAAIP,qBAAU,EAAE,CAAC;IACtC,IAAI,mBAAmB,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC3C,IAAI,kBAAkB,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC1C,IAAI,eAAe,GAAG,IAAIA,qBAAU,EAAE,CAAC;IACvC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,2BAA2B,CAAC,SAAS,CAAC,oBAAoB,GAAG,UAAU,QAAQ,EAAE,SAAS,EAAE,EAAE,EAAE;IAChG;IACA,IAAI,IAAI,CAACE,YAAO,CAAC,QAAQ,CAAC,EAAE;IAC5B,QAAQ,MAAM,IAAIC,oBAAc,CAAC,uBAAuB,CAAC,CAAC;IAC1D,KAAK;AACL;IACA,IAAI,IAAI,CAACD,YAAO,CAAC,SAAS,CAAC,EAAE;IAC7B,QAAQ,MAAM,IAAIC,oBAAc,CAAC,wBAAwB,CAAC,CAAC;IAC3D,KAAK;AACL;IACA,IAAI,IAAI,CAACD,YAAO,CAAC,EAAE,CAAC,EAAE;IACtB,QAAQ,MAAM,IAAIC,oBAAc,CAAC,iBAAiB,CAAC,CAAC;IACpD,KAAK;IACL;AACA;IACA,IAAI,IAAI,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;AAC5C;IACA,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;IACrB,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;IACxB,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;IACvB,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;IACtB,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;IACtB,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;AACrB;IACA,IAAI,IAAI,KAAK,GAAGH,qBAAU,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,EAAE,cAAc,CAAC,CAAC;AAChE;IACA,IAAI,IAAI,UAAU,GAAG,mBAAmB,CAAC;IACzC,IAAIA,qBAAU,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;IAC1D,IAAIA,qBAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;AACrD;IACA,IAAI,IAAI,SAAS,GAAG,kBAAkB,CAAC;IACvC,IAAIA,qBAAU,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;IACzD,IAAIA,qBAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;AACnD;IACA,IAAI,IAAI,MAAM,GAAG,eAAe,CAAC;AACjC;IACA;IACA,IAAIA,qBAAU,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;IAClD,IAAIA,qBAAU,CAAC,GAAG,CAAC,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IAC/C,IAAIA,qBAAU,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;IAClD,IAAIA,qBAAU,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACzC,IAAIA,qBAAU,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC;IACzC,IAAIA,qBAAU,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACzC;IACA,IAAI,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAC1B,IAAI,IAAI,CAACE,YAAO,CAAC,KAAK,CAAC,EAAE;IACzB,QAAQ,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAIE,qBAAU,EAAE,CAAC;IAC7C,KAAK;IACL,IAAI,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACvB,IAAI,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACvB,IAAI,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACvB,IAAI,KAAK,CAAC,CAAC,GAAG,CAACJ,qBAAU,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AAChD;IACA;IACA,IAAIA,qBAAU,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;IAClD,IAAIA,qBAAU,CAAC,GAAG,CAAC,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IAC/C,IAAIA,qBAAU,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;IAClD,IAAIA,qBAAU,CAAC,KAAK,CAAC,EAAE,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IACzC,IAAIA,qBAAU,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACzC;IACA,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACtB,IAAI,IAAI,CAACE,YAAO,CAAC,KAAK,CAAC,EAAE;IACzB,QAAQ,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAIE,qBAAU,EAAE,CAAC;IAC7C,KAAK;IACL,IAAI,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACvB,IAAI,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACvB,IAAI,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACvB,IAAI,KAAK,CAAC,CAAC,GAAG,CAACJ,qBAAU,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AAChD;IACA;IACA,IAAIA,qBAAU,CAAC,gBAAgB,CAAC,EAAE,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;IAC/C,IAAIA,qBAAU,CAAC,GAAG,CAAC,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IAC/C,IAAIA,qBAAU,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;IAClD,IAAIA,qBAAU,CAAC,KAAK,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IAC5C,IAAIA,qBAAU,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACzC;IACA,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACtB,IAAI,IAAI,CAACE,YAAO,CAAC,KAAK,CAAC,EAAE;IACzB,QAAQ,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAIE,qBAAU,EAAE,CAAC;IAC7C,KAAK;IACL,IAAI,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACvB,IAAI,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACvB,IAAI,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACvB,IAAI,KAAK,CAAC,CAAC,GAAG,CAACJ,qBAAU,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AAChD;IACA;IACA,IAAIA,qBAAU,CAAC,gBAAgB,CAAC,EAAE,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;IAC/C,IAAIA,qBAAU,CAAC,GAAG,CAAC,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IAC/C,IAAIA,qBAAU,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;IAClD,IAAIA,qBAAU,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IAC5C,IAAIA,qBAAU,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACzC;IACA,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACtB,IAAI,IAAI,CAACE,YAAO,CAAC,KAAK,CAAC,EAAE;IACzB,QAAQ,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAIE,qBAAU,EAAE,CAAC;IAC7C,KAAK;IACL,IAAI,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACvB,IAAI,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACvB,IAAI,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACvB,IAAI,KAAK,CAAC,CAAC,GAAG,CAACJ,qBAAU,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AAChD;IACA;IACA,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACtB,IAAI,IAAI,CAACE,YAAO,CAAC,KAAK,CAAC,EAAE;IACzB,QAAQ,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAIE,qBAAU,EAAE,CAAC;IAC7C,KAAK;IACL,IAAI,KAAK,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IAC1B,IAAI,KAAK,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IAC1B,IAAI,KAAK,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IAC1B,IAAI,KAAK,CAAC,CAAC,GAAG,CAACJ,qBAAU,CAAC,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;AACrD;IACA;IACA,IAAIA,qBAAU,CAAC,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;AACzC;IACA,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACtB,IAAI,IAAI,CAACE,YAAO,CAAC,KAAK,CAAC,EAAE;IACzB,QAAQ,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAIE,qBAAU,EAAE,CAAC;IAC7C,KAAK;IACL,IAAI,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACvB,IAAI,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACvB,IAAI,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACvB,IAAI,KAAK,CAAC,CAAC,GAAG,CAACJ,qBAAU,CAAC,GAAG,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AACjD;IACA,IAAI,OAAO,IAAI,CAAC,cAAc,CAAC;IAC/B,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,2BAA2B,CAAC,SAAS,CAAC,kBAAkB,GAAG,UAAU,kBAAkB,EAAE,mBAAmB,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,EAAE;IAC5I,IAAIO,QAAM,CAAC,IAAI,CAAC,CAAC;AACjB;IACA;IACA,IAAI,IAAI,CAACL,YAAO,CAAC,kBAAkB,CAAC,IAAI,CAACA,YAAO,CAAC,mBAAmB,CAAC,EAAE;IACvE,QAAQ,MAAM,IAAIC,oBAAc,CAAC,+DAA+D,CAAC,CAAC;IAClG,KAAK;IACL,IAAI,IAAI,kBAAkB,IAAI,CAAC,EAAE;IACjC,QAAQ,MAAM,IAAIA,oBAAc,CAAC,+CAA+C,CAAC,CAAC;IAClF,KAAK;IACL,IAAI,IAAI,mBAAmB,IAAI,CAAC,EAAE;IAClC,QAAQ,MAAM,IAAIA,oBAAc,CAAC,gDAAgD,CAAC,CAAC;IACnF,KAAK;IACL,IAAI,IAAI,CAACD,YAAO,CAAC,QAAQ,CAAC,EAAE;IAC5B,QAAQ,MAAM,IAAIC,oBAAc,CAAC,uBAAuB,CAAC,CAAC;IAC1D,KAAK;IACL,IAAI,IAAI,CAACD,YAAO,CAAC,UAAU,CAAC,EAAE;IAC9B,QAAQ,MAAM,IAAIC,oBAAc,CAAC,wBAAwB,CAAC,CAAC;IAC3D,KAAK;IACL,IAAI,IAAI,UAAU,IAAI,CAAC,EAAE;IACzB,QAAQ,MAAM,IAAIA,oBAAc,CAAC,uCAAuC,CAAC,CAAC;IAC1E,KAAK;IACL,IAAI,IAAI,CAACD,YAAO,CAAC,MAAM,CAAC,EAAE;IAC1B,QAAQ,MAAM,IAAIC,oBAAc,CAAC,8BAA8B,CAAC,CAAC;IACjE,KAAK;IACL;AACA;IACA,IAAI,IAAI,WAAW,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;IACtC,IAAI,IAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,GAAG,WAAW,CAAC;IAC1C,IAAI,IAAI,WAAW,GAAG,CAAC,GAAG,GAAG,UAAU,GAAG,QAAQ,GAAG,QAAQ,IAAI,mBAAmB,CAAC;IACrF,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC;IACxC,IAAI,IAAI,UAAU,GAAG,CAAC,GAAG,GAAG,UAAU,GAAG,QAAQ,GAAG,QAAQ,IAAI,kBAAkB,CAAC;AACnF;IACA,IAAI,MAAM,CAAC,CAAC,GAAG,UAAU,CAAC;IAC1B,IAAI,MAAM,CAAC,CAAC,GAAG,WAAW,CAAC;IAC3B,IAAI,OAAO,MAAM,CAAC;IAClB,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA,2BAA2B,CAAC,SAAS,CAAC,KAAK,GAAG,UAAU,MAAM,EAAE;IAChE,IAAI,IAAI,CAACD,YAAO,CAAC,MAAM,CAAC,EAAE;IAC1B,QAAQ,MAAM,GAAG,IAAI,2BAA2B,EAAE,CAAC;IACnD,KAAK;AACL;IACA,IAAI,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;IAC9B,IAAI,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IAC5B,IAAI,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;IAC1B,IAAI,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IAChC,IAAI,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IAC5B,IAAI,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;AAC1B;IACA;IACA,IAAI,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC;IAC7B,IAAI,MAAM,CAAC,MAAM,GAAG,SAAS,CAAC;IAC9B,IAAI,MAAM,CAAC,IAAI,GAAG,SAAS,CAAC;IAC5B,IAAI,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC;IAC/B,IAAI,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC;IAC7B,IAAI,MAAM,CAAC,IAAI,GAAG,SAAS,CAAC;AAC5B;IACA,IAAI,OAAO,MAAM,CAAC;IAClB,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,2BAA2B,CAAC,SAAS,CAAC,MAAM,GAAG,UAAU,KAAK,EAAE;IAChE,IAAI;IACJ,QAAQA,YAAO,CAAC,KAAK,CAAC;IACtB,QAAQ,KAAK,YAAY,2BAA2B;IACpD,QAAQ,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK;IAClC,QAAQ,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI;IAChC,QAAQ,IAAI,CAAC,GAAG,KAAK,KAAK,CAAC,GAAG;IAC9B,QAAQ,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM;IACpC,QAAQ,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI;IAChC,QAAQ,IAAI,CAAC,GAAG,KAAK,KAAK,CAAC,GAAG;IAC9B,MAAM;IACN,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,2BAA2B,CAAC,SAAS,CAAC,aAAa,GAAG,UAAU,KAAK,EAAE,eAAe,EAAE,eAAe,EAAE;IACzG,IAAI;IACJ,QAAQ,KAAK,KAAK,IAAI;IACtB,SAASA,YAAO,CAAC,KAAK,CAAC;IACvB,YAAY,KAAK,YAAY,2BAA2B;IACxD,YAAYQ,iBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,eAAe,EAAE,eAAe,CAAC;IAC/F,YAAYA,iBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,eAAe,EAAE,eAAe,CAAC;IAC7F,YAAYA,iBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,EAAE,eAAe,EAAE,eAAe,CAAC;IAC3F,YAAYA,iBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,EAAE,eAAe,EAAE,eAAe,CAAC;IACjG,YAAYA,iBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,eAAe,EAAE,eAAe,CAAC;IAC7F,YAAYA,iBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,EAAE,eAAe,EAAE,eAAe,CAAC,CAAC;IAC5F,MAAM;IACN,CAAC;;ICjbD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,SAAS,kBAAkB,CAAC,OAAO,EAAE;IACrC,IAAI,OAAO,GAAGX,iBAAY,CAAC,OAAO,EAAEA,iBAAY,CAAC,YAAY,CAAC,CAAC;AAC/D;IACA,IAAI,IAAI,CAAC,iBAAiB,GAAG,IAAI,2BAA2B,EAAE,CAAC;AAC/D;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;IAC3B,IAAI,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;IAC1B,IAAI,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;AAC3B;IACA,IAAI,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;AACrC;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;IAC3C,IAAI,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;AAClC;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,IAAI,GAAGA,iBAAY,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAChD,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;AAC3B;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,GAAG,GAAGA,iBAAY,CAAC,OAAO,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;IACtD,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC;AACzB;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,OAAO,GAAGA,iBAAY,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;IACtD,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC;AACjC;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,OAAO,GAAGA,iBAAY,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;IACtD,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC;IACjC,CAAC;AACD;IACA;IACA;IACA;IACA;IACA,kBAAkB,CAAC,YAAY,GAAG,CAAC,CAAC;AACpC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,kBAAkB,CAAC,IAAI,GAAG,UAAU,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE;IACjE;IACA,IAAIY,WAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACxC,IAAIA,WAAK,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAClC;AACA;IACA,IAAI,aAAa,GAAGZ,iBAAY,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;AACnD;IACA,IAAI,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC;IACvC,IAAI,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC;IAC/C,IAAI,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC;IACxC,IAAI,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC;IACvC,IAAI,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC;IAC3C,IAAI,KAAK,CAAC,aAAa,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC;AACzC;IACA,IAAI,OAAO,KAAK,CAAC;IACjB,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,kBAAkB,CAAC,MAAM,GAAG,UAAU,KAAK,EAAE,aAAa,EAAE,MAAM,EAAE;IACpE;IACA,IAAIY,WAAK,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAClC;AACA;IACA,IAAI,aAAa,GAAGZ,iBAAY,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;AACnD;IACA,IAAI,IAAI,CAACG,YAAO,CAAC,MAAM,CAAC,EAAE;IAC1B,QAAQ,MAAM,GAAG,IAAI,kBAAkB,EAAE,CAAC;IAC1C,KAAK;AACL;IACA,IAAI,MAAM,CAAC,GAAG,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IACxC,IAAI,MAAM,CAAC,WAAW,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IAChD,IAAI,MAAM,CAAC,IAAI,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IACzC,IAAI,MAAM,CAAC,GAAG,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IACxC,IAAI,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IAC5C,IAAI,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC,aAAa,CAAC,CAAC;AAC1C;IACA,IAAI,OAAO,MAAM,CAAC;IAClB,CAAC,CAAC;AACF;IACA,SAAS,MAAM,CAAC,OAAO,EAAE;IACzB;IACA,IAAI,IAAI,CAACA,YAAO,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAACA,YAAO,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAACA,YAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAACA,YAAO,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;IACnH,QAAQ,MAAM,IAAIC,oBAAc,CAAC,wDAAwD,CAAC,CAAC;IAC3F,KAAK;IACL;AACA;IACA,IAAI,IAAI,CAAC,GAAG,OAAO,CAAC,iBAAiB,CAAC;AACtC;IACA,IAAI;IACJ,QAAQ,OAAO,CAAC,GAAG,KAAK,OAAO,CAAC,IAAI;IACpC,QAAQ,OAAO,CAAC,WAAW,KAAK,OAAO,CAAC,YAAY;IACpD,QAAQ,OAAO,CAAC,IAAI,KAAK,OAAO,CAAC,KAAK;IACtC,QAAQ,OAAO,CAAC,GAAG,KAAK,OAAO,CAAC,IAAI;IACpC,QAAQ,OAAO,CAAC,OAAO,KAAK,OAAO,CAAC,QAAQ;IAC5C,QAAQ,OAAO,CAAC,OAAO,KAAK,OAAO,CAAC,QAAQ;IAC5C,MAAM;IACN;IACA,QAAQ,IAAI,OAAO,CAAC,GAAG,GAAG,CAAC,IAAI,OAAO,CAAC,GAAG,IAAI,IAAI,CAAC,EAAE,EAAE;IACvD,YAAY,MAAM,IAAIA,oBAAc,CAAC,mCAAmC,CAAC,CAAC;IAC1E,SAAS;AACT;IACA,QAAQ,IAAI,OAAO,CAAC,WAAW,GAAG,CAAC,EAAE;IACrC,YAAY,MAAM,IAAIA,oBAAc,CAAC,+BAA+B,CAAC,CAAC;IACtE,SAAS;AACT;IACA,QAAQ,IAAI,OAAO,CAAC,IAAI,GAAG,CAAC,IAAI,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,EAAE;IAC5D,YAAY,MAAM,IAAIA,oBAAc,CAAC,mDAAmD,CAAC,CAAC;IAC1F,SAAS;IACT;AACA;IACA,QAAQ,OAAO,CAAC,YAAY,GAAG,OAAO,CAAC,WAAW,CAAC;IACnD,QAAQ,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC;IACnC,QAAQ,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,WAAW,IAAI,CAAC,GAAG,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,OAAO,CAAC,WAAW,CAAC,GAAG,GAAG,CAAC;IACpI,QAAQ,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC;IACrC,QAAQ,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC;IACnC,QAAQ,OAAO,CAAC,eAAe,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;IACtE,QAAQ,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC;IAC3C,QAAQ,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC;AAC3C;IACA,QAAQ,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;IAC7D,QAAQ,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;IAC1B,QAAQ,CAAC,CAAC,KAAK,GAAG,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,GAAG,CAAC;IAC9C,QAAQ,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC;IAC1B,QAAQ,CAAC,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;IAC9B,QAAQ,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;AAC5B;IACA,QAAQ,CAAC,CAAC,KAAK,IAAI,OAAO,CAAC,OAAO,CAAC;IACnC,QAAQ,CAAC,CAAC,IAAI,IAAI,OAAO,CAAC,OAAO,CAAC;IAClC,QAAQ,CAAC,CAAC,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC;IACjC,QAAQ,CAAC,CAAC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC;IACpC,KAAK;IACL,CAAC;AACD;IACA,MAAM,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,SAAS,EAAE;IACtD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,gBAAgB,EAAE;IACtB,QAAQ,GAAG,EAAE,YAAY;IACzB,YAAY,MAAM,CAAC,IAAI,CAAC,CAAC;IACzB,YAAY,OAAO,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC;IAC3D,SAAS;IACT,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,wBAAwB,EAAE;IAC9B,QAAQ,GAAG,EAAE,YAAY;IACzB,YAAY,MAAM,CAAC,IAAI,CAAC,CAAC;IACzB,YAAY,OAAO,IAAI,CAAC,iBAAiB,CAAC,wBAAwB,CAAC;IACnE,SAAS;IACT,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,EAAE;IACV,QAAQ,GAAG,EAAE,YAAY;IACzB,YAAY,MAAM,CAAC,IAAI,CAAC,CAAC;IACzB,YAAY,OAAO,IAAI,CAAC,KAAK,CAAC;IAC9B,SAAS;IACT,KAAK;AACL;IACA;IACA;IACA;IACA;IACA,IAAI,cAAc,EAAE;IACpB,QAAQ,GAAG,EAAE,YAAY;IACzB,YAAY,MAAM,CAAC,IAAI,CAAC,CAAC;IACzB,YAAY,OAAO,IAAI,CAAC,eAAe,CAAC;IACxC,SAAS;IACT,KAAK;IACL,CAAC,CAAC,CAAC;AACH;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,kBAAkB,CAAC,SAAS,CAAC,oBAAoB,GAAG,UAAU,QAAQ,EAAE,SAAS,EAAE,EAAE,EAAE;IACvF,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC;IACjB,IAAI,OAAO,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,QAAQ,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC;IAChF,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,kBAAkB,CAAC,SAAS,CAAC,kBAAkB,GAAG,UAAU,kBAAkB,EAAE,mBAAmB,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,EAAE;IACnI,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC;IACjB,IAAI,OAAO,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;IAC5H,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA,kBAAkB,CAAC,SAAS,CAAC,KAAK,GAAG,UAAU,MAAM,EAAE;IACvD,IAAI,IAAI,CAACD,YAAO,CAAC,MAAM,CAAC,EAAE;IAC1B,QAAQ,MAAM,GAAG,IAAI,kBAAkB,EAAE,CAAC;IAC1C,KAAK;AACL;IACA,IAAI,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;IAC1C,IAAI,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;IAC1B,IAAI,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IAC5B,IAAI,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;AAC1B;IACA;IACA,IAAI,MAAM,CAAC,YAAY,GAAG,SAAS,CAAC;IACpC,IAAI,MAAM,CAAC,IAAI,GAAG,SAAS,CAAC;IAC5B,IAAI,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC;IAC7B,IAAI,MAAM,CAAC,IAAI,GAAG,SAAS,CAAC;AAC5B;IACA,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;AAC3D;IACA,IAAI,OAAO,MAAM,CAAC;IAClB,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,kBAAkB,CAAC,SAAS,CAAC,MAAM,GAAG,UAAU,KAAK,EAAE;IACvD,IAAI,IAAI,CAACA,YAAO,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,YAAY,kBAAkB,CAAC,EAAE;IACnE,QAAQ,OAAO,KAAK,CAAC;IACrB,KAAK;AACL;IACA,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC;IACjB,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC;AAClB;IACA,IAAI,OAAO,IAAI,CAAC,GAAG,KAAK,KAAK,CAAC,GAAG,IAAI,IAAI,CAAC,WAAW,KAAK,KAAK,CAAC,WAAW,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACtI,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,kBAAkB,CAAC,SAAS,CAAC,aAAa,GAAG,UAAU,KAAK,EAAE,eAAe,EAAE,eAAe,EAAE;IAChG,IAAI,IAAI,CAACA,YAAO,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,YAAY,kBAAkB,CAAC,EAAE;IACnE,QAAQ,OAAO,KAAK,CAAC;IACrB,KAAK;AACL;IACA,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC;IACjB,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC;AAClB;IACA,IAAI;IACJ,QAAQQ,iBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,EAAE,eAAe,EAAE,eAAe,CAAC;IACvF,QAAQA,iBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,WAAW,EAAE,eAAe,EAAE,eAAe,CAAC;IACvG,QAAQ,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,KAAK,CAAC,iBAAiB,EAAE,eAAe,EAAE,eAAe,CAAC;IACvG,MAAM;IACN,CAAC;;ICjXD,IAAI,WAAW,GAAG,CAAC,CAAC;IACpB,IAAI,YAAY,GAAG,CAAC,CAAC;AACrB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,SAAS,eAAe,CAAC,OAAO,EAAE;IAClC;IACA,IAAIC,WAAK,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAC5C,IAAIA,WAAK,CAAC,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;IAC5D,IAAIA,WAAK,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;IAC1D,IAAIA,WAAK,CAAC,MAAM,CAAC,MAAM,CAAC,qBAAqB,EAAE,OAAO,CAAC,WAAW,CAAC,CAAC;IACpE;AACA;IACA,IAAI,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;IAClC,IAAI,IAAI,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;IAC1C,IAAI,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IAChC,IAAI,IAAI,YAAY,GAAGZ,iBAAY,CAAC,OAAO,CAAC,YAAY,EAAEa,yBAAY,CAAC,OAAO,CAAC,CAAC;AAChF;IACA;IACA;IACA;IACA,IAAI,IAAI,aAAa,GAAGb,iBAAY,CAAC,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;AACnE;IACA,IAAI,IAAI,WAAW,CAAC;IACpB,IAAI,IAAI,mBAAmB,CAAC;IAC5B,IAAI,IAAI,OAAO,YAAY,kBAAkB,EAAE;IAC/C,QAAQ,WAAW,GAAG,WAAW,CAAC;IAClC,QAAQ,mBAAmB,GAAG,kBAAkB,CAAC,YAAY,CAAC;IAC9D,KAAK,MAAM,IAAI,OAAO,YAAY,mBAAmB,EAAE;IACvD,QAAQ,WAAW,GAAG,YAAY,CAAC;IACnC,QAAQ,mBAAmB,GAAG,mBAAmB,CAAC,YAAY,CAAC;IAC/D,KAAK;AACL;IACA,IAAI,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IACpC,IAAI,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC;IACpC,IAAI,IAAI,CAAC,OAAO,GAAGC,qBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAC5C,IAAI,IAAI,CAAC,YAAY,GAAGa,qBAAU,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IACtD,IAAI,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IACxC,IAAI,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;IACtC,IAAI,IAAI,CAAC,WAAW,GAAG,uBAAuB,CAAC;AAC/C;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,YAAY,GAAG,CAAC,GAAG,mBAAmB,GAAGb,qBAAU,CAAC,YAAY,GAAGa,qBAAU,CAAC,YAAY,GAAGD,yBAAY,CAAC,YAAY,CAAC;IAChI,CAAC;AACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,eAAe,CAAC,IAAI,GAAG,UAAU,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE;IAC9D;IACA,IAAID,WAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACxC,IAAIA,WAAK,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAClC;AACA;IACA,IAAI,aAAa,GAAGZ,iBAAY,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;AACnD;IACA,IAAI,IAAI,WAAW,GAAG,KAAK,CAAC,YAAY,CAAC;IACzC,IAAI,IAAI,OAAO,GAAG,KAAK,CAAC,QAAQ,CAAC;AACjC;IACA,IAAI,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,WAAW,CAAC;AACzC;IACA,IAAI,IAAI,WAAW,KAAK,WAAW,EAAE;IACrC,QAAQ,kBAAkB,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;IAC/D,QAAQ,aAAa,IAAI,kBAAkB,CAAC,YAAY,CAAC;IACzD,KAAK,MAAM;IACX,QAAQ,mBAAmB,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;IAChE,QAAQ,aAAa,IAAI,mBAAmB,CAAC,YAAY,CAAC;IAC1D,KAAK;AACL;IACA,IAAIC,qBAAU,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;IACzD,IAAI,aAAa,IAAIA,qBAAU,CAAC,YAAY,CAAC;IAC7C,IAAIa,qBAAU,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;IAC9D,IAAI,aAAa,IAAIA,qBAAU,CAAC,YAAY,CAAC;IAC7C,IAAID,yBAAY,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;IACjE,IAAI,aAAa,IAAIA,yBAAY,CAAC,YAAY,CAAC;IAC/C,IAAI,KAAK,CAAC,aAAa,CAAC,GAAG,KAAK,CAAC,cAAc,GAAG,GAAG,GAAG,GAAG,CAAC;AAC5D;IACA,IAAI,OAAO,KAAK,CAAC;IACjB,CAAC,CAAC;AACF;IACA,IAAI,sBAAsB,GAAG,IAAI,kBAAkB,EAAE,CAAC;IACtD,IAAI,uBAAuB,GAAG,IAAI,mBAAmB,EAAE,CAAC;IACxD,IAAI,qBAAqB,GAAG,IAAIC,qBAAU,EAAE,CAAC;IAC7C,IAAI,iBAAiB,GAAG,IAAIb,qBAAU,EAAE,CAAC;IACzC,IAAI,mBAAmB,GAAG,IAAIY,yBAAY,EAAE,CAAC;AAC7C;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,eAAe,CAAC,MAAM,GAAG,UAAU,KAAK,EAAE,aAAa,EAAE,MAAM,EAAE;IACjE;IACA,IAAID,WAAK,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAClC;AACA;IACA,IAAI,aAAa,GAAGZ,iBAAY,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;AACnD;IACA,IAAI,IAAI,WAAW,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;AAC7C;IACA,IAAI,IAAI,OAAO,CAAC;IAChB,IAAI,IAAI,WAAW,KAAK,WAAW,EAAE;IACrC,QAAQ,OAAO,GAAG,kBAAkB,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,EAAE,sBAAsB,CAAC,CAAC;IAC1F,QAAQ,aAAa,IAAI,kBAAkB,CAAC,YAAY,CAAC;IACzD,KAAK,MAAM;IACX,QAAQ,OAAO,GAAG,mBAAmB,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,EAAE,uBAAuB,CAAC,CAAC;IAC5F,QAAQ,aAAa,IAAI,mBAAmB,CAAC,YAAY,CAAC;IAC1D,KAAK;AACL;IACA,IAAI,IAAI,MAAM,GAAGC,qBAAU,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;IAC5E,IAAI,aAAa,IAAIA,qBAAU,CAAC,YAAY,CAAC;IAC7C,IAAI,IAAI,WAAW,GAAGa,qBAAU,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,EAAE,qBAAqB,CAAC,CAAC;IACrF,IAAI,aAAa,IAAIA,qBAAU,CAAC,YAAY,CAAC;IAC7C,IAAI,IAAI,YAAY,GAAGD,yBAAY,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,EAAE,mBAAmB,CAAC,CAAC;IACtF,IAAI,aAAa,IAAIA,yBAAY,CAAC,YAAY,CAAC;IAC/C,IAAI,IAAI,aAAa,GAAG,KAAK,CAAC,aAAa,CAAC,KAAK,GAAG,CAAC;AACrD;IACA,IAAI,IAAI,CAACV,YAAO,CAAC,MAAM,CAAC,EAAE;IAC1B,QAAQ,OAAO,IAAI,eAAe,CAAC;IACnC,YAAY,OAAO,EAAE,OAAO;IAC5B,YAAY,MAAM,EAAE,MAAM;IAC1B,YAAY,WAAW,EAAE,WAAW;IACpC,YAAY,YAAY,EAAE,YAAY;IACtC,YAAY,cAAc,EAAE,aAAa;IACzC,SAAS,CAAC,CAAC;IACX,KAAK;AACL;IACA,IAAI,IAAI,aAAa,GAAG,WAAW,KAAK,MAAM,CAAC,YAAY,GAAG,MAAM,CAAC,QAAQ,GAAG,SAAS,CAAC;IAC1F,IAAI,MAAM,CAAC,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;AACnD;IACA,IAAI,MAAM,CAAC,YAAY,GAAG,WAAW,CAAC;IACtC,IAAI,MAAM,CAAC,OAAO,GAAGF,qBAAU,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;IAC9D,IAAI,MAAM,CAAC,YAAY,GAAGa,qBAAU,CAAC,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC,YAAY,CAAC,CAAC;IAC7E,IAAI,MAAM,CAAC,aAAa,GAAGD,yBAAY,CAAC,KAAK,CAAC,YAAY,EAAE,MAAM,CAAC,aAAa,CAAC,CAAC;IAClF,IAAI,MAAM,CAAC,cAAc,GAAG,aAAa,CAAC;AAC1C;IACA,IAAI,OAAO,MAAM,CAAC;IAClB,CAAC,CAAC;AACF;IACA,SAAS,aAAa,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE;IAC9F,IAAI,IAAI,QAAQ,GAAG,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC;AACpC;IACA,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IAChC,QAAQ,IAAIV,YAAO,CAAC,OAAO,CAAC,EAAE;IAC9B,YAAY,OAAO,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACvC,YAAY,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC3C,YAAY,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC3C,SAAS;IACT,QAAQ,IAAIA,YAAO,CAAC,QAAQ,CAAC,EAAE;IAC/B,YAAY,QAAQ,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;IACzC,YAAY,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;IAC7C,YAAY,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;IAC7C,SAAS;IACT,QAAQ,IAAIA,YAAO,CAAC,UAAU,CAAC,EAAE;IACjC,YAAY,UAAU,CAAC,MAAM,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IAC7C,YAAY,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IACjD,YAAY,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IACjD,SAAS;IACT,QAAQ,MAAM,IAAI,CAAC,CAAC;IACpB,KAAK;AACL;IACA,IAAI,EAAE,CAAC,QAAQ,CAAC,GAAG,GAAG,CAAC;IACvB,IAAI,EAAE,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;IAC3B,IAAI,EAAE,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;IAC3B,IAAI,EAAE,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;IAC3B,IAAI,EAAE,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;IAC3B,IAAI,EAAE,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;IAC3B,IAAI,EAAE,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;IAC3B,IAAI,EAAE,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;IAC3B,CAAC;AACD;IACA,IAAI,qBAAqB,GAAG,IAAIY,kBAAO,EAAE,CAAC;IAC1C,IAAI,iBAAiB,GAAG,IAAIR,kBAAO,EAAE,CAAC;IACtC,IAAI,oBAAoB,GAAG,IAAIA,kBAAO,EAAE,CAAC;AACzC;IACA,IAAI,iBAAiB,GAAG,IAAIN,qBAAU,EAAE,CAAC;IACzC,IAAI,iBAAiB,GAAG,IAAIA,qBAAU,EAAE,CAAC;IACzC,IAAI,iBAAiB,GAAG,IAAIA,qBAAU,EAAE,CAAC;IACzC,IAAI,gBAAgB,GAAG,IAAIA,qBAAU,EAAE,CAAC;IACxC,IAAI,gBAAgB,GAAG,IAAIA,qBAAU,EAAE,CAAC;IACxC,IAAI,gBAAgB,GAAG,IAAIA,qBAAU,EAAE,CAAC;AACxC;IACA,IAAI,aAAa,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;AACjC;IACA,IAAI,iBAAiB,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;IACrC,iBAAiB,CAAC,CAAC,CAAC,GAAG,IAAII,qBAAU,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC5D,iBAAiB,CAAC,CAAC,CAAC,GAAG,IAAIA,qBAAU,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC3D,iBAAiB,CAAC,CAAC,CAAC,GAAG,IAAIA,qBAAU,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC1D,iBAAiB,CAAC,CAAC,CAAC,GAAG,IAAIA,qBAAU,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AAC3D;IACA,IAAI,qBAAqB,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;IACzC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IAC5B,IAAI,qBAAqB,CAAC,CAAC,CAAC,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAChD,CAAC;AACD;IACA,eAAe,CAAC,qBAAqB,GAAG,UAAU,MAAM,EAAE,WAAW,EAAE,WAAW,EAAE,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE;IAC5I,IAAI,IAAI,cAAc,GAAGU,kBAAO,CAAC,cAAc,CAAC,WAAW,EAAE,qBAAqB,CAAC,CAAC;IACpF,IAAI,IAAI,CAAC,GAAGf,iBAAY,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;IACxD,IAAI,IAAI,CAAC,GAAGA,iBAAY,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;IACxD,IAAI,IAAI,CAAC,GAAGA,iBAAY,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;AACxD;IACA,IAAI,CAAC,GAAGe,kBAAO,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAChD,IAAI,CAAC,GAAGA,kBAAO,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAChD,IAAI,CAAC,GAAGA,kBAAO,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAChD;IACA,IAAId,qBAAU,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/B,IAAIA,qBAAU,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/B,IAAIA,qBAAU,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC/B;IACA,IAAIA,qBAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC5B;IACA,IAAI,IAAI,IAAI,GAAGM,kBAAO,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,iBAAiB,CAAC,CAAC;AACvE;IACA,IAAI,IAAI,WAAW,CAAC;IACpB,IAAI,IAAI,qBAAqB,CAAC;IAC9B,IAAI,IAAI,WAAW,KAAK,WAAW,EAAE;IACrC,QAAQ,IAAI,UAAU,GAAG,OAAO,CAAC,gBAAgB,CAAC;IAClD,QAAQ,IAAI,cAAc,GAAGA,kBAAO,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,EAAE,oBAAoB,CAAC,CAAC;IACtF,QAAQ,qBAAqB,GAAGA,kBAAO,CAAC,OAAO,CAAC,cAAc,EAAE,oBAAoB,CAAC,CAAC;IACtF,KAAK,MAAM;IACX,QAAQ,WAAW,GAAGA,kBAAO,CAAC,qBAAqB,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;IAChF,KAAK;AACL;IACA,IAAI,IAAIJ,YAAO,CAAC,qBAAqB,CAAC,EAAE;IACxC,QAAQ,aAAa,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC;IACxC,QAAQ,aAAa,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC;IACvC,KAAK,MAAM;IACX,QAAQ,aAAa,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;IAC/B,QAAQ,aAAa,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC;IACxC,QAAQ,aAAa,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC;IACvC,KAAK;AACL;IACA,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IAChC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IACpC,YAAY,IAAI,MAAM,GAAGE,qBAAU,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1F;IACA,YAAY,IAAI,CAACF,YAAO,CAAC,qBAAqB,CAAC,EAAE;IACjD,gBAAgB,IAAIA,YAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC,EAAE;IACxD,oBAAoB,OAAO,GAAG,OAAO,CAAC,iBAAiB,CAAC;IACxD,iBAAiB;AACjB;IACA,gBAAgB,IAAI,IAAI,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;IAC5C,gBAAgB,IAAI,GAAG,GAAG,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AAC/C;IACA,gBAAgB,MAAM,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,KAAK,IAAI,GAAG,CAAC;IAC5G,gBAAgB,MAAM,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC;IAC5G,gBAAgB,MAAM,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,IAAI,GAAG,GAAG,CAAC,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,CAAC;IACxE,gBAAgB,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;AAC/B;IACA,gBAAgBI,kBAAO,CAAC,gBAAgB,CAAC,WAAW,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IACtE,aAAa,MAAM;IACnB,gBAAgB,MAAM,GAAGA,kBAAO,CAAC,gBAAgB,CAAC,qBAAqB,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;AACzF;IACA;IACA,gBAAgB,IAAI,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC;IACvC,gBAAgBN,qBAAU,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;AAC/D;IACA,gBAAgBA,qBAAU,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IAC5D,gBAAgBA,qBAAU,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACrD;IACA,gBAAgB,IAAI,GAAG,GAAGA,qBAAU,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IACpD,gBAAgBA,qBAAU,CAAC,gBAAgB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,MAAM,CAAC,CAAC;IACpF,gBAAgBA,qBAAU,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IACvD,aAAa;AACb;IACA,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACjD,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACrD,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACrD,SAAS;IACT,KAAK;IACL,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA,eAAe,CAAC,cAAc,GAAG,UAAU,eAAe,EAAE;IAC5D,IAAI,IAAI,WAAW,GAAG,eAAe,CAAC,YAAY,CAAC;IACnD,IAAI,IAAI,OAAO,GAAG,eAAe,CAAC,QAAQ,CAAC;IAC3C,IAAI,IAAI,MAAM,GAAG,eAAe,CAAC,OAAO,CAAC;IACzC,IAAI,IAAI,WAAW,GAAG,eAAe,CAAC,YAAY,CAAC;IACnD,IAAI,IAAI,aAAa,GAAG,eAAe,CAAC,cAAc,CAAC;IACvD,IAAI,IAAI,YAAY,GAAG,eAAe,CAAC,aAAa,CAAC;AACrD;IACA,IAAI,IAAI,cAAc,GAAG,aAAa,GAAG,CAAC,GAAG,CAAC,CAAC;IAC/C,IAAI,IAAI,SAAS,GAAG,IAAI,YAAY,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IAChD,IAAI,eAAe,CAAC,qBAAqB,CAAC,MAAM,EAAE,WAAW,EAAE,WAAW,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;AAChG;IACA;IACA,IAAI,IAAI,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC3B,IAAI,SAAS,CAAC,MAAM,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACzC,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACjD,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACjD,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;IACzC,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;IACzC,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;IACzC,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7C,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACjD,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACjD,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7C,IAAI,SAAS,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IAClD,IAAI,SAAS,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;AAClD;IACA;IACA,IAAI,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC;IACpB,IAAI,SAAS,CAAC,MAAM,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACzC,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACjD,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACjD,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;IACzC,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7C,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7C,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;IACzC,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;IACzC,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;IACzC,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7C,IAAI,SAAS,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IAClD,IAAI,SAAS,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;AAClD;IACA;IACA,IAAI,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC;IACpB,IAAI,SAAS,CAAC,MAAM,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;IACrC,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7C,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7C,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7C,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACjD,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACjD,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7C,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACjD,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACjD,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7C,IAAI,SAAS,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IAClD,IAAI,SAAS,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;AAClD;IACA;IACA,IAAI,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC;IACpB,IAAI,SAAS,CAAC,MAAM,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACzC,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACjD,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACjD,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7C,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACjD,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACjD,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7C,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACjD,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACjD,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7C,IAAI,SAAS,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IAClD,IAAI,SAAS,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;AAClD;IACA,IAAI,IAAI,CAAC,aAAa,EAAE;IACxB,QAAQ,SAAS,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC9C,KAAK;AACL;IACA,IAAI,IAAI,UAAU,GAAG,IAAIe,qCAAkB,CAAC;IAC5C,QAAQ,QAAQ,EAAE,IAAIC,mCAAiB,CAAC;IACxC,YAAY,iBAAiB,EAAEC,mCAAiB,CAAC,MAAM;IACvD,YAAY,sBAAsB,EAAE,CAAC;IACrC,YAAY,MAAM,EAAE,SAAS;IAC7B,SAAS,CAAC;IACV,KAAK,CAAC,CAAC;AACP;IACA,IAAI,IAAIf,YAAO,CAAC,YAAY,CAAC,MAAM,CAAC,IAAIA,YAAO,CAAC,YAAY,CAAC,OAAO,CAAC,IAAIA,YAAO,CAAC,YAAY,CAAC,SAAS,CAAC,IAAIA,YAAO,CAAC,YAAY,CAAC,EAAE,CAAC,EAAE;IACtI,QAAQ,IAAI,OAAO,GAAGA,YAAO,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,IAAI,YAAY,CAAC,CAAC,GAAG,CAAC,GAAG,cAAc,CAAC,GAAG,SAAS,CAAC;IAC1G,QAAQ,IAAI,QAAQ,GAAGA,YAAO,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,IAAI,YAAY,CAAC,CAAC,GAAG,CAAC,GAAG,cAAc,CAAC,GAAG,SAAS,CAAC;IAC5G,QAAQ,IAAI,UAAU,GAAGA,YAAO,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,IAAI,YAAY,CAAC,CAAC,GAAG,CAAC,GAAG,cAAc,CAAC,GAAG,SAAS,CAAC;IAChH,QAAQ,IAAI,EAAE,GAAGA,YAAO,CAAC,YAAY,CAAC,EAAE,CAAC,GAAG,IAAI,YAAY,CAAC,CAAC,GAAG,CAAC,GAAG,cAAc,CAAC,GAAG,SAAS,CAAC;AACjG;IACA,QAAQ,IAAI,CAAC,GAAG,iBAAiB,CAAC;IAClC,QAAQ,IAAI,CAAC,GAAG,iBAAiB,CAAC;IAClC,QAAQ,IAAI,CAAC,GAAG,iBAAiB,CAAC;AAClC;IACA,QAAQ,IAAI,SAAS,GAAGF,qBAAU,CAAC,MAAM,CAAC,CAAC,EAAE,gBAAgB,CAAC,CAAC;IAC/D,QAAQ,IAAI,SAAS,GAAGA,qBAAU,CAAC,MAAM,CAAC,CAAC,EAAE,gBAAgB,CAAC,CAAC;IAC/D,QAAQ,IAAI,SAAS,GAAGA,qBAAU,CAAC,MAAM,CAAC,CAAC,EAAE,gBAAgB,CAAC,CAAC;AAC/D;IACA,QAAQ,MAAM,GAAG,CAAC,CAAC;IACnB,QAAQ,IAAI,aAAa,EAAE;IAC3B,YAAY,aAAa,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACtF,YAAY,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC;IAC5B,SAAS;IACT,QAAQ,aAAa,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;IAClF,QAAQ,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC;IACxB,QAAQ,aAAa,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,EAAE,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;IAC1F,QAAQ,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC;IACxB,QAAQ,aAAa,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,EAAE,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;IAClG,QAAQ,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC;IACxB,QAAQ,aAAa,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1E,QAAQ,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC;IACxB,QAAQ,aAAa,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;AAClF;IACA,QAAQ,IAAIE,YAAO,CAAC,OAAO,CAAC,EAAE;IAC9B,YAAY,UAAU,CAAC,MAAM,GAAG,IAAIc,mCAAiB,CAAC;IACtD,gBAAgB,iBAAiB,EAAEC,mCAAiB,CAAC,KAAK;IAC1D,gBAAgB,sBAAsB,EAAE,CAAC;IACzC,gBAAgB,MAAM,EAAE,OAAO;IAC/B,aAAa,CAAC,CAAC;IACf,SAAS;IACT,QAAQ,IAAIf,YAAO,CAAC,QAAQ,CAAC,EAAE;IAC/B,YAAY,UAAU,CAAC,OAAO,GAAG,IAAIc,mCAAiB,CAAC;IACvD,gBAAgB,iBAAiB,EAAEC,mCAAiB,CAAC,KAAK;IAC1D,gBAAgB,sBAAsB,EAAE,CAAC;IACzC,gBAAgB,MAAM,EAAE,QAAQ;IAChC,aAAa,CAAC,CAAC;IACf,SAAS;IACT,QAAQ,IAAIf,YAAO,CAAC,UAAU,CAAC,EAAE;IACjC,YAAY,UAAU,CAAC,SAAS,GAAG,IAAIc,mCAAiB,CAAC;IACzD,gBAAgB,iBAAiB,EAAEC,mCAAiB,CAAC,KAAK;IAC1D,gBAAgB,sBAAsB,EAAE,CAAC;IACzC,gBAAgB,MAAM,EAAE,UAAU;IAClC,aAAa,CAAC,CAAC;IACf,SAAS;IACT,QAAQ,IAAIf,YAAO,CAAC,EAAE,CAAC,EAAE;IACzB,YAAY,UAAU,CAAC,EAAE,GAAG,IAAIc,mCAAiB,CAAC;IAClD,gBAAgB,iBAAiB,EAAEC,mCAAiB,CAAC,KAAK;IAC1D,gBAAgB,sBAAsB,EAAE,CAAC;IACzC,gBAAgB,MAAM,EAAE,EAAE;IAC1B,aAAa,CAAC,CAAC;IACf,SAAS;IACT,KAAK;AACL;IACA,IAAI,IAAI,OAAO,GAAG,IAAI,WAAW,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC;IACtD,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,EAAE,EAAE,CAAC,EAAE;IAC7C,QAAQ,IAAI,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC;IAChC,QAAQ,IAAI,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;AAC1B;IACA,QAAQ,OAAO,CAAC,WAAW,CAAC,GAAG,KAAK,CAAC;IACrC,QAAQ,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;IAC7C,QAAQ,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;IAC7C,QAAQ,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC;IACzC,QAAQ,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;IAC7C,QAAQ,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;IAC7C,KAAK;AACL;IACA,IAAI,OAAO,IAAIC,0BAAQ,CAAC;IACxB,QAAQ,UAAU,EAAE,UAAU;IAC9B,QAAQ,OAAO,EAAE,OAAO;IACxB,QAAQ,aAAa,EAAEC,+BAAa,CAAC,SAAS;IAC9C,QAAQ,cAAc,EAAEC,yBAAc,CAAC,YAAY,CAAC,SAAS,CAAC;IAC9D,KAAK,CAAC,CAAC;IACP,CAAC;;;;;;;;;;"}