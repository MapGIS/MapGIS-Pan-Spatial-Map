{"version":3,"file":"createVectorTilePolygons.js","sources":["../../../../Source/WorkersES6/createVectorTilePolygons.js"],"sourcesContent":["import AttributeCompression from '../Core/AttributeCompression.js';\r\nimport Cartesian3 from '../Core/Cartesian3.js';\r\nimport Cartographic from '../Core/Cartographic.js';\r\nimport Color from '../Core/Color.js';\r\nimport defined from '../Core/defined.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\nimport IndexDatatype from '../Core/IndexDatatype.js';\r\nimport CesiumMath from '../Core/Math.js';\r\nimport OrientedBoundingBox from '../Core/OrientedBoundingBox.js';\r\nimport Rectangle from '../Core/Rectangle.js';\r\nimport createTaskProcessorWorker from './createTaskProcessorWorker.js';\r\n\r\nvar scratchCenter = new Cartesian3();\r\nvar scratchEllipsoid = new Ellipsoid();\r\nvar scratchRectangle = new Rectangle();\r\nvar scratchScalars = {\r\n    min: undefined,\r\n    max: undefined,\r\n    indexBytesPerElement: undefined\r\n};\r\n\r\nfunction unpackBuffer(buffer) {\r\n    var packedBuffer = new Float64Array(buffer);\r\n\r\n    var offset = 0;\r\n    scratchScalars.indexBytesPerElement = packedBuffer[offset++];\r\n\r\n    scratchScalars.min = packedBuffer[offset++];\r\n    scratchScalars.max = packedBuffer[offset++];\r\n\r\n    Cartesian3.unpack(packedBuffer, offset, scratchCenter);\r\n    offset += Cartesian3.packedLength;\r\n\r\n    Ellipsoid.unpack(packedBuffer, offset, scratchEllipsoid);\r\n    offset += Ellipsoid.packedLength;\r\n\r\n    Rectangle.unpack(packedBuffer, offset, scratchRectangle);\r\n}\r\n\r\nfunction packedBatchedIndicesLength(batchedIndices) {\r\n    var length = batchedIndices.length;\r\n    var count = 0;\r\n    for (var i = 0; i < length; ++i) {\r\n        count += Color.packedLength + 3 + batchedIndices[i].batchIds.length;\r\n    }\r\n    return count;\r\n}\r\n\r\nfunction packBuffer(indexDatatype, boundingVolumes, batchedIndices) {\r\n    var numBVs = boundingVolumes.length;\r\n    var length = 1 + 1 + numBVs * OrientedBoundingBox.packedLength + 1 + packedBatchedIndicesLength(batchedIndices);\r\n\r\n    var packedBuffer = new Float64Array(length);\r\n\r\n    var offset = 0;\r\n    packedBuffer[offset++] = indexDatatype;\r\n    packedBuffer[offset++] = numBVs;\r\n\r\n    for (var i = 0; i < numBVs; ++i) {\r\n        OrientedBoundingBox.pack(boundingVolumes[i], packedBuffer, offset);\r\n        offset += OrientedBoundingBox.packedLength;\r\n    }\r\n\r\n    var indicesLength = batchedIndices.length;\r\n    packedBuffer[offset++] = indicesLength;\r\n\r\n    for (var j = 0; j < indicesLength; ++j) {\r\n        var batchedIndex = batchedIndices[j];\r\n\r\n        Color.pack(batchedIndex.color, packedBuffer, offset);\r\n        offset += Color.packedLength;\r\n\r\n        packedBuffer[offset++] = batchedIndex.offset;\r\n        packedBuffer[offset++] = batchedIndex.count;\r\n\r\n        var batchIds = batchedIndex.batchIds;\r\n        var batchIdsLength = batchIds.length;\r\n        packedBuffer[offset++] = batchIdsLength;\r\n\r\n        for (var k = 0; k < batchIdsLength; ++k) {\r\n            packedBuffer[offset++] = batchIds[k];\r\n        }\r\n    }\r\n\r\n    return packedBuffer;\r\n}\r\n\r\nvar maxShort = 32767;\r\n\r\nvar scratchEncodedPosition = new Cartesian3();\r\nvar scratchNormal = new Cartesian3();\r\nvar scratchScaledNormal = new Cartesian3();\r\nvar scratchMinHeightPosition = new Cartesian3();\r\nvar scratchMaxHeightPosition = new Cartesian3();\r\nvar scratchBVCartographic = new Cartographic();\r\nvar scratchBVRectangle = new Rectangle();\r\n\r\nfunction createVectorTilePolygons(parameters, transferableObjects) {\r\n    unpackBuffer(parameters.packedBuffer);\r\n\r\n    var indices;\r\n    var indexBytesPerElement = scratchScalars.indexBytesPerElement;\r\n    if (indexBytesPerElement === 2) {\r\n        indices = new Uint16Array(parameters.indices);\r\n    } else {\r\n        indices = new Uint32Array(parameters.indices);\r\n    }\r\n\r\n    var positions = new Uint16Array(parameters.positions);\r\n    var counts = new Uint32Array(parameters.counts);\r\n    var indexCounts = new Uint32Array(parameters.indexCounts);\r\n    var batchIds = new Uint32Array(parameters.batchIds);\r\n    var batchTableColors = new Uint32Array(parameters.batchTableColors);\r\n\r\n    var boundingVolumes = new Array(counts.length);\r\n\r\n    var center = scratchCenter;\r\n    var ellipsoid = scratchEllipsoid;\r\n    var rectangle = scratchRectangle;\r\n    var minHeight = scratchScalars.min;\r\n    var maxHeight = scratchScalars.max;\r\n\r\n    var minimumHeights = parameters.minimumHeights;\r\n    var maximumHeights = parameters.maximumHeights;\r\n    if (defined(minimumHeights) && defined(maximumHeights)) {\r\n        minimumHeights = new Float32Array(minimumHeights);\r\n        maximumHeights = new Float32Array(maximumHeights);\r\n    }\r\n\r\n    var i;\r\n    var j;\r\n    var rgba;\r\n\r\n    var positionsLength = positions.length / 2;\r\n    var uBuffer = positions.subarray(0, positionsLength);\r\n    var vBuffer = positions.subarray(positionsLength, 2 * positionsLength);\r\n    AttributeCompression.zigZagDeltaDecode(uBuffer, vBuffer);\r\n\r\n    var decodedPositions = new Float64Array(positionsLength * 3);\r\n    for (i = 0; i < positionsLength; ++i) {\r\n        var u = uBuffer[i];\r\n        var v = vBuffer[i];\r\n\r\n        var x = CesiumMath.lerp(rectangle.west, rectangle.east, u / maxShort);\r\n        var y = CesiumMath.lerp(rectangle.south, rectangle.north, v / maxShort);\r\n\r\n        var cart = Cartographic.fromRadians(x, y, 0.0, scratchBVCartographic);\r\n        var decodedPosition = ellipsoid.cartographicToCartesian(cart, scratchEncodedPosition);\r\n        Cartesian3.pack(decodedPosition, decodedPositions, i * 3);\r\n    }\r\n\r\n    var countsLength = counts.length;\r\n    var offsets = new Array(countsLength);\r\n    var indexOffsets = new Array(countsLength);\r\n    var currentOffset = 0;\r\n    var currentIndexOffset = 0;\r\n    for (i = 0; i < countsLength; ++i) {\r\n        offsets[i] = currentOffset;\r\n        indexOffsets[i] = currentIndexOffset;\r\n\r\n        currentOffset += counts[i];\r\n        currentIndexOffset += indexCounts[i];\r\n    }\r\n\r\n    var batchedPositions = new Float32Array(positionsLength * 3 * 2);\r\n    var batchedIds = new Uint16Array(positionsLength * 2);\r\n    var batchedIndexOffsets = new Uint32Array(indexOffsets.length);\r\n    var batchedIndexCounts = new Uint32Array(indexCounts.length);\r\n    var batchedIndices = [];\r\n\r\n    var colorToBuffers = {};\r\n    for (i = 0; i < countsLength; ++i) {\r\n        rgba = batchTableColors[i];\r\n        if (!defined(colorToBuffers[rgba])) {\r\n            colorToBuffers[rgba] = {\r\n                positionLength: counts[i],\r\n                indexLength: indexCounts[i],\r\n                offset: 0,\r\n                indexOffset: 0,\r\n                batchIds: [i]\r\n            };\r\n        } else {\r\n            colorToBuffers[rgba].positionLength += counts[i];\r\n            colorToBuffers[rgba].indexLength += indexCounts[i];\r\n            colorToBuffers[rgba].batchIds.push(i);\r\n        }\r\n    }\r\n\r\n    // get the offsets and counts for the positions and indices of each primitive\r\n    var buffer;\r\n    var byColorPositionOffset = 0;\r\n    var byColorIndexOffset = 0;\r\n    for (rgba in colorToBuffers) {\r\n        if (colorToBuffers.hasOwnProperty(rgba)) {\r\n            buffer = colorToBuffers[rgba];\r\n            buffer.offset = byColorPositionOffset;\r\n            buffer.indexOffset = byColorIndexOffset;\r\n\r\n            var positionLength = buffer.positionLength * 2;\r\n            var indexLength = buffer.indexLength * 2 + buffer.positionLength * 6;\r\n\r\n            byColorPositionOffset += positionLength;\r\n            byColorIndexOffset += indexLength;\r\n\r\n            buffer.indexLength = indexLength;\r\n        }\r\n    }\r\n\r\n    var batchedDrawCalls = [];\r\n\r\n    for (rgba in colorToBuffers) {\r\n        if (colorToBuffers.hasOwnProperty(rgba)) {\r\n            buffer = colorToBuffers[rgba];\r\n\r\n            batchedDrawCalls.push({\r\n                color: Color.fromRgba(parseInt(rgba)),\r\n                offset: buffer.indexOffset,\r\n                count: buffer.indexLength,\r\n                batchIds: buffer.batchIds\r\n            });\r\n        }\r\n    }\r\n\r\n    for (i = 0; i < countsLength; ++i) {\r\n        rgba = batchTableColors[i];\r\n\r\n        buffer = colorToBuffers[rgba];\r\n        var positionOffset = buffer.offset;\r\n        var positionIndex = positionOffset * 3;\r\n        var batchIdIndex = positionOffset;\r\n\r\n        var polygonOffset = offsets[i];\r\n        var polygonCount = counts[i];\r\n        var batchId = batchIds[i];\r\n\r\n        var polygonMinimumHeight = minHeight;\r\n        var polygonMaximumHeight = maxHeight;\r\n        if (defined(minimumHeights) && defined(maximumHeights)) {\r\n            polygonMinimumHeight = minimumHeights[i];\r\n            polygonMaximumHeight = maximumHeights[i];\r\n        }\r\n\r\n        var minLat = Number.POSITIVE_INFINITY;\r\n        var maxLat = Number.NEGATIVE_INFINITY;\r\n        var minLon = Number.POSITIVE_INFINITY;\r\n        var maxLon = Number.NEGATIVE_INFINITY;\r\n\r\n        for (j = 0; j < polygonCount; ++j) {\r\n            var position = Cartesian3.unpack(decodedPositions, polygonOffset * 3 + j * 3, scratchEncodedPosition);\r\n            ellipsoid.scaleToGeodeticSurface(position, position);\r\n\r\n            var carto = ellipsoid.cartesianToCartographic(position, scratchBVCartographic);\r\n            var lat = carto.latitude;\r\n            var lon = carto.longitude;\r\n\r\n            minLat = Math.min(lat, minLat);\r\n            maxLat = Math.max(lat, maxLat);\r\n            minLon = Math.min(lon, minLon);\r\n            maxLon = Math.max(lon, maxLon);\r\n\r\n            var normal = ellipsoid.geodeticSurfaceNormal(position, scratchNormal);\r\n            var scaledNormal = Cartesian3.multiplyByScalar(normal, polygonMinimumHeight, scratchScaledNormal);\r\n            var minHeightPosition = Cartesian3.add(position, scaledNormal, scratchMinHeightPosition);\r\n\r\n            scaledNormal = Cartesian3.multiplyByScalar(normal, polygonMaximumHeight, scaledNormal);\r\n            var maxHeightPosition = Cartesian3.add(position, scaledNormal, scratchMaxHeightPosition);\r\n\r\n            Cartesian3.subtract(maxHeightPosition, center, maxHeightPosition);\r\n            Cartesian3.subtract(minHeightPosition, center, minHeightPosition);\r\n\r\n            Cartesian3.pack(maxHeightPosition, batchedPositions, positionIndex);\r\n            Cartesian3.pack(minHeightPosition, batchedPositions, positionIndex + 3);\r\n\r\n            batchedIds[batchIdIndex] = batchId;\r\n            batchedIds[batchIdIndex + 1] = batchId;\r\n\r\n            positionIndex += 6;\r\n            batchIdIndex += 2;\r\n        }\r\n\r\n        rectangle = scratchBVRectangle;\r\n        rectangle.west = minLon;\r\n        rectangle.east = maxLon;\r\n        rectangle.south = minLat;\r\n        rectangle.north = maxLat;\r\n\r\n        boundingVolumes[i] = OrientedBoundingBox.fromRectangle(rectangle, minHeight, maxHeight, ellipsoid);\r\n\r\n        var indicesIndex = buffer.indexOffset;\r\n\r\n        var indexOffset = indexOffsets[i];\r\n        var indexCount = indexCounts[i];\r\n\r\n        batchedIndexOffsets[i] = indicesIndex;\r\n\r\n        for (j = 0; j < indexCount; j += 3) {\r\n            var i0 = indices[indexOffset + j] - polygonOffset;\r\n            var i1 = indices[indexOffset + j + 1] - polygonOffset;\r\n            var i2 = indices[indexOffset + j + 2] - polygonOffset;\r\n\r\n            // triangle on the top of the extruded polygon\r\n            batchedIndices[indicesIndex++] = i0 * 2 + positionOffset;\r\n            batchedIndices[indicesIndex++] = i1 * 2 + positionOffset;\r\n            batchedIndices[indicesIndex++] = i2 * 2 + positionOffset;\r\n\r\n            // triangle on the bottom of the extruded polygon\r\n            batchedIndices[indicesIndex++] = i2 * 2 + 1 + positionOffset;\r\n            batchedIndices[indicesIndex++] = i1 * 2 + 1 + positionOffset;\r\n            batchedIndices[indicesIndex++] = i0 * 2 + 1 + positionOffset;\r\n        }\r\n\r\n        // indices for the walls of the extruded polygon\r\n        for (j = 0; j < polygonCount; ++j) {\r\n            var v0 = j;\r\n            var v1 = (j + 1) % polygonCount;\r\n\r\n            batchedIndices[indicesIndex++] = v0 * 2 + 1 + positionOffset;\r\n            batchedIndices[indicesIndex++] = v1 * 2 + positionOffset;\r\n            batchedIndices[indicesIndex++] = v0 * 2 + positionOffset;\r\n\r\n            batchedIndices[indicesIndex++] = v0 * 2 + 1 + positionOffset;\r\n            batchedIndices[indicesIndex++] = v1 * 2 + 1 + positionOffset;\r\n            batchedIndices[indicesIndex++] = v1 * 2 + positionOffset;\r\n        }\r\n\r\n        buffer.offset += polygonCount * 2;\r\n        buffer.indexOffset = indicesIndex;\r\n\r\n        batchedIndexCounts[i] = indicesIndex - batchedIndexOffsets[i];\r\n    }\r\n\r\n    batchedIndices = IndexDatatype.createTypedArray(batchedPositions.length / 3, batchedIndices);\r\n\r\n    var batchedIndicesLength = batchedDrawCalls.length;\r\n    for (var m = 0; m < batchedIndicesLength; ++m) {\r\n        var tempIds = batchedDrawCalls[m].batchIds;\r\n        var count = 0;\r\n        var tempIdsLength = tempIds.length;\r\n        for (var n = 0; n < tempIdsLength; ++n) {\r\n            count += batchedIndexCounts[tempIds[n]];\r\n        }\r\n        batchedDrawCalls[m].count = count;\r\n    }\r\n\r\n    var indexDatatype = batchedIndices.BYTES_PER_ELEMENT === 2 ? IndexDatatype.UNSIGNED_SHORT : IndexDatatype.UNSIGNED_INT;\r\n    var packedBuffer = packBuffer(indexDatatype, boundingVolumes, batchedDrawCalls);\r\n\r\n    transferableObjects.push(batchedPositions.buffer, batchedIndices.buffer, batchedIndexOffsets.buffer, batchedIndexCounts.buffer, batchedIds.buffer, packedBuffer.buffer);\r\n\r\n    return {\r\n        positions: batchedPositions.buffer,\r\n        indices: batchedIndices.buffer,\r\n        indexOffsets: batchedIndexOffsets.buffer,\r\n        indexCounts: batchedIndexCounts.buffer,\r\n        batchIds: batchedIds.buffer,\r\n        packedBuffer: packedBuffer.buffer\r\n    };\r\n}\r\nexport default createTaskProcessorWorker(createVectorTilePolygons);\r\n"],"names":["Cartesian3","Ellipsoid","Rectangle","Color","OrientedBoundingBox","Cartographic","defined","AttributeCompression","CesiumMath","IndexDatatype"],"mappings":"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"}