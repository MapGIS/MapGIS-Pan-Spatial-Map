{"version":3,"file":"createPolygonOutlineGeometry.js","sources":["../../../../Source/Core/PolygonOutlineGeometry.js","../../../../Source/WorkersES6/createPolygonOutlineGeometry.js"],"sourcesContent":["import ArcType from './ArcType.js';\r\nimport arrayFill from './arrayFill.js';\r\nimport BoundingSphere from './BoundingSphere.js';\r\nimport Check from './Check.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport EllipsoidTangentPlane from './EllipsoidTangentPlane.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport GeometryInstance from './GeometryInstance.js';\r\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\r\nimport GeometryPipeline from './GeometryPipeline.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport CesiumMath from './Math.js';\r\nimport PolygonGeometryLibrary from './PolygonGeometryLibrary.js';\r\nimport PolygonPipeline from './PolygonPipeline.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\nimport WindingOrder from './WindingOrder.js';\r\nvar createGeometryFromPositionsPositions = [];\r\nvar createGeometryFromPositionsSubdivided = [];\r\n\r\nfunction createGeometryFromPositions(ellipsoid, positions, minDistance, perPositionHeight, arcType) {\r\n    var tangentPlane = EllipsoidTangentPlane.fromPoints(positions, ellipsoid);\r\n    var positions2D = tangentPlane.projectPointsOntoPlane(positions, createGeometryFromPositionsPositions);\r\n\r\n    var originalWindingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\r\n    if (originalWindingOrder === WindingOrder.CLOCKWISE) {\r\n        positions2D.reverse();\r\n        positions = positions.slice().reverse();\r\n    }\r\n\r\n    var subdividedPositions;\r\n    var i;\r\n\r\n    var length = positions.length;\r\n    var index = 0;\r\n\r\n    if (!perPositionHeight) {\r\n        var numVertices = 0;\r\n        if (arcType === ArcType.GEODESIC) {\r\n            for (i = 0; i < length; i++) {\r\n                numVertices += PolygonGeometryLibrary.subdivideLineCount(positions[i], positions[(i + 1) % length], minDistance);\r\n            }\r\n        } else if (arcType === ArcType.RHUMB) {\r\n            for (i = 0; i < length; i++) {\r\n                numVertices += PolygonGeometryLibrary.subdivideRhumbLineCount(ellipsoid, positions[i], positions[(i + 1) % length], minDistance);\r\n            }\r\n        }\r\n        subdividedPositions = new Float64Array(numVertices * 3);\r\n        for (i = 0; i < length; i++) {\r\n            var tempPositions;\r\n            if (arcType === ArcType.GEODESIC) {\r\n                tempPositions = PolygonGeometryLibrary.subdivideLine(positions[i], positions[(i + 1) % length], minDistance, createGeometryFromPositionsSubdivided);\r\n            } else if (arcType === ArcType.RHUMB) {\r\n                tempPositions = PolygonGeometryLibrary.subdivideRhumbLine(ellipsoid, positions[i], positions[(i + 1) % length], minDistance, createGeometryFromPositionsSubdivided);\r\n            }\r\n            var tempPositionsLength = tempPositions.length;\r\n            for (var j = 0; j < tempPositionsLength; ++j) {\r\n                subdividedPositions[index++] = tempPositions[j];\r\n            }\r\n        }\r\n    } else {\r\n        subdividedPositions = new Float64Array(length * 2 * 3);\r\n        for (i = 0; i < length; i++) {\r\n            var p0 = positions[i];\r\n            var p1 = positions[(i + 1) % length];\r\n            subdividedPositions[index++] = p0.x;\r\n            subdividedPositions[index++] = p0.y;\r\n            subdividedPositions[index++] = p0.z;\r\n            subdividedPositions[index++] = p1.x;\r\n            subdividedPositions[index++] = p1.y;\r\n            subdividedPositions[index++] = p1.z;\r\n        }\r\n    }\r\n\r\n    length = subdividedPositions.length / 3;\r\n    var indicesSize = length * 2;\r\n    var indices = IndexDatatype.createTypedArray(length, indicesSize);\r\n    index = 0;\r\n    for (i = 0; i < length - 1; i++) {\r\n        indices[index++] = i;\r\n        indices[index++] = i + 1;\r\n    }\r\n    indices[index++] = length - 1;\r\n    indices[index++] = 0;\r\n\r\n    return new GeometryInstance({\r\n        geometry: new Geometry({\r\n            attributes: new GeometryAttributes({\r\n                position: new GeometryAttribute({\r\n                    componentDatatype: ComponentDatatype.DOUBLE,\r\n                    componentsPerAttribute: 3,\r\n                    values: subdividedPositions\r\n                })\r\n            }),\r\n            indices: indices,\r\n            primitiveType: PrimitiveType.LINES\r\n        })\r\n    });\r\n}\r\n\r\nfunction createGeometryFromPositionsExtruded(ellipsoid, positions, minDistance, perPositionHeight, arcType) {\r\n    var tangentPlane = EllipsoidTangentPlane.fromPoints(positions, ellipsoid);\r\n    var positions2D = tangentPlane.projectPointsOntoPlane(positions, createGeometryFromPositionsPositions);\r\n\r\n    var originalWindingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\r\n    if (originalWindingOrder === WindingOrder.CLOCKWISE) {\r\n        positions2D.reverse();\r\n        positions = positions.slice().reverse();\r\n    }\r\n\r\n    var subdividedPositions;\r\n    var i;\r\n\r\n    var length = positions.length;\r\n    var corners = new Array(length);\r\n    var index = 0;\r\n\r\n    if (!perPositionHeight) {\r\n        var numVertices = 0;\r\n        if (arcType === ArcType.GEODESIC) {\r\n            for (i = 0; i < length; i++) {\r\n                numVertices += PolygonGeometryLibrary.subdivideLineCount(positions[i], positions[(i + 1) % length], minDistance);\r\n            }\r\n        } else if (arcType === ArcType.RHUMB) {\r\n            for (i = 0; i < length; i++) {\r\n                numVertices += PolygonGeometryLibrary.subdivideRhumbLineCount(ellipsoid, positions[i], positions[(i + 1) % length], minDistance);\r\n            }\r\n        }\r\n\r\n        subdividedPositions = new Float64Array(numVertices * 3 * 2);\r\n        for (i = 0; i < length; ++i) {\r\n            corners[i] = index / 3;\r\n            var tempPositions;\r\n            if (arcType === ArcType.GEODESIC) {\r\n                tempPositions = PolygonGeometryLibrary.subdivideLine(positions[i], positions[(i + 1) % length], minDistance, createGeometryFromPositionsSubdivided);\r\n            } else if (arcType === ArcType.RHUMB) {\r\n                tempPositions = PolygonGeometryLibrary.subdivideRhumbLine(ellipsoid, positions[i], positions[(i + 1) % length], minDistance, createGeometryFromPositionsSubdivided);\r\n            }\r\n            var tempPositionsLength = tempPositions.length;\r\n            for (var j = 0; j < tempPositionsLength; ++j) {\r\n                subdividedPositions[index++] = tempPositions[j];\r\n            }\r\n        }\r\n    } else {\r\n        subdividedPositions = new Float64Array(length * 2 * 3 * 2);\r\n        for (i = 0; i < length; ++i) {\r\n            corners[i] = index / 3;\r\n            var p0 = positions[i];\r\n            var p1 = positions[(i + 1) % length];\r\n\r\n            subdividedPositions[index++] = p0.x;\r\n            subdividedPositions[index++] = p0.y;\r\n            subdividedPositions[index++] = p0.z;\r\n            subdividedPositions[index++] = p1.x;\r\n            subdividedPositions[index++] = p1.y;\r\n            subdividedPositions[index++] = p1.z;\r\n        }\r\n    }\r\n\r\n    length = subdividedPositions.length / (3 * 2);\r\n    var cornersLength = corners.length;\r\n\r\n    var indicesSize = (length * 2 + cornersLength) * 2;\r\n    var indices = IndexDatatype.createTypedArray(length + cornersLength, indicesSize);\r\n\r\n    index = 0;\r\n    for (i = 0; i < length; ++i) {\r\n        indices[index++] = i;\r\n        indices[index++] = (i + 1) % length;\r\n        indices[index++] = i + length;\r\n        indices[index++] = ((i + 1) % length) + length;\r\n    }\r\n\r\n    for (i = 0; i < cornersLength; i++) {\r\n        var corner = corners[i];\r\n        indices[index++] = corner;\r\n        indices[index++] = corner + length;\r\n    }\r\n\r\n    return new GeometryInstance({\r\n        geometry: new Geometry({\r\n            attributes: new GeometryAttributes({\r\n                position: new GeometryAttribute({\r\n                    componentDatatype: ComponentDatatype.DOUBLE,\r\n                    componentsPerAttribute: 3,\r\n                    values: subdividedPositions\r\n                })\r\n            }),\r\n            indices: indices,\r\n            primitiveType: PrimitiveType.LINES\r\n        })\r\n    });\r\n}\r\n\r\n/**\r\n * A description of the outline of a polygon on the ellipsoid. The polygon is defined by a polygon hierarchy.\r\n *\r\n * @alias PolygonOutlineGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\r\n * @param {Number} [options.height=0.0] The distance in meters between the polygon and the ellipsoid surface.\r\n * @param {Number} [options.extrudedHeight] The distance in meters between the polygon's extruded face and the ellipsoid surface.\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\r\n * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of path the outline must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\r\n *\r\n * @see PolygonOutlineGeometry#createGeometry\r\n * @see PolygonOutlineGeometry#fromPositions\r\n *\r\n * @example\r\n * // 1. create a polygon outline from points\r\n * var polygon = new Cesium.PolygonOutlineGeometry({\r\n *   polygonHierarchy : new Cesium.PolygonHierarchy(\r\n *     Cesium.Cartesian3.fromDegreesArray([\r\n *       -72.0, 40.0,\r\n *       -70.0, 35.0,\r\n *       -75.0, 30.0,\r\n *       -70.0, 30.0,\r\n *       -68.0, 40.0\r\n *     ])\r\n *   )\r\n * });\r\n * var geometry = Cesium.PolygonOutlineGeometry.createGeometry(polygon);\r\n *\r\n * // 2. create a nested polygon with holes outline\r\n * var polygonWithHole = new Cesium.PolygonOutlineGeometry({\r\n *   polygonHierarchy : new Cesium.PolygonHierarchy(\r\n *     Cesium.Cartesian3.fromDegreesArray([\r\n *       -109.0, 30.0,\r\n *       -95.0, 30.0,\r\n *       -95.0, 40.0,\r\n *       -109.0, 40.0\r\n *     ]),\r\n *     [new Cesium.PolygonHierarchy(\r\n *       Cesium.Cartesian3.fromDegreesArray([\r\n *         -107.0, 31.0,\r\n *         -107.0, 39.0,\r\n *         -97.0, 39.0,\r\n *         -97.0, 31.0\r\n *       ]),\r\n *       [new Cesium.PolygonHierarchy(\r\n *         Cesium.Cartesian3.fromDegreesArray([\r\n *           -105.0, 33.0,\r\n *           -99.0, 33.0,\r\n *           -99.0, 37.0,\r\n *           -105.0, 37.0\r\n *         ]),\r\n *         [new Cesium.PolygonHierarchy(\r\n *           Cesium.Cartesian3.fromDegreesArray([\r\n *             -103.0, 34.0,\r\n *             -101.0, 34.0,\r\n *             -101.0, 36.0,\r\n *             -103.0, 36.0\r\n *           ])\r\n *         )]\r\n *       )]\r\n *     )]\r\n *   )\r\n * });\r\n * var geometry = Cesium.PolygonOutlineGeometry.createGeometry(polygonWithHole);\r\n *\r\n * // 3. create extruded polygon outline\r\n * var extrudedPolygon = new Cesium.PolygonOutlineGeometry({\r\n *   polygonHierarchy : new Cesium.PolygonHierarchy(\r\n *     Cesium.Cartesian3.fromDegreesArray([\r\n *       -72.0, 40.0,\r\n *       -70.0, 35.0,\r\n *       -75.0, 30.0,\r\n *       -70.0, 30.0,\r\n *       -68.0, 40.0\r\n *     ])\r\n *   ),\r\n *   extrudedHeight: 300000\r\n * });\r\n * var geometry = Cesium.PolygonOutlineGeometry.createGeometry(extrudedPolygon);\r\n */\r\nfunction PolygonOutlineGeometry(options) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.typeOf.object('options', options);\r\n    Check.typeOf.object('options.polygonHierarchy', options.polygonHierarchy);\r\n\r\n    if (options.perPositionHeight && defined(options.height)) {\r\n        throw new DeveloperError('Cannot use both options.perPositionHeight and options.height');\r\n    }\r\n    if (defined(options.arcType) && options.arcType !== ArcType.GEODESIC && options.arcType !== ArcType.RHUMB) {\r\n        throw new DeveloperError('Invalid arcType. Valid options are ArcType.GEODESIC and ArcType.RHUMB.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var polygonHierarchy = options.polygonHierarchy;\r\n    var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n    var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n    var perPositionHeight = defaultValue(options.perPositionHeight, false);\r\n    var perPositionHeightExtrude = perPositionHeight && defined(options.extrudedHeight);\r\n    var arcType = defaultValue(options.arcType, ArcType.GEODESIC);\r\n\r\n    var height = defaultValue(options.height, 0.0);\r\n    var extrudedHeight = defaultValue(options.extrudedHeight, height);\r\n\r\n    if (!perPositionHeightExtrude) {\r\n        var h = Math.max(height, extrudedHeight);\r\n        extrudedHeight = Math.min(height, extrudedHeight);\r\n        height = h;\r\n    }\r\n\r\n    this._ellipsoid = Ellipsoid.clone(ellipsoid);\r\n    this._granularity = granularity;\r\n    this._height = height;\r\n    this._extrudedHeight = extrudedHeight;\r\n    this._arcType = arcType;\r\n    this._polygonHierarchy = polygonHierarchy;\r\n    this._perPositionHeight = perPositionHeight;\r\n    this._perPositionHeightExtrude = perPositionHeightExtrude;\r\n    this._offsetAttribute = options.offsetAttribute;\r\n    this._workerName = 'createPolygonOutlineGeometry';\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    this.packedLength = PolygonGeometryLibrary.computeHierarchyPackedLength(polygonHierarchy) + Ellipsoid.packedLength + 8;\r\n}\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {PolygonOutlineGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nPolygonOutlineGeometry.pack = function (value, array, startingIndex) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.typeOf.object('value', value);\r\n    Check.defined('array', array);\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(value._polygonHierarchy, array, startingIndex);\r\n\r\n    Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n    startingIndex += Ellipsoid.packedLength;\r\n\r\n    array[startingIndex++] = value._height;\r\n    array[startingIndex++] = value._extrudedHeight;\r\n    array[startingIndex++] = value._granularity;\r\n    array[startingIndex++] = value._perPositionHeightExtrude ? 1.0 : 0.0;\r\n    array[startingIndex++] = value._perPositionHeight ? 1.0 : 0.0;\r\n    array[startingIndex++] = value._arcType;\r\n    array[startingIndex++] = defaultValue(value._offsetAttribute, -1);\r\n    array[startingIndex] = value.packedLength;\r\n\r\n    return array;\r\n};\r\n\r\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\nvar dummyOptions = {\r\n    polygonHierarchy: {}\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {PolygonOutlineGeometry} [result] The object into which to store the result.\r\n * @returns {PolygonOutlineGeometry} The modified result parameter or a new PolygonOutlineGeometry instance if one was not provided.\r\n */\r\nPolygonOutlineGeometry.unpack = function (array, startingIndex, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined('array', array);\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    var polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(array, startingIndex);\r\n    startingIndex = polygonHierarchy.startingIndex;\r\n    delete polygonHierarchy.startingIndex;\r\n\r\n    var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n    startingIndex += Ellipsoid.packedLength;\r\n\r\n    var height = array[startingIndex++];\r\n    var extrudedHeight = array[startingIndex++];\r\n    var granularity = array[startingIndex++];\r\n    var perPositionHeightExtrude = array[startingIndex++] === 1.0;\r\n    var perPositionHeight = array[startingIndex++] === 1.0;\r\n    var arcType = array[startingIndex++];\r\n    var offsetAttribute = array[startingIndex++];\r\n    var packedLength = array[startingIndex];\r\n\r\n    if (!defined(result)) {\r\n        result = new PolygonOutlineGeometry(dummyOptions);\r\n    }\r\n\r\n    result._polygonHierarchy = polygonHierarchy;\r\n    result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n    result._height = height;\r\n    result._extrudedHeight = extrudedHeight;\r\n    result._granularity = granularity;\r\n    result._perPositionHeight = perPositionHeight;\r\n    result._perPositionHeightExtrude = perPositionHeightExtrude;\r\n    result._arcType = arcType;\r\n    result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n    result.packedLength = packedLength;\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * A description of a polygon outline from an array of positions.\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\r\n * @param {Number} [options.height=0.0] The height of the polygon.\r\n * @param {Number} [options.extrudedHeight] The height of the polygon extrusion.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\r\n * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of path the outline must follow. Valid options are {@link LinkType.GEODESIC} and {@link ArcType.RHUMB}.\r\n * @returns {PolygonOutlineGeometry}\r\n *\r\n *\r\n * @example\r\n * // create a polygon from points\r\n * var polygon = Cesium.PolygonOutlineGeometry.fromPositions({\r\n *   positions : Cesium.Cartesian3.fromDegreesArray([\r\n *     -72.0, 40.0,\r\n *     -70.0, 35.0,\r\n *     -75.0, 30.0,\r\n *     -70.0, 30.0,\r\n *     -68.0, 40.0\r\n *   ])\r\n * });\r\n * var geometry = Cesium.PolygonOutlineGeometry.createGeometry(polygon);\r\n *\r\n * @see PolygonOutlineGeometry#createGeometry\r\n */\r\nPolygonOutlineGeometry.fromPositions = function (options) {\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined('options.positions', options.positions);\r\n    //>>includeEnd('debug');\r\n\r\n    var newOptions = {\r\n        polygonHierarchy: {\r\n            positions: options.positions\r\n        },\r\n        height: options.height,\r\n        extrudedHeight: options.extrudedHeight,\r\n        ellipsoid: options.ellipsoid,\r\n        granularity: options.granularity,\r\n        perPositionHeight: options.perPositionHeight,\r\n        arcType: options.arcType,\r\n        offsetAttribute: options.offsetAttribute\r\n    };\r\n    return new PolygonOutlineGeometry(newOptions);\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of a polygon outline, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {PolygonOutlineGeometry} polygonGeometry A description of the polygon outline.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nPolygonOutlineGeometry.createGeometry = function (polygonGeometry) {\r\n    var ellipsoid = polygonGeometry._ellipsoid;\r\n    var granularity = polygonGeometry._granularity;\r\n    var polygonHierarchy = polygonGeometry._polygonHierarchy;\r\n    var perPositionHeight = polygonGeometry._perPositionHeight;\r\n    var arcType = polygonGeometry._arcType;\r\n\r\n    var polygons = PolygonGeometryLibrary.polygonOutlinesFromHierarchy(polygonHierarchy, !perPositionHeight, ellipsoid);\r\n\r\n    if (polygons.length === 0) {\r\n        return undefined;\r\n    }\r\n\r\n    var geometryInstance;\r\n    var geometries = [];\r\n    var minDistance = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\r\n\r\n    var height = polygonGeometry._height;\r\n    var extrudedHeight = polygonGeometry._extrudedHeight;\r\n    var extrude = polygonGeometry._perPositionHeightExtrude || !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\r\n    var offsetValue;\r\n    var i;\r\n    if (extrude) {\r\n        for (i = 0; i < polygons.length; i++) {\r\n            geometryInstance = createGeometryFromPositionsExtruded(ellipsoid, polygons[i], minDistance, perPositionHeight, arcType);\r\n            geometryInstance.geometry = PolygonGeometryLibrary.scaleToGeodeticHeightExtruded(geometryInstance.geometry, height, extrudedHeight, ellipsoid, perPositionHeight);\r\n            if (defined(polygonGeometry._offsetAttribute)) {\r\n                var size = geometryInstance.geometry.attributes.position.values.length / 3;\r\n                var offsetAttribute = new Uint8Array(size);\r\n                if (polygonGeometry._offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n                    offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\r\n                } else {\r\n                    offsetValue = polygonGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                    offsetAttribute = arrayFill(offsetAttribute, offsetValue);\r\n                }\r\n\r\n                geometryInstance.geometry.attributes.applyOffset = new GeometryAttribute({\r\n                    componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n                    componentsPerAttribute: 1,\r\n                    values: offsetAttribute\r\n                });\r\n            }\r\n            geometries.push(geometryInstance);\r\n        }\r\n    } else {\r\n        for (i = 0; i < polygons.length; i++) {\r\n            geometryInstance = createGeometryFromPositions(ellipsoid, polygons[i], minDistance, perPositionHeight, arcType);\r\n            geometryInstance.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(\r\n                geometryInstance.geometry.attributes.position.values,\r\n                height,\r\n                ellipsoid,\r\n                !perPositionHeight\r\n            );\r\n\r\n            if (defined(polygonGeometry._offsetAttribute)) {\r\n                var length = geometryInstance.geometry.attributes.position.values.length;\r\n                var applyOffset = new Uint8Array(length / 3);\r\n                offsetValue = polygonGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                arrayFill(applyOffset, offsetValue);\r\n                geometryInstance.geometry.attributes.applyOffset = new GeometryAttribute({\r\n                    componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n                    componentsPerAttribute: 1,\r\n                    values: applyOffset\r\n                });\r\n            }\r\n\r\n            geometries.push(geometryInstance);\r\n        }\r\n    }\r\n\r\n    var geometry = GeometryPipeline.combineInstances(geometries)[0];\r\n    var boundingSphere = BoundingSphere.fromVertices(geometry.attributes.position.values);\r\n\r\n    return new Geometry({\r\n        attributes: geometry.attributes,\r\n        indices: geometry.indices,\r\n        primitiveType: geometry.primitiveType,\r\n        boundingSphere: boundingSphere,\r\n        offsetAttribute: polygonGeometry._offsetAttribute\r\n    });\r\n};\r\nexport default PolygonOutlineGeometry;\r\n","import defined from '../Core/defined.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\nimport PolygonOutlineGeometry from '../Core/PolygonOutlineGeometry.js';\r\n\r\nfunction createPolygonOutlineGeometry(polygonGeometry, offset) {\r\n    if (defined(offset)) {\r\n        polygonGeometry = PolygonOutlineGeometry.unpack(polygonGeometry, offset);\r\n    }\r\n    polygonGeometry._ellipsoid = Ellipsoid.clone(polygonGeometry._ellipsoid);\r\n    return PolygonOutlineGeometry.createGeometry(polygonGeometry);\r\n}\r\nexport default createPolygonOutlineGeometry;\r\n"],"names":["EllipsoidTangentPlane","PolygonPipeline","WindingOrder","ArcType","PolygonGeometryLibrary","IndexDatatype","GeometryInstance","Geometry","GeometryAttributes","GeometryAttribute","ComponentDatatype","PrimitiveType","Check","defined","DeveloperError","defaultValue","Ellipsoid","CesiumMath","GeometryOffsetAttribute","arrayFill","GeometryPipeline","BoundingSphere"],"mappings":"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"}