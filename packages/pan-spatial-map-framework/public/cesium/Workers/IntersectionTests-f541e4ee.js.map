{"version":3,"file":"IntersectionTests-f541e4ee.js","sources":["../../../../Source/Core/QuadraticRealPolynomial.js","../../../../Source/Core/CubicRealPolynomial.js","../../../../Source/Core/QuarticRealPolynomial.js","../../../../Source/Core/Ray.js","../../../../Source/Core/IntersectionTests.js"],"sourcesContent":["import DeveloperError from './DeveloperError.js';\r\nimport CesiumMath from './Math.js';\r\n\r\n/**\r\n * Defines functions for 2nd order polynomial functions of one variable with only real coefficients.\r\n *\r\n * @namespace QuadraticRealPolynomial\r\n */\r\nvar QuadraticRealPolynomial = {};\r\n\r\n/**\r\n * Provides the discriminant of the quadratic equation from the supplied coefficients.\r\n *\r\n * @param {Number} a The coefficient of the 2nd order monomial.\r\n * @param {Number} b The coefficient of the 1st order monomial.\r\n * @param {Number} c The coefficient of the 0th order monomial.\r\n * @returns {Number} The value of the discriminant.\r\n */\r\nQuadraticRealPolynomial.computeDiscriminant = function (a, b, c) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (typeof a !== 'number') {\r\n        throw new DeveloperError('a is a required number.');\r\n    }\r\n    if (typeof b !== 'number') {\r\n        throw new DeveloperError('b is a required number.');\r\n    }\r\n    if (typeof c !== 'number') {\r\n        throw new DeveloperError('c is a required number.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var discriminant = b * b - 4.0 * a * c;\r\n    return discriminant;\r\n};\r\n\r\nfunction addWithCancellationCheck(left, right, tolerance) {\r\n    var difference = left + right;\r\n    if (CesiumMath.sign(left) !== CesiumMath.sign(right) && Math.abs(difference / Math.max(Math.abs(left), Math.abs(right))) < tolerance) {\r\n        return 0.0;\r\n    }\r\n\r\n    return difference;\r\n}\r\n\r\n/**\r\n * Provides the real valued roots of the quadratic polynomial with the provided coefficients.\r\n *\r\n * @param {Number} a The coefficient of the 2nd order monomial.\r\n * @param {Number} b The coefficient of the 1st order monomial.\r\n * @param {Number} c The coefficient of the 0th order monomial.\r\n * @returns {Number[]} The real valued roots.\r\n */\r\nQuadraticRealPolynomial.computeRealRoots = function (a, b, c) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (typeof a !== 'number') {\r\n        throw new DeveloperError('a is a required number.');\r\n    }\r\n    if (typeof b !== 'number') {\r\n        throw new DeveloperError('b is a required number.');\r\n    }\r\n    if (typeof c !== 'number') {\r\n        throw new DeveloperError('c is a required number.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var ratio;\r\n    if (a === 0.0) {\r\n        if (b === 0.0) {\r\n            // Constant function: c = 0.\r\n            return [];\r\n        }\r\n\r\n        // Linear function: b * x + c = 0.\r\n        return [-c / b];\r\n    } else if (b === 0.0) {\r\n        if (c === 0.0) {\r\n            // 2nd order monomial: a * x^2 = 0.\r\n            return [0.0, 0.0];\r\n        }\r\n\r\n        var cMagnitude = Math.abs(c);\r\n        var aMagnitude = Math.abs(a);\r\n\r\n        if (cMagnitude < aMagnitude && cMagnitude / aMagnitude < CesiumMath.EPSILON14) {\r\n            // c ~= 0.0.\r\n            // 2nd order monomial: a * x^2 = 0.\r\n            return [0.0, 0.0];\r\n        } else if (cMagnitude > aMagnitude && aMagnitude / cMagnitude < CesiumMath.EPSILON14) {\r\n            // a ~= 0.0.\r\n            // Constant function: c = 0.\r\n            return [];\r\n        }\r\n\r\n        // a * x^2 + c = 0\r\n        ratio = -c / a;\r\n\r\n        if (ratio < 0.0) {\r\n            // Both roots are complex.\r\n            return [];\r\n        }\r\n\r\n        // Both roots are real.\r\n        var root = Math.sqrt(ratio);\r\n        return [-root, root];\r\n    } else if (c === 0.0) {\r\n        // a * x^2 + b * x = 0\r\n        ratio = -b / a;\r\n        if (ratio < 0.0) {\r\n            return [ratio, 0.0];\r\n        }\r\n\r\n        return [0.0, ratio];\r\n    }\r\n\r\n    // a * x^2 + b * x + c = 0\r\n    var b2 = b * b;\r\n    var four_ac = 4.0 * a * c;\r\n    var radicand = addWithCancellationCheck(b2, -four_ac, CesiumMath.EPSILON14);\r\n\r\n    if (radicand < 0.0) {\r\n        // Both roots are complex.\r\n        return [];\r\n    }\r\n\r\n    var q = -0.5 * addWithCancellationCheck(b, CesiumMath.sign(b) * Math.sqrt(radicand), CesiumMath.EPSILON14);\r\n    if (b > 0.0) {\r\n        return [q / a, c / q];\r\n    }\r\n\r\n    return [c / q, q / a];\r\n};\r\nexport default QuadraticRealPolynomial;\r\n","import DeveloperError from './DeveloperError.js';\r\nimport QuadraticRealPolynomial from './QuadraticRealPolynomial.js';\r\n\r\n/**\r\n * Defines functions for 3rd order polynomial functions of one variable with only real coefficients.\r\n *\r\n * @namespace CubicRealPolynomial\r\n */\r\nvar CubicRealPolynomial = {};\r\n\r\n/**\r\n * Provides the discriminant of the cubic equation from the supplied coefficients.\r\n *\r\n * @param {Number} a The coefficient of the 3rd order monomial.\r\n * @param {Number} b The coefficient of the 2nd order monomial.\r\n * @param {Number} c The coefficient of the 1st order monomial.\r\n * @param {Number} d The coefficient of the 0th order monomial.\r\n * @returns {Number} The value of the discriminant.\r\n */\r\nCubicRealPolynomial.computeDiscriminant = function (a, b, c, d) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (typeof a !== 'number') {\r\n        throw new DeveloperError('a is a required number.');\r\n    }\r\n    if (typeof b !== 'number') {\r\n        throw new DeveloperError('b is a required number.');\r\n    }\r\n    if (typeof c !== 'number') {\r\n        throw new DeveloperError('c is a required number.');\r\n    }\r\n    if (typeof d !== 'number') {\r\n        throw new DeveloperError('d is a required number.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var a2 = a * a;\r\n    var b2 = b * b;\r\n    var c2 = c * c;\r\n    var d2 = d * d;\r\n\r\n    var discriminant = 18.0 * a * b * c * d + b2 * c2 - 27.0 * a2 * d2 - 4.0 * (a * c2 * c + b2 * b * d);\r\n    return discriminant;\r\n};\r\n\r\nfunction computeRealRoots(a, b, c, d) {\r\n    var A = a;\r\n    var B = b / 3.0;\r\n    var C = c / 3.0;\r\n    var D = d;\r\n\r\n    var AC = A * C;\r\n    var BD = B * D;\r\n    var B2 = B * B;\r\n    var C2 = C * C;\r\n    var delta1 = A * C - B2;\r\n    var delta2 = A * D - B * C;\r\n    var delta3 = B * D - C2;\r\n\r\n    var discriminant = 4.0 * delta1 * delta3 - delta2 * delta2;\r\n    var temp;\r\n    var temp1;\r\n\r\n    if (discriminant < 0.0) {\r\n        var ABar;\r\n        var CBar;\r\n        var DBar;\r\n\r\n        if (B2 * BD >= AC * C2) {\r\n            ABar = A;\r\n            CBar = delta1;\r\n            DBar = -2.0 * B * delta1 + A * delta2;\r\n        } else {\r\n            ABar = D;\r\n            CBar = delta3;\r\n            DBar = -D * delta2 + 2.0 * C * delta3;\r\n        }\r\n\r\n        var s = DBar < 0.0 ? -1.0 : 1.0; // This is not Math.Sign()!\r\n        var temp0 = -s * Math.abs(ABar) * Math.sqrt(-discriminant);\r\n        temp1 = -DBar + temp0;\r\n\r\n        var x = temp1 / 2.0;\r\n        var p = x < 0.0 ? -Math.pow(-x, 1.0 / 3.0) : Math.pow(x, 1.0 / 3.0);\r\n        var q = temp1 === temp0 ? -p : -CBar / p;\r\n\r\n        temp = CBar <= 0.0 ? p + q : -DBar / (p * p + q * q + CBar);\r\n\r\n        if (B2 * BD >= AC * C2) {\r\n            return [(temp - B) / A];\r\n        }\r\n\r\n        return [-D / (temp + C)];\r\n    }\r\n\r\n    var CBarA = delta1;\r\n    var DBarA = -2.0 * B * delta1 + A * delta2;\r\n\r\n    var CBarD = delta3;\r\n    var DBarD = -D * delta2 + 2.0 * C * delta3;\r\n\r\n    var squareRootOfDiscriminant = Math.sqrt(discriminant);\r\n    var halfSquareRootOf3 = Math.sqrt(3.0) / 2.0;\r\n\r\n    var theta = Math.abs(Math.atan2(A * squareRootOfDiscriminant, -DBarA) / 3.0);\r\n    temp = 2.0 * Math.sqrt(-CBarA);\r\n    var cosine = Math.cos(theta);\r\n    temp1 = temp * cosine;\r\n    var temp3 = temp * (-cosine / 2.0 - halfSquareRootOf3 * Math.sin(theta));\r\n\r\n    var numeratorLarge = temp1 + temp3 > 2.0 * B ? temp1 - B : temp3 - B;\r\n    var denominatorLarge = A;\r\n\r\n    var root1 = numeratorLarge / denominatorLarge;\r\n\r\n    theta = Math.abs(Math.atan2(D * squareRootOfDiscriminant, -DBarD) / 3.0);\r\n    temp = 2.0 * Math.sqrt(-CBarD);\r\n    cosine = Math.cos(theta);\r\n    temp1 = temp * cosine;\r\n    temp3 = temp * (-cosine / 2.0 - halfSquareRootOf3 * Math.sin(theta));\r\n\r\n    var numeratorSmall = -D;\r\n    var denominatorSmall = temp1 + temp3 < 2.0 * C ? temp1 + C : temp3 + C;\r\n\r\n    var root3 = numeratorSmall / denominatorSmall;\r\n\r\n    var E = denominatorLarge * denominatorSmall;\r\n    var F = -numeratorLarge * denominatorSmall - denominatorLarge * numeratorSmall;\r\n    var G = numeratorLarge * numeratorSmall;\r\n\r\n    var root2 = (C * F - B * G) / (-B * F + C * E);\r\n\r\n    if (root1 <= root2) {\r\n        if (root1 <= root3) {\r\n            if (root2 <= root3) {\r\n                return [root1, root2, root3];\r\n            }\r\n            return [root1, root3, root2];\r\n        }\r\n        return [root3, root1, root2];\r\n    }\r\n    if (root1 <= root3) {\r\n        return [root2, root1, root3];\r\n    }\r\n    if (root2 <= root3) {\r\n        return [root2, root3, root1];\r\n    }\r\n    return [root3, root2, root1];\r\n}\r\n\r\n/**\r\n * Provides the real valued roots of the cubic polynomial with the provided coefficients.\r\n *\r\n * @param {Number} a The coefficient of the 3rd order monomial.\r\n * @param {Number} b The coefficient of the 2nd order monomial.\r\n * @param {Number} c The coefficient of the 1st order monomial.\r\n * @param {Number} d The coefficient of the 0th order monomial.\r\n * @returns {Number[]} The real valued roots.\r\n */\r\nCubicRealPolynomial.computeRealRoots = function (a, b, c, d) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (typeof a !== 'number') {\r\n        throw new DeveloperError('a is a required number.');\r\n    }\r\n    if (typeof b !== 'number') {\r\n        throw new DeveloperError('b is a required number.');\r\n    }\r\n    if (typeof c !== 'number') {\r\n        throw new DeveloperError('c is a required number.');\r\n    }\r\n    if (typeof d !== 'number') {\r\n        throw new DeveloperError('d is a required number.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var roots;\r\n    var ratio;\r\n    if (a === 0.0) {\r\n        // Quadratic function: b * x^2 + c * x + d = 0.\r\n        return QuadraticRealPolynomial.computeRealRoots(b, c, d);\r\n    } else if (b === 0.0) {\r\n        if (c === 0.0) {\r\n            if (d === 0.0) {\r\n                // 3rd order monomial: a * x^3 = 0.\r\n                return [0.0, 0.0, 0.0];\r\n            }\r\n\r\n            // a * x^3 + d = 0\r\n            ratio = -d / a;\r\n            var root = ratio < 0.0 ? -Math.pow(-ratio, 1.0 / 3.0) : Math.pow(ratio, 1.0 / 3.0);\r\n            return [root, root, root];\r\n        } else if (d === 0.0) {\r\n            // x * (a * x^2 + c) = 0.\r\n            roots = QuadraticRealPolynomial.computeRealRoots(a, 0, c);\r\n\r\n            // Return the roots in ascending order.\r\n            if (roots.Length === 0) {\r\n                return [0.0];\r\n            }\r\n            return [roots[0], 0.0, roots[1]];\r\n        }\r\n\r\n        // Deflated cubic polynomial: a * x^3 + c * x + d= 0.\r\n        return computeRealRoots(a, 0, c, d);\r\n    } else if (c === 0.0) {\r\n        if (d === 0.0) {\r\n            // x^2 * (a * x + b) = 0.\r\n            ratio = -b / a;\r\n            if (ratio < 0.0) {\r\n                return [ratio, 0.0, 0.0];\r\n            }\r\n            return [0.0, 0.0, ratio];\r\n        }\r\n        // a * x^3 + b * x^2 + d = 0.\r\n        return computeRealRoots(a, b, 0, d);\r\n    } else if (d === 0.0) {\r\n        // x * (a * x^2 + b * x + c) = 0\r\n        roots = QuadraticRealPolynomial.computeRealRoots(a, b, c);\r\n\r\n        // Return the roots in ascending order.\r\n        if (roots.length === 0) {\r\n            return [0.0];\r\n        } else if (roots[1] <= 0.0) {\r\n            return [roots[0], roots[1], 0.0];\r\n        } else if (roots[0] >= 0.0) {\r\n            return [0.0, roots[0], roots[1]];\r\n        }\r\n        return [roots[0], 0.0, roots[1]];\r\n    }\r\n\r\n    return computeRealRoots(a, b, c, d);\r\n};\r\nexport default CubicRealPolynomial;\r\n","import CubicRealPolynomial from './CubicRealPolynomial.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport CesiumMath from './Math.js';\r\nimport QuadraticRealPolynomial from './QuadraticRealPolynomial.js';\r\n\r\n/**\r\n * Defines functions for 4th order polynomial functions of one variable with only real coefficients.\r\n *\r\n * @namespace QuarticRealPolynomial\r\n */\r\nvar QuarticRealPolynomial = {};\r\n\r\n/**\r\n * Provides the discriminant of the quartic equation from the supplied coefficients.\r\n *\r\n * @param {Number} a The coefficient of the 4th order monomial.\r\n * @param {Number} b The coefficient of the 3rd order monomial.\r\n * @param {Number} c The coefficient of the 2nd order monomial.\r\n * @param {Number} d The coefficient of the 1st order monomial.\r\n * @param {Number} e The coefficient of the 0th order monomial.\r\n * @returns {Number} The value of the discriminant.\r\n */\r\nQuarticRealPolynomial.computeDiscriminant = function (a, b, c, d, e) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (typeof a !== 'number') {\r\n        throw new DeveloperError('a is a required number.');\r\n    }\r\n    if (typeof b !== 'number') {\r\n        throw new DeveloperError('b is a required number.');\r\n    }\r\n    if (typeof c !== 'number') {\r\n        throw new DeveloperError('c is a required number.');\r\n    }\r\n    if (typeof d !== 'number') {\r\n        throw new DeveloperError('d is a required number.');\r\n    }\r\n    if (typeof e !== 'number') {\r\n        throw new DeveloperError('e is a required number.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var a2 = a * a;\r\n    var a3 = a2 * a;\r\n    var b2 = b * b;\r\n    var b3 = b2 * b;\r\n    var c2 = c * c;\r\n    var c3 = c2 * c;\r\n    var d2 = d * d;\r\n    var d3 = d2 * d;\r\n    var e2 = e * e;\r\n    var e3 = e2 * e;\r\n\r\n    var discriminant =\r\n        b2 * c2 * d2 -\r\n        4.0 * b3 * d3 -\r\n        4.0 * a * c3 * d2 +\r\n        18 * a * b * c * d3 -\r\n        27.0 * a2 * d2 * d2 +\r\n        256.0 * a3 * e3 +\r\n        e * (18.0 * b3 * c * d - 4.0 * b2 * c3 + 16.0 * a * c2 * c2 - 80.0 * a * b * c2 * d - 6.0 * a * b2 * d2 + 144.0 * a2 * c * d2) +\r\n        e2 * (144.0 * a * b2 * c - 27.0 * b2 * b2 - 128.0 * a2 * c2 - 192.0 * a2 * b * d);\r\n    return discriminant;\r\n};\r\n\r\nfunction original(a3, a2, a1, a0) {\r\n    var a3Squared = a3 * a3;\r\n\r\n    var p = a2 - (3.0 * a3Squared) / 8.0;\r\n    var q = a1 - (a2 * a3) / 2.0 + (a3Squared * a3) / 8.0;\r\n    var r = a0 - (a1 * a3) / 4.0 + (a2 * a3Squared) / 16.0 - (3.0 * a3Squared * a3Squared) / 256.0;\r\n\r\n    // Find the roots of the cubic equations:  h^6 + 2 p h^4 + (p^2 - 4 r) h^2 - q^2 = 0.\r\n    var cubicRoots = CubicRealPolynomial.computeRealRoots(1.0, 2.0 * p, p * p - 4.0 * r, -q * q);\r\n\r\n    if (cubicRoots.length > 0) {\r\n        var temp = -a3 / 4.0;\r\n\r\n        // Use the largest positive root.\r\n        var hSquared = cubicRoots[cubicRoots.length - 1];\r\n\r\n        if (Math.abs(hSquared) < CesiumMath.EPSILON14) {\r\n            // y^4 + p y^2 + r = 0.\r\n            var roots = QuadraticRealPolynomial.computeRealRoots(1.0, p, r);\r\n\r\n            if (roots.length === 2) {\r\n                var root0 = roots[0];\r\n                var root1 = roots[1];\r\n\r\n                var y;\r\n                if (root0 >= 0.0 && root1 >= 0.0) {\r\n                    var y0 = Math.sqrt(root0);\r\n                    var y1 = Math.sqrt(root1);\r\n\r\n                    return [temp - y1, temp - y0, temp + y0, temp + y1];\r\n                } else if (root0 >= 0.0 && root1 < 0.0) {\r\n                    y = Math.sqrt(root0);\r\n                    return [temp - y, temp + y];\r\n                } else if (root0 < 0.0 && root1 >= 0.0) {\r\n                    y = Math.sqrt(root1);\r\n                    return [temp - y, temp + y];\r\n                }\r\n            }\r\n            return [];\r\n        } else if (hSquared > 0.0) {\r\n            var h = Math.sqrt(hSquared);\r\n\r\n            var m = (p + hSquared - q / h) / 2.0;\r\n            var n = (p + hSquared + q / h) / 2.0;\r\n\r\n            // Now solve the two quadratic factors:  (y^2 + h y + m)(y^2 - h y + n);\r\n            var roots1 = QuadraticRealPolynomial.computeRealRoots(1.0, h, m);\r\n            var roots2 = QuadraticRealPolynomial.computeRealRoots(1.0, -h, n);\r\n\r\n            if (roots1.length !== 0) {\r\n                roots1[0] += temp;\r\n                roots1[1] += temp;\r\n\r\n                if (roots2.length !== 0) {\r\n                    roots2[0] += temp;\r\n                    roots2[1] += temp;\r\n\r\n                    if (roots1[1] <= roots2[0]) {\r\n                        return [roots1[0], roots1[1], roots2[0], roots2[1]];\r\n                    } else if (roots2[1] <= roots1[0]) {\r\n                        return [roots2[0], roots2[1], roots1[0], roots1[1]];\r\n                    } else if (roots1[0] >= roots2[0] && roots1[1] <= roots2[1]) {\r\n                        return [roots2[0], roots1[0], roots1[1], roots2[1]];\r\n                    } else if (roots2[0] >= roots1[0] && roots2[1] <= roots1[1]) {\r\n                        return [roots1[0], roots2[0], roots2[1], roots1[1]];\r\n                    } else if (roots1[0] > roots2[0] && roots1[0] < roots2[1]) {\r\n                        return [roots2[0], roots1[0], roots2[1], roots1[1]];\r\n                    }\r\n                    return [roots1[0], roots2[0], roots1[1], roots2[1]];\r\n                }\r\n                return roots1;\r\n            }\r\n\r\n            if (roots2.length !== 0) {\r\n                roots2[0] += temp;\r\n                roots2[1] += temp;\r\n\r\n                return roots2;\r\n            }\r\n            return [];\r\n        }\r\n    }\r\n    return [];\r\n}\r\n\r\nfunction neumark(a3, a2, a1, a0) {\r\n    var a1Squared = a1 * a1;\r\n    var a2Squared = a2 * a2;\r\n    var a3Squared = a3 * a3;\r\n\r\n    var p = -2.0 * a2;\r\n    var q = a1 * a3 + a2Squared - 4.0 * a0;\r\n    var r = a3Squared * a0 - a1 * a2 * a3 + a1Squared;\r\n\r\n    var cubicRoots = CubicRealPolynomial.computeRealRoots(1.0, p, q, r);\r\n\r\n    if (cubicRoots.length > 0) {\r\n        // Use the most positive root\r\n        var y = cubicRoots[0];\r\n\r\n        var temp = a2 - y;\r\n        var tempSquared = temp * temp;\r\n\r\n        var g1 = a3 / 2.0;\r\n        var h1 = temp / 2.0;\r\n\r\n        var m = tempSquared - 4.0 * a0;\r\n        var mError = tempSquared + 4.0 * Math.abs(a0);\r\n\r\n        var n = a3Squared - 4.0 * y;\r\n        var nError = a3Squared + 4.0 * Math.abs(y);\r\n\r\n        var g2;\r\n        var h2;\r\n\r\n        if (y < 0.0 || m * nError < n * mError) {\r\n            var squareRootOfN = Math.sqrt(n);\r\n            g2 = squareRootOfN / 2.0;\r\n            h2 = squareRootOfN === 0.0 ? 0.0 : (a3 * h1 - a1) / squareRootOfN;\r\n        } else {\r\n            var squareRootOfM = Math.sqrt(m);\r\n            g2 = squareRootOfM === 0.0 ? 0.0 : (a3 * h1 - a1) / squareRootOfM;\r\n            h2 = squareRootOfM / 2.0;\r\n        }\r\n\r\n        var G;\r\n        var g;\r\n        if (g1 === 0.0 && g2 === 0.0) {\r\n            G = 0.0;\r\n            g = 0.0;\r\n        } else if (CesiumMath.sign(g1) === CesiumMath.sign(g2)) {\r\n            G = g1 + g2;\r\n            g = y / G;\r\n        } else {\r\n            g = g1 - g2;\r\n            G = y / g;\r\n        }\r\n\r\n        var H;\r\n        var h;\r\n        if (h1 === 0.0 && h2 === 0.0) {\r\n            H = 0.0;\r\n            h = 0.0;\r\n        } else if (CesiumMath.sign(h1) === CesiumMath.sign(h2)) {\r\n            H = h1 + h2;\r\n            h = a0 / H;\r\n        } else {\r\n            h = h1 - h2;\r\n            H = a0 / h;\r\n        }\r\n\r\n        // Now solve the two quadratic factors:  (y^2 + G y + H)(y^2 + g y + h);\r\n        var roots1 = QuadraticRealPolynomial.computeRealRoots(1.0, G, H);\r\n        var roots2 = QuadraticRealPolynomial.computeRealRoots(1.0, g, h);\r\n\r\n        if (roots1.length !== 0) {\r\n            if (roots2.length !== 0) {\r\n                if (roots1[1] <= roots2[0]) {\r\n                    return [roots1[0], roots1[1], roots2[0], roots2[1]];\r\n                } else if (roots2[1] <= roots1[0]) {\r\n                    return [roots2[0], roots2[1], roots1[0], roots1[1]];\r\n                } else if (roots1[0] >= roots2[0] && roots1[1] <= roots2[1]) {\r\n                    return [roots2[0], roots1[0], roots1[1], roots2[1]];\r\n                } else if (roots2[0] >= roots1[0] && roots2[1] <= roots1[1]) {\r\n                    return [roots1[0], roots2[0], roots2[1], roots1[1]];\r\n                } else if (roots1[0] > roots2[0] && roots1[0] < roots2[1]) {\r\n                    return [roots2[0], roots1[0], roots2[1], roots1[1]];\r\n                }\r\n                return [roots1[0], roots2[0], roots1[1], roots2[1]];\r\n            }\r\n            return roots1;\r\n        }\r\n        if (roots2.length !== 0) {\r\n            return roots2;\r\n        }\r\n    }\r\n    return [];\r\n}\r\n\r\n/**\r\n * Provides the real valued roots of the quartic polynomial with the provided coefficients.\r\n *\r\n * @param {Number} a The coefficient of the 4th order monomial.\r\n * @param {Number} b The coefficient of the 3rd order monomial.\r\n * @param {Number} c The coefficient of the 2nd order monomial.\r\n * @param {Number} d The coefficient of the 1st order monomial.\r\n * @param {Number} e The coefficient of the 0th order monomial.\r\n * @returns {Number[]} The real valued roots.\r\n */\r\nQuarticRealPolynomial.computeRealRoots = function (a, b, c, d, e) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (typeof a !== 'number') {\r\n        throw new DeveloperError('a is a required number.');\r\n    }\r\n    if (typeof b !== 'number') {\r\n        throw new DeveloperError('b is a required number.');\r\n    }\r\n    if (typeof c !== 'number') {\r\n        throw new DeveloperError('c is a required number.');\r\n    }\r\n    if (typeof d !== 'number') {\r\n        throw new DeveloperError('d is a required number.');\r\n    }\r\n    if (typeof e !== 'number') {\r\n        throw new DeveloperError('e is a required number.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    if (Math.abs(a) < CesiumMath.EPSILON15) {\r\n        return CubicRealPolynomial.computeRealRoots(b, c, d, e);\r\n    }\r\n    var a3 = b / a;\r\n    var a2 = c / a;\r\n    var a1 = d / a;\r\n    var a0 = e / a;\r\n\r\n    var k = a3 < 0.0 ? 1 : 0;\r\n    k += a2 < 0.0 ? k + 1 : k;\r\n    k += a1 < 0.0 ? k + 1 : k;\r\n    k += a0 < 0.0 ? k + 1 : k;\r\n\r\n    switch (k) {\r\n        case 0:\r\n            return original(a3, a2, a1, a0);\r\n        case 1:\r\n            return neumark(a3, a2, a1, a0);\r\n        case 2:\r\n            return neumark(a3, a2, a1, a0);\r\n        case 3:\r\n            return original(a3, a2, a1, a0);\r\n        case 4:\r\n            return original(a3, a2, a1, a0);\r\n        case 5:\r\n            return neumark(a3, a2, a1, a0);\r\n        case 6:\r\n            return original(a3, a2, a1, a0);\r\n        case 7:\r\n            return original(a3, a2, a1, a0);\r\n        case 8:\r\n            return neumark(a3, a2, a1, a0);\r\n        case 9:\r\n            return original(a3, a2, a1, a0);\r\n        case 10:\r\n            return original(a3, a2, a1, a0);\r\n        case 11:\r\n            return neumark(a3, a2, a1, a0);\r\n        case 12:\r\n            return original(a3, a2, a1, a0);\r\n        case 13:\r\n            return original(a3, a2, a1, a0);\r\n        case 14:\r\n            return original(a3, a2, a1, a0);\r\n        case 15:\r\n            return original(a3, a2, a1, a0);\r\n        default:\r\n            return undefined;\r\n    }\r\n};\r\nexport default QuarticRealPolynomial;\r\n","import Cartesian3 from './Cartesian3.js';\r\nimport Check from './Check.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\n\r\n/**\r\n * Represents a ray that extends infinitely from the provided origin in the provided direction.\r\n * @alias Ray\r\n * @constructor\r\n *\r\n * @param {Cartesian3} [origin=Cartesian3.ZERO] The origin of the ray.\r\n * @param {Cartesian3} [direction=Cartesian3.ZERO] The direction of the ray.\r\n */\r\nfunction Ray(origin, direction) {\r\n    direction = Cartesian3.clone(defaultValue(direction, Cartesian3.ZERO));\r\n    if (!Cartesian3.equals(direction, Cartesian3.ZERO)) {\r\n        Cartesian3.normalize(direction, direction);\r\n    }\r\n\r\n    /**\r\n     * The origin of the ray.\r\n     * @type {Cartesian3}\r\n     * @default {@link Cartesian3.ZERO}\r\n     */\r\n    this.origin = Cartesian3.clone(defaultValue(origin, Cartesian3.ZERO));\r\n\r\n    /**\r\n     * The direction of the ray.\r\n     * @type {Cartesian3}\r\n     */\r\n    this.direction = direction;\r\n}\r\n\r\n/**\r\n * Duplicates a Ray instance.\r\n *\r\n * @param {Ray} ray The ray to duplicate.\r\n * @param {Ray} [result] The object onto which to store the result.\r\n * @returns {Ray} The modified result parameter or a new Ray instance if one was not provided. (Returns undefined if ray is undefined)\r\n */\r\nRay.clone = function (ray, result) {\r\n    if (!defined(ray)) {\r\n        return undefined;\r\n    }\r\n    if (!defined(result)) {\r\n        return new Ray(ray.origin, ray.direction);\r\n    }\r\n    result.origin = Cartesian3.clone(ray.origin);\r\n    result.direction = Cartesian3.clone(ray.direction);\r\n    return result;\r\n};\r\n\r\n/**\r\n * Computes the point along the ray given by r(t) = o + t*d,\r\n * where o is the origin of the ray and d is the direction.\r\n *\r\n * @param {Ray} ray The ray.\r\n * @param {Number} t A scalar value.\r\n * @param {Cartesian3} [result] The object in which the result will be stored.\r\n * @returns {Cartesian3} The modified result parameter, or a new instance if none was provided.\r\n *\r\n * @example\r\n * //Get the first intersection point of a ray and an ellipsoid.\r\n * var intersection = Cesium.IntersectionTests.rayEllipsoid(ray, ellipsoid);\r\n * var point = Cesium.Ray.getPoint(ray, intersection.start);\r\n */\r\nRay.getPoint = function (ray, t, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.typeOf.object('ray', ray);\r\n    Check.typeOf.number('t', t);\r\n    //>>includeEnd('debug');\r\n\r\n    if (!defined(result)) {\r\n        result = new Cartesian3();\r\n    }\r\n\r\n    result = Cartesian3.multiplyByScalar(ray.direction, t, result);\r\n    return Cartesian3.add(ray.origin, result, result);\r\n};\r\nexport default Ray;\r\n","import Cartesian3 from './Cartesian3.js';\r\nimport Cartographic from './Cartographic.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport Interval from './Interval.js';\r\nimport CesiumMath from './Math.js';\r\nimport Matrix3 from './Matrix3.js';\r\nimport QuadraticRealPolynomial from './QuadraticRealPolynomial.js';\r\nimport QuarticRealPolynomial from './QuarticRealPolynomial.js';\r\nimport Ray from './Ray.js';\r\n\r\n/**\r\n * Functions for computing the intersection between geometries such as rays, planes, triangles, and ellipsoids.\r\n *\r\n * @namespace IntersectionTests\r\n */\r\nvar IntersectionTests = {};\r\n\r\n/**\r\n * Computes the intersection of a ray and a plane.\r\n * 计算一个射线和一个平面的交点\r\n *\r\n * @param {Ray} ray The ray.\r\n * @param {Plane} plane The plane.\r\n * @param {Cartesian3} [result] The object onto which to store the result.\r\n * @returns {Cartesian3} The intersection point or undefined if there is no intersections.\r\n */\r\nIntersectionTests.rayPlane = function (ray, plane, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(ray)) {\r\n        throw new DeveloperError('ray is required.');\r\n    }\r\n    if (!defined(plane)) {\r\n        throw new DeveloperError('plane is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    if (!defined(result)) {\r\n        result = new Cartesian3();\r\n    }\r\n\r\n    var origin = ray.origin;\r\n    var direction = ray.direction;\r\n    var normal = plane.normal;\r\n    var denominator = Cartesian3.dot(normal, direction);\r\n\r\n    if (Math.abs(denominator) < CesiumMath.EPSILON15) {\r\n        // Ray is parallel to plane.  The ray may be in the polygon's plane.\r\n        return undefined;\r\n    }\r\n\r\n    var t = (-plane.distance - Cartesian3.dot(normal, origin)) / denominator;\r\n\r\n    if (t < 0) {\r\n        return undefined;\r\n    }\r\n\r\n    result = Cartesian3.multiplyByScalar(direction, t, result);\r\n    return Cartesian3.add(origin, result, result);\r\n};\r\n\r\nvar scratchEdge0 = new Cartesian3();\r\nvar scratchEdge1 = new Cartesian3();\r\nvar scratchPVec = new Cartesian3();\r\nvar scratchTVec = new Cartesian3();\r\nvar scratchQVec = new Cartesian3();\r\n\r\n/**\r\n * Computes the intersection of a ray and a triangle as a parametric distance along the input ray. The result is negative when the triangle is behind the ray.\r\n *\r\n * Implements {@link https://cadxfem.org/inf/Fast%20MinimumStorage%20RayTriangle%20Intersection.pdf|\r\n * Fast Minimum Storage Ray/Triangle Intersection} by Tomas Moller and Ben Trumbore.\r\n *\r\n * @memberof IntersectionTests\r\n *\r\n * @param {Ray} ray The ray.\r\n * @param {Cartesian3} p0 The first vertex of the triangle.\r\n * @param {Cartesian3} p1 The second vertex of the triangle.\r\n * @param {Cartesian3} p2 The third vertex of the triangle.\r\n * @param {Boolean} [cullBackFaces=false] If <code>true</code>, will only compute an intersection with the front face of the triangle\r\n *                  and return undefined for intersections with the back face.\r\n * @returns {Number} The intersection as a parametric distance along the ray, or undefined if there is no intersection.\r\n */\r\nIntersectionTests.rayTriangleParametric = function (ray, p0, p1, p2, cullBackFaces) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(ray)) {\r\n        throw new DeveloperError('ray is required.');\r\n    }\r\n    if (!defined(p0)) {\r\n        throw new DeveloperError('p0 is required.');\r\n    }\r\n    if (!defined(p1)) {\r\n        throw new DeveloperError('p1 is required.');\r\n    }\r\n    if (!defined(p2)) {\r\n        throw new DeveloperError('p2 is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    cullBackFaces = defaultValue(cullBackFaces, false);\r\n\r\n    var origin = ray.origin;\r\n    var direction = ray.direction;\r\n\r\n    var edge0 = Cartesian3.subtract(p1, p0, scratchEdge0);\r\n    var edge1 = Cartesian3.subtract(p2, p0, scratchEdge1);\r\n\r\n    var p = Cartesian3.cross(direction, edge1, scratchPVec);\r\n    var det = Cartesian3.dot(edge0, p);\r\n\r\n    var tvec;\r\n    var q;\r\n\r\n    var u;\r\n    var v;\r\n    var t;\r\n\r\n    if (cullBackFaces) {\r\n        if (det < CesiumMath.EPSILON6) {\r\n            return undefined;\r\n        }\r\n\r\n        tvec = Cartesian3.subtract(origin, p0, scratchTVec);\r\n        u = Cartesian3.dot(tvec, p);\r\n        if (u < 0.0 || u > det) {\r\n            return undefined;\r\n        }\r\n\r\n        q = Cartesian3.cross(tvec, edge0, scratchQVec);\r\n\r\n        v = Cartesian3.dot(direction, q);\r\n        if (v < 0.0 || u + v > det) {\r\n            return undefined;\r\n        }\r\n\r\n        t = Cartesian3.dot(edge1, q) / det;\r\n    } else {\r\n        if (Math.abs(det) < CesiumMath.EPSILON6) {\r\n            return undefined;\r\n        }\r\n        var invDet = 1.0 / det;\r\n\r\n        tvec = Cartesian3.subtract(origin, p0, scratchTVec);\r\n        u = Cartesian3.dot(tvec, p) * invDet;\r\n        if (u < 0.0 || u > 1.0) {\r\n            return undefined;\r\n        }\r\n\r\n        q = Cartesian3.cross(tvec, edge0, scratchQVec);\r\n\r\n        v = Cartesian3.dot(direction, q) * invDet;\r\n        if (v < 0.0 || u + v > 1.0) {\r\n            return undefined;\r\n        }\r\n\r\n        t = Cartesian3.dot(edge1, q) * invDet;\r\n    }\r\n\r\n    return t;\r\n};\r\n\r\n/**\r\n * Computes the intersection of a ray and a triangle as a Cartesian3 coordinate.\r\n *\r\n * Implements {@link https://cadxfem.org/inf/Fast%20MinimumStorage%20RayTriangle%20Intersection.pdf|\r\n * Fast Minimum Storage Ray/Triangle Intersection} by Tomas Moller and Ben Trumbore.\r\n *\r\n * @memberof IntersectionTests\r\n *\r\n * @param {Ray} ray The ray.\r\n * @param {Cartesian3} p0 The first vertex of the triangle.\r\n * @param {Cartesian3} p1 The second vertex of the triangle.\r\n * @param {Cartesian3} p2 The third vertex of the triangle.\r\n * @param {Boolean} [cullBackFaces=false] If <code>true</code>, will only compute an intersection with the front face of the triangle\r\n *                  and return undefined for intersections with the back face.\r\n * @param {Cartesian3} [result] The <code>Cartesian3</code> onto which to store the result.\r\n * @returns {Cartesian3} The intersection point or undefined if there is no intersections.\r\n */\r\nIntersectionTests.rayTriangle = function (ray, p0, p1, p2, cullBackFaces, result) {\r\n    var t = IntersectionTests.rayTriangleParametric(ray, p0, p1, p2, cullBackFaces);\r\n    if (!defined(t) || t < 0.0) {\r\n        return undefined;\r\n    }\r\n\r\n    if (!defined(result)) {\r\n        result = new Cartesian3();\r\n    }\r\n\r\n    Cartesian3.multiplyByScalar(ray.direction, t, result);\r\n    return Cartesian3.add(ray.origin, result, result);\r\n};\r\n\r\nvar scratchLineSegmentTriangleRay = new Ray();\r\n\r\n/**\r\n * Computes the intersection of a line segment and a triangle.\r\n * @memberof IntersectionTests\r\n *\r\n * @param {Cartesian3} v0 The an end point of the line segment.\r\n * @param {Cartesian3} v1 The other end point of the line segment.\r\n * @param {Cartesian3} p0 The first vertex of the triangle.\r\n * @param {Cartesian3} p1 The second vertex of the triangle.\r\n * @param {Cartesian3} p2 The third vertex of the triangle.\r\n * @param {Boolean} [cullBackFaces=false] If <code>true</code>, will only compute an intersection with the front face of the triangle\r\n *                  and return undefined for intersections with the back face.\r\n * @param {Cartesian3} [result] The <code>Cartesian3</code> onto which to store the result.\r\n * @returns {Cartesian3} The intersection point or undefined if there is no intersections.\r\n */\r\nIntersectionTests.lineSegmentTriangle = function (v0, v1, p0, p1, p2, cullBackFaces, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(v0)) {\r\n        throw new DeveloperError('v0 is required.');\r\n    }\r\n    if (!defined(v1)) {\r\n        throw new DeveloperError('v1 is required.');\r\n    }\r\n    if (!defined(p0)) {\r\n        throw new DeveloperError('p0 is required.');\r\n    }\r\n    if (!defined(p1)) {\r\n        throw new DeveloperError('p1 is required.');\r\n    }\r\n    if (!defined(p2)) {\r\n        throw new DeveloperError('p2 is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var ray = scratchLineSegmentTriangleRay;\r\n    Cartesian3.clone(v0, ray.origin);\r\n    Cartesian3.subtract(v1, v0, ray.direction);\r\n    Cartesian3.normalize(ray.direction, ray.direction);\r\n\r\n    var t = IntersectionTests.rayTriangleParametric(ray, p0, p1, p2, cullBackFaces);\r\n    if (!defined(t) || t < 0.0 || t > Cartesian3.distance(v0, v1)) {\r\n        return undefined;\r\n    }\r\n\r\n    if (!defined(result)) {\r\n        result = new Cartesian3();\r\n    }\r\n\r\n    Cartesian3.multiplyByScalar(ray.direction, t, result);\r\n    return Cartesian3.add(ray.origin, result, result);\r\n};\r\n\r\nfunction solveQuadratic(a, b, c, result) {\r\n    var det = b * b - 4.0 * a * c;\r\n    if (det < 0.0) {\r\n        return undefined;\r\n    } else if (det > 0.0) {\r\n        var denom = 1.0 / (2.0 * a);\r\n        var disc = Math.sqrt(det);\r\n        var root0 = (-b + disc) * denom;\r\n        var root1 = (-b - disc) * denom;\r\n\r\n        if (root0 < root1) {\r\n            result.root0 = root0;\r\n            result.root1 = root1;\r\n        } else {\r\n            result.root0 = root1;\r\n            result.root1 = root0;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    var root = -b / (2.0 * a);\r\n    if (root === 0.0) {\r\n        return undefined;\r\n    }\r\n\r\n    result.root0 = result.root1 = root;\r\n    return result;\r\n}\r\n\r\nvar raySphereRoots = {\r\n    root0: 0.0,\r\n    root1: 0.0\r\n};\r\n\r\nfunction raySphere(ray, sphere, result) {\r\n    if (!defined(result)) {\r\n        result = new Interval();\r\n    }\r\n\r\n    var origin = ray.origin;\r\n    var direction = ray.direction;\r\n\r\n    var center = sphere.center;\r\n    var radiusSquared = sphere.radius * sphere.radius;\r\n\r\n    var diff = Cartesian3.subtract(origin, center, scratchPVec);\r\n\r\n    var a = Cartesian3.dot(direction, direction);\r\n    var b = 2.0 * Cartesian3.dot(direction, diff);\r\n    var c = Cartesian3.magnitudeSquared(diff) - radiusSquared;\r\n\r\n    var roots = solveQuadratic(a, b, c, raySphereRoots);\r\n    if (!defined(roots)) {\r\n        return undefined;\r\n    }\r\n\r\n    result.start = roots.root0;\r\n    result.stop = roots.root1;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Computes the intersection points of a ray with a sphere.\r\n * @memberof IntersectionTests\r\n *\r\n * @param {Ray} ray The ray.\r\n * @param {BoundingSphere} sphere The sphere.\r\n * @param {Interval} [result] The result onto which to store the result.\r\n * @returns {Interval} The interval containing scalar points along the ray or undefined if there are no intersections.\r\n */\r\nIntersectionTests.raySphere = function (ray, sphere, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(ray)) {\r\n        throw new DeveloperError('ray is required.');\r\n    }\r\n    if (!defined(sphere)) {\r\n        throw new DeveloperError('sphere is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    result = raySphere(ray, sphere, result);\r\n    if (!defined(result) || result.stop < 0.0) {\r\n        return undefined;\r\n    }\r\n\r\n    result.start = Math.max(result.start, 0.0);\r\n    return result;\r\n};\r\n\r\nvar scratchLineSegmentRay = new Ray();\r\n\r\n/**\r\n * Computes the intersection points of a line segment with a sphere.\r\n * @memberof IntersectionTests\r\n *\r\n * @param {Cartesian3} p0 An end point of the line segment.\r\n * @param {Cartesian3} p1 The other end point of the line segment.\r\n * @param {BoundingSphere} sphere The sphere.\r\n * @param {Interval} [result] The result onto which to store the result.\r\n * @returns {Interval} The interval containing scalar points along the ray or undefined if there are no intersections.\r\n */\r\nIntersectionTests.lineSegmentSphere = function (p0, p1, sphere, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(p0)) {\r\n        throw new DeveloperError('p0 is required.');\r\n    }\r\n    if (!defined(p1)) {\r\n        throw new DeveloperError('p1 is required.');\r\n    }\r\n    if (!defined(sphere)) {\r\n        throw new DeveloperError('sphere is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var ray = scratchLineSegmentRay;\r\n    Cartesian3.clone(p0, ray.origin);\r\n    var direction = Cartesian3.subtract(p1, p0, ray.direction);\r\n\r\n    var maxT = Cartesian3.magnitude(direction);\r\n    Cartesian3.normalize(direction, direction);\r\n\r\n    result = raySphere(ray, sphere, result);\r\n    if (!defined(result) || result.stop < 0.0 || result.start > maxT) {\r\n        return undefined;\r\n    }\r\n\r\n    result.start = Math.max(result.start, 0.0);\r\n    result.stop = Math.min(result.stop, maxT);\r\n    return result;\r\n};\r\n\r\nvar scratchQ = new Cartesian3();\r\nvar scratchW = new Cartesian3();\r\n\r\n/**\r\n * Computes the intersection points of a ray with an ellipsoid.\r\n *\r\n * @param {Ray} ray The ray.\r\n * @param {Ellipsoid} ellipsoid The ellipsoid.\r\n * @returns {Interval} The interval containing scalar points along the ray or undefined if there are no intersections.\r\n */\r\nIntersectionTests.rayEllipsoid = function (ray, ellipsoid) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(ray)) {\r\n        throw new DeveloperError('ray is required.');\r\n    }\r\n    if (!defined(ellipsoid)) {\r\n        throw new DeveloperError('ellipsoid is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var inverseRadii = ellipsoid.oneOverRadii;\r\n    var q = Cartesian3.multiplyComponents(inverseRadii, ray.origin, scratchQ);\r\n    var w = Cartesian3.multiplyComponents(inverseRadii, ray.direction, scratchW);\r\n\r\n    var q2 = Cartesian3.magnitudeSquared(q);\r\n    var qw = Cartesian3.dot(q, w);\r\n\r\n    var difference, w2, product, discriminant, temp;\r\n\r\n    if (q2 > 1.0) {\r\n        // Outside ellipsoid.\r\n        if (qw >= 0.0) {\r\n            // Looking outward or tangent (0 intersections).\r\n            return undefined;\r\n        }\r\n\r\n        // qw < 0.0.\r\n        var qw2 = qw * qw;\r\n        difference = q2 - 1.0; // Positively valued.\r\n        w2 = Cartesian3.magnitudeSquared(w);\r\n        product = w2 * difference;\r\n\r\n        if (qw2 < product) {\r\n            // Imaginary roots (0 intersections).\r\n            return undefined;\r\n        } else if (qw2 > product) {\r\n            // Distinct roots (2 intersections).\r\n            discriminant = qw * qw - product;\r\n            temp = -qw + Math.sqrt(discriminant); // Avoid cancellation.\r\n            var root0 = temp / w2;\r\n            var root1 = difference / temp;\r\n            if (root0 < root1) {\r\n                return new Interval(root0, root1);\r\n            }\r\n\r\n            return {\r\n                start: root1,\r\n                stop: root0\r\n            };\r\n        }\r\n        // qw2 == product.  Repeated roots (2 intersections).\r\n        var root = Math.sqrt(difference / w2);\r\n        return new Interval(root, root);\r\n    } else if (q2 < 1.0) {\r\n        // Inside ellipsoid (2 intersections).\r\n        difference = q2 - 1.0; // Negatively valued.\r\n        w2 = Cartesian3.magnitudeSquared(w);\r\n        product = w2 * difference; // Negatively valued.\r\n\r\n        discriminant = qw * qw - product;\r\n        temp = -qw + Math.sqrt(discriminant); // Positively valued.\r\n        return new Interval(0.0, temp / w2);\r\n    }\r\n    // q2 == 1.0. On ellipsoid.\r\n    if (qw < 0.0) {\r\n        // Looking inward.\r\n        w2 = Cartesian3.magnitudeSquared(w);\r\n        return new Interval(0.0, -qw / w2);\r\n    }\r\n\r\n    // qw >= 0.0.  Looking outward or tangent.\r\n    return undefined;\r\n};\r\n\r\nfunction addWithCancellationCheck(left, right, tolerance) {\r\n    var difference = left + right;\r\n    if (CesiumMath.sign(left) !== CesiumMath.sign(right) && Math.abs(difference / Math.max(Math.abs(left), Math.abs(right))) < tolerance) {\r\n        return 0.0;\r\n    }\r\n\r\n    return difference;\r\n}\r\n\r\nfunction quadraticVectorExpression(A, b, c, x, w) {\r\n    var xSquared = x * x;\r\n    var wSquared = w * w;\r\n\r\n    var l2 = (A[Matrix3.COLUMN1ROW1] - A[Matrix3.COLUMN2ROW2]) * wSquared;\r\n    var l1 = w * (x * addWithCancellationCheck(A[Matrix3.COLUMN1ROW0], A[Matrix3.COLUMN0ROW1], CesiumMath.EPSILON15) + b.y);\r\n    var l0 = A[Matrix3.COLUMN0ROW0] * xSquared + A[Matrix3.COLUMN2ROW2] * wSquared + x * b.x + c;\r\n\r\n    var r1 = wSquared * addWithCancellationCheck(A[Matrix3.COLUMN2ROW1], A[Matrix3.COLUMN1ROW2], CesiumMath.EPSILON15);\r\n    var r0 = w * (x * addWithCancellationCheck(A[Matrix3.COLUMN2ROW0], A[Matrix3.COLUMN0ROW2]) + b.z);\r\n\r\n    var cosines;\r\n    var solutions = [];\r\n    if (r0 === 0.0 && r1 === 0.0) {\r\n        cosines = QuadraticRealPolynomial.computeRealRoots(l2, l1, l0);\r\n        if (cosines.length === 0) {\r\n            return solutions;\r\n        }\r\n\r\n        var cosine0 = cosines[0];\r\n        var sine0 = Math.sqrt(Math.max(1.0 - cosine0 * cosine0, 0.0));\r\n        solutions.push(new Cartesian3(x, w * cosine0, w * -sine0));\r\n        solutions.push(new Cartesian3(x, w * cosine0, w * sine0));\r\n\r\n        if (cosines.length === 2) {\r\n            var cosine1 = cosines[1];\r\n            var sine1 = Math.sqrt(Math.max(1.0 - cosine1 * cosine1, 0.0));\r\n            solutions.push(new Cartesian3(x, w * cosine1, w * -sine1));\r\n            solutions.push(new Cartesian3(x, w * cosine1, w * sine1));\r\n        }\r\n\r\n        return solutions;\r\n    }\r\n\r\n    var r0Squared = r0 * r0;\r\n    var r1Squared = r1 * r1;\r\n    var l2Squared = l2 * l2;\r\n    var r0r1 = r0 * r1;\r\n\r\n    var c4 = l2Squared + r1Squared;\r\n    var c3 = 2.0 * (l1 * l2 + r0r1);\r\n    var c2 = 2.0 * l0 * l2 + l1 * l1 - r1Squared + r0Squared;\r\n    var c1 = 2.0 * (l0 * l1 - r0r1);\r\n    var c0 = l0 * l0 - r0Squared;\r\n\r\n    if (c4 === 0.0 && c3 === 0.0 && c2 === 0.0 && c1 === 0.0) {\r\n        return solutions;\r\n    }\r\n\r\n    cosines = QuarticRealPolynomial.computeRealRoots(c4, c3, c2, c1, c0);\r\n    var length = cosines.length;\r\n    if (length === 0) {\r\n        return solutions;\r\n    }\r\n\r\n    for (var i = 0; i < length; ++i) {\r\n        var cosine = cosines[i];\r\n        var cosineSquared = cosine * cosine;\r\n        var sineSquared = Math.max(1.0 - cosineSquared, 0.0);\r\n        var sine = Math.sqrt(sineSquared);\r\n\r\n        //var left = l2 * cosineSquared + l1 * cosine + l0;\r\n        var left;\r\n        if (CesiumMath.sign(l2) === CesiumMath.sign(l0)) {\r\n            left = addWithCancellationCheck(l2 * cosineSquared + l0, l1 * cosine, CesiumMath.EPSILON12);\r\n        } else if (CesiumMath.sign(l0) === CesiumMath.sign(l1 * cosine)) {\r\n            left = addWithCancellationCheck(l2 * cosineSquared, l1 * cosine + l0, CesiumMath.EPSILON12);\r\n        } else {\r\n            left = addWithCancellationCheck(l2 * cosineSquared + l1 * cosine, l0, CesiumMath.EPSILON12);\r\n        }\r\n\r\n        var right = addWithCancellationCheck(r1 * cosine, r0, CesiumMath.EPSILON15);\r\n        var product = left * right;\r\n\r\n        if (product < 0.0) {\r\n            solutions.push(new Cartesian3(x, w * cosine, w * sine));\r\n        } else if (product > 0.0) {\r\n            solutions.push(new Cartesian3(x, w * cosine, w * -sine));\r\n        } else if (sine !== 0.0) {\r\n            solutions.push(new Cartesian3(x, w * cosine, w * -sine));\r\n            solutions.push(new Cartesian3(x, w * cosine, w * sine));\r\n            ++i;\r\n        } else {\r\n            solutions.push(new Cartesian3(x, w * cosine, w * sine));\r\n        }\r\n    }\r\n\r\n    return solutions;\r\n}\r\n\r\nvar firstAxisScratch = new Cartesian3();\r\nvar secondAxisScratch = new Cartesian3();\r\nvar thirdAxisScratch = new Cartesian3();\r\nvar referenceScratch = new Cartesian3();\r\nvar bCart = new Cartesian3();\r\nvar bScratch = new Matrix3();\r\nvar btScratch = new Matrix3();\r\nvar diScratch = new Matrix3();\r\nvar dScratch = new Matrix3();\r\nvar cScratch = new Matrix3();\r\nvar tempMatrix = new Matrix3();\r\nvar aScratch = new Matrix3();\r\nvar sScratch = new Cartesian3();\r\nvar closestScratch = new Cartesian3();\r\nvar surfPointScratch = new Cartographic();\r\n\r\n/**\r\n * Provides the point along the ray which is nearest to the ellipsoid.\r\n *\r\n * @param {Ray} ray The ray.\r\n * @param {Ellipsoid} ellipsoid The ellipsoid.\r\n * @returns {Cartesian3} The nearest planetodetic point on the ray.\r\n */\r\nIntersectionTests.grazingAltitudeLocation = function (ray, ellipsoid) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(ray)) {\r\n        throw new DeveloperError('ray is required.');\r\n    }\r\n    if (!defined(ellipsoid)) {\r\n        throw new DeveloperError('ellipsoid is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var position = ray.origin;\r\n    var direction = ray.direction;\r\n\r\n    if (!Cartesian3.equals(position, Cartesian3.ZERO)) {\r\n        var normal = ellipsoid.geodeticSurfaceNormal(position, firstAxisScratch);\r\n        if (Cartesian3.dot(direction, normal) >= 0.0) {\r\n            // The location provided is the closest point in altitude\r\n            return position;\r\n        }\r\n    }\r\n\r\n    var intersects = defined(this.rayEllipsoid(ray, ellipsoid));\r\n\r\n    // Compute the scaled direction vector.\r\n    var f = ellipsoid.transformPositionToScaledSpace(direction, firstAxisScratch);\r\n\r\n    // Constructs a basis from the unit scaled direction vector. Construct its rotation and transpose.\r\n    var firstAxis = Cartesian3.normalize(f, f);\r\n    var reference = Cartesian3.mostOrthogonalAxis(f, referenceScratch);\r\n    var secondAxis = Cartesian3.normalize(Cartesian3.cross(reference, firstAxis, secondAxisScratch), secondAxisScratch);\r\n    var thirdAxis = Cartesian3.normalize(Cartesian3.cross(firstAxis, secondAxis, thirdAxisScratch), thirdAxisScratch);\r\n    var B = bScratch;\r\n    B[0] = firstAxis.x;\r\n    B[1] = firstAxis.y;\r\n    B[2] = firstAxis.z;\r\n    B[3] = secondAxis.x;\r\n    B[4] = secondAxis.y;\r\n    B[5] = secondAxis.z;\r\n    B[6] = thirdAxis.x;\r\n    B[7] = thirdAxis.y;\r\n    B[8] = thirdAxis.z;\r\n\r\n    var B_T = Matrix3.transpose(B, btScratch);\r\n\r\n    // Get the scaling matrix and its inverse.\r\n    var D_I = Matrix3.fromScale(ellipsoid.radii, diScratch);\r\n    var D = Matrix3.fromScale(ellipsoid.oneOverRadii, dScratch);\r\n\r\n    var C = cScratch;\r\n    C[0] = 0.0;\r\n    C[1] = -direction.z;\r\n    C[2] = direction.y;\r\n    C[3] = direction.z;\r\n    C[4] = 0.0;\r\n    C[5] = -direction.x;\r\n    C[6] = -direction.y;\r\n    C[7] = direction.x;\r\n    C[8] = 0.0;\r\n\r\n    var temp = Matrix3.multiply(Matrix3.multiply(B_T, D, tempMatrix), C, tempMatrix);\r\n    var A = Matrix3.multiply(Matrix3.multiply(temp, D_I, aScratch), B, aScratch);\r\n    var b = Matrix3.multiplyByVector(temp, position, bCart);\r\n\r\n    // Solve for the solutions to the expression in standard form:\r\n    var solutions = quadraticVectorExpression(A, Cartesian3.negate(b, firstAxisScratch), 0.0, 0.0, 1.0);\r\n\r\n    var s;\r\n    var altitude;\r\n    var length = solutions.length;\r\n    if (length > 0) {\r\n        var closest = Cartesian3.clone(Cartesian3.ZERO, closestScratch);\r\n        var maximumValue = Number.NEGATIVE_INFINITY;\r\n\r\n        for (var i = 0; i < length; ++i) {\r\n            s = Matrix3.multiplyByVector(D_I, Matrix3.multiplyByVector(B, solutions[i], sScratch), sScratch);\r\n            var v = Cartesian3.normalize(Cartesian3.subtract(s, position, referenceScratch), referenceScratch);\r\n            var dotProduct = Cartesian3.dot(v, direction);\r\n\r\n            if (dotProduct > maximumValue) {\r\n                maximumValue = dotProduct;\r\n                closest = Cartesian3.clone(s, closest);\r\n            }\r\n        }\r\n\r\n        var surfacePoint = ellipsoid.cartesianToCartographic(closest, surfPointScratch);\r\n        maximumValue = CesiumMath.clamp(maximumValue, 0.0, 1.0);\r\n        altitude = Cartesian3.magnitude(Cartesian3.subtract(closest, position, referenceScratch)) * Math.sqrt(1.0 - maximumValue * maximumValue);\r\n        altitude = intersects ? -altitude : altitude;\r\n        surfacePoint.height = altitude;\r\n        return ellipsoid.cartographicToCartesian(surfacePoint, new Cartesian3());\r\n    }\r\n\r\n    return undefined;\r\n};\r\n\r\nvar lineSegmentPlaneDifference = new Cartesian3();\r\n\r\n/**\r\n * Computes the intersection of a line segment and a plane.\r\n *\r\n * @param {Cartesian3} endPoint0 An end point of the line segment.\r\n * @param {Cartesian3} endPoint1 The other end point of the line segment.\r\n * @param {Plane} plane The plane.\r\n * @param {Cartesian3} [result] The object onto which to store the result.\r\n * @returns {Cartesian3} The intersection point or undefined if there is no intersection.\r\n *\r\n * @example\r\n * var origin = Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883);\r\n * var normal = ellipsoid.geodeticSurfaceNormal(origin);\r\n * var plane = Cesium.Plane.fromPointNormal(origin, normal);\r\n *\r\n * var p0 = new Cesium.Cartesian3(...);\r\n * var p1 = new Cesium.Cartesian3(...);\r\n *\r\n * // find the intersection of the line segment from p0 to p1 and the tangent plane at origin.\r\n * var intersection = Cesium.IntersectionTests.lineSegmentPlane(p0, p1, plane);\r\n */\r\nIntersectionTests.lineSegmentPlane = function (endPoint0, endPoint1, plane, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(endPoint0)) {\r\n        throw new DeveloperError('endPoint0 is required.');\r\n    }\r\n    if (!defined(endPoint1)) {\r\n        throw new DeveloperError('endPoint1 is required.');\r\n    }\r\n    if (!defined(plane)) {\r\n        throw new DeveloperError('plane is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    if (!defined(result)) {\r\n        result = new Cartesian3();\r\n    }\r\n\r\n    var difference = Cartesian3.subtract(endPoint1, endPoint0, lineSegmentPlaneDifference);\r\n    var normal = plane.normal;\r\n    var nDotDiff = Cartesian3.dot(normal, difference);\r\n\r\n    // check if the segment and plane are parallel\r\n    if (Math.abs(nDotDiff) < CesiumMath.EPSILON6) {\r\n        return undefined;\r\n    }\r\n\r\n    var nDotP0 = Cartesian3.dot(normal, endPoint0);\r\n    var t = -(plane.distance + nDotP0) / nDotDiff;\r\n\r\n    // intersection only if t is in [0, 1]\r\n    if (t < 0.0 || t > 1.0) {\r\n        return undefined;\r\n    }\r\n\r\n    // intersection is endPoint0 + t * (endPoint1 - endPoint0)\r\n    Cartesian3.multiplyByScalar(difference, t, result);\r\n    Cartesian3.add(endPoint0, result, result);\r\n    return result;\r\n};\r\n\r\n/**\r\n * Computes the intersection of a triangle and a plane\r\n *\r\n * @param {Cartesian3} p0 First point of the triangle\r\n * @param {Cartesian3} p1 Second point of the triangle\r\n * @param {Cartesian3} p2 Third point of the triangle\r\n * @param {Plane} plane Intersection plane\r\n * @returns {Object} An object with properties <code>positions</code> and <code>indices</code>, which are arrays that represent three triangles that do not cross the plane. (Undefined if no intersection exists)\r\n *\r\n * @example\r\n * var origin = Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883);\r\n * var normal = ellipsoid.geodeticSurfaceNormal(origin);\r\n * var plane = Cesium.Plane.fromPointNormal(origin, normal);\r\n *\r\n * var p0 = new Cesium.Cartesian3(...);\r\n * var p1 = new Cesium.Cartesian3(...);\r\n * var p2 = new Cesium.Cartesian3(...);\r\n *\r\n * // convert the triangle composed of points (p0, p1, p2) to three triangles that don't cross the plane\r\n * var triangles = Cesium.IntersectionTests.trianglePlaneIntersection(p0, p1, p2, plane);\r\n */\r\nIntersectionTests.trianglePlaneIntersection = function (p0, p1, p2, plane) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(p0) || !defined(p1) || !defined(p2) || !defined(plane)) {\r\n        throw new DeveloperError('p0, p1, p2, and plane are required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var planeNormal = plane.normal;\r\n    var planeD = plane.distance;\r\n    var p0Behind = Cartesian3.dot(planeNormal, p0) + planeD < 0.0;\r\n    var p1Behind = Cartesian3.dot(planeNormal, p1) + planeD < 0.0;\r\n    var p2Behind = Cartesian3.dot(planeNormal, p2) + planeD < 0.0;\r\n    // Given these dots products, the calls to lineSegmentPlaneIntersection\r\n    // always have defined results.\r\n\r\n    var numBehind = 0;\r\n    numBehind += p0Behind ? 1 : 0;\r\n    numBehind += p1Behind ? 1 : 0;\r\n    numBehind += p2Behind ? 1 : 0;\r\n\r\n    var u1, u2;\r\n    if (numBehind === 1 || numBehind === 2) {\r\n        u1 = new Cartesian3();\r\n        u2 = new Cartesian3();\r\n    }\r\n\r\n    if (numBehind === 1) {\r\n        if (p0Behind) {\r\n            IntersectionTests.lineSegmentPlane(p0, p1, plane, u1);\r\n            IntersectionTests.lineSegmentPlane(p0, p2, plane, u2);\r\n\r\n            return {\r\n                positions: [p0, p1, p2, u1, u2],\r\n                indices: [\r\n                    // Behind\r\n                    0,\r\n                    3,\r\n                    4,\r\n\r\n                    // In front\r\n                    1,\r\n                    2,\r\n                    4,\r\n                    1,\r\n                    4,\r\n                    3\r\n                ]\r\n            };\r\n        } else if (p1Behind) {\r\n            IntersectionTests.lineSegmentPlane(p1, p2, plane, u1);\r\n            IntersectionTests.lineSegmentPlane(p1, p0, plane, u2);\r\n\r\n            return {\r\n                positions: [p0, p1, p2, u1, u2],\r\n                indices: [\r\n                    // Behind\r\n                    1,\r\n                    3,\r\n                    4,\r\n\r\n                    // In front\r\n                    2,\r\n                    0,\r\n                    4,\r\n                    2,\r\n                    4,\r\n                    3\r\n                ]\r\n            };\r\n        } else if (p2Behind) {\r\n            IntersectionTests.lineSegmentPlane(p2, p0, plane, u1);\r\n            IntersectionTests.lineSegmentPlane(p2, p1, plane, u2);\r\n\r\n            return {\r\n                positions: [p0, p1, p2, u1, u2],\r\n                indices: [\r\n                    // Behind\r\n                    2,\r\n                    3,\r\n                    4,\r\n\r\n                    // In front\r\n                    0,\r\n                    1,\r\n                    4,\r\n                    0,\r\n                    4,\r\n                    3\r\n                ]\r\n            };\r\n        }\r\n    } else if (numBehind === 2) {\r\n        if (!p0Behind) {\r\n            IntersectionTests.lineSegmentPlane(p1, p0, plane, u1);\r\n            IntersectionTests.lineSegmentPlane(p2, p0, plane, u2);\r\n\r\n            return {\r\n                positions: [p0, p1, p2, u1, u2],\r\n                indices: [\r\n                    // Behind\r\n                    1,\r\n                    2,\r\n                    4,\r\n                    1,\r\n                    4,\r\n                    3,\r\n\r\n                    // In front\r\n                    0,\r\n                    3,\r\n                    4\r\n                ]\r\n            };\r\n        } else if (!p1Behind) {\r\n            IntersectionTests.lineSegmentPlane(p2, p1, plane, u1);\r\n            IntersectionTests.lineSegmentPlane(p0, p1, plane, u2);\r\n\r\n            return {\r\n                positions: [p0, p1, p2, u1, u2],\r\n                indices: [\r\n                    // Behind\r\n                    2,\r\n                    0,\r\n                    4,\r\n                    2,\r\n                    4,\r\n                    3,\r\n\r\n                    // In front\r\n                    1,\r\n                    3,\r\n                    4\r\n                ]\r\n            };\r\n        } else if (!p2Behind) {\r\n            IntersectionTests.lineSegmentPlane(p0, p2, plane, u1);\r\n            IntersectionTests.lineSegmentPlane(p1, p2, plane, u2);\r\n\r\n            return {\r\n                positions: [p0, p1, p2, u1, u2],\r\n                indices: [\r\n                    // Behind\r\n                    0,\r\n                    1,\r\n                    4,\r\n                    0,\r\n                    4,\r\n                    3,\r\n\r\n                    // In front\r\n                    2,\r\n                    3,\r\n                    4\r\n                ]\r\n            };\r\n        }\r\n    }\r\n\r\n    // if numBehind is 3, the triangle is completely behind the plane;\r\n    // otherwise, it is completely in front (numBehind is 0).\r\n    return undefined;\r\n};\r\nexport default IntersectionTests;\r\n"],"names":["DeveloperError","addWithCancellationCheck","CesiumMath","Cartesian3","defaultValue","defined","Check","Interval","Matrix3","Cartographic"],"mappings":"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"}