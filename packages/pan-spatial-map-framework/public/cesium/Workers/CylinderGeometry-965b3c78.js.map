{"version":3,"file":"CylinderGeometry-965b3c78.js","sources":["../../../../Source/Core/CylinderGeometry.js"],"sourcesContent":["import arrayFill from './arrayFill.js';\r\nimport BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian2 from './Cartesian2.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport CylinderGeometryLibrary from './CylinderGeometryLibrary.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport CesiumMath from './Math.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\nimport VertexFormat from './VertexFormat.js';\r\n\r\nvar radiusScratch = new Cartesian2();\r\nvar normalScratch = new Cartesian3();\r\nvar bitangentScratch = new Cartesian3();\r\nvar tangentScratch = new Cartesian3();\r\nvar positionScratch = new Cartesian3();\r\n\r\n/**\r\n * A description of a cylinder.\r\n *\r\n * @alias CylinderGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Number} options.length The length of the cylinder.\r\n * @param {Number} options.topRadius The radius of the top of the cylinder.\r\n * @param {Number} options.bottomRadius The radius of the bottom of the cylinder.\r\n * @param {Number} [options.slices=128] The number of edges around the perimeter of the cylinder.\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n *\r\n * @exception {DeveloperError} options.slices must be greater than or equal to 3.\r\n *\r\n * @see CylinderGeometry.createGeometry\r\n *\r\n * @example\r\n * // create cylinder geometry\r\n * var cylinder = new Cesium.CylinderGeometry({\r\n *     length: 200000,\r\n *     topRadius: 80000,\r\n *     bottomRadius: 200000,\r\n * });\r\n * var geometry = Cesium.CylinderGeometry.createGeometry(cylinder);\r\n */\r\nfunction CylinderGeometry(options) {\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n    var length = options.length;\r\n    var topRadius = options.topRadius;\r\n    var bottomRadius = options.bottomRadius;\r\n    var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\r\n    var slices = defaultValue(options.slices, 128);\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(length)) {\r\n        throw new DeveloperError('options.length must be defined.');\r\n    }\r\n    if (!defined(topRadius)) {\r\n        throw new DeveloperError('options.topRadius must be defined.');\r\n    }\r\n    if (!defined(bottomRadius)) {\r\n        throw new DeveloperError('options.bottomRadius must be defined.');\r\n    }\r\n    if (slices < 3) {\r\n        throw new DeveloperError('options.slices must be greater than or equal to 3.');\r\n    }\r\n    if (defined(options.offsetAttribute) && options.offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n        throw new DeveloperError('GeometryOffsetAttribute.TOP is not a supported options.offsetAttribute for this geometry.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    this._length = length;\r\n    this._topRadius = topRadius;\r\n    this._bottomRadius = bottomRadius;\r\n    this._vertexFormat = VertexFormat.clone(vertexFormat);\r\n    this._slices = slices;\r\n    this._offsetAttribute = options.offsetAttribute;\r\n    this._workerName = 'createCylinderGeometry';\r\n}\r\n\r\n/**\r\n * The number of elements used to pack the object into an array.\r\n * @type {Number}\r\n */\r\nCylinderGeometry.packedLength = VertexFormat.packedLength + 5;\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {CylinderGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nCylinderGeometry.pack = function (value, array, startingIndex) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(value)) {\r\n        throw new DeveloperError('value is required');\r\n    }\r\n    if (!defined(array)) {\r\n        throw new DeveloperError('array is required');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n    startingIndex += VertexFormat.packedLength;\r\n\r\n    array[startingIndex++] = value._length;\r\n    array[startingIndex++] = value._topRadius;\r\n    array[startingIndex++] = value._bottomRadius;\r\n    array[startingIndex++] = value._slices;\r\n    array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n    return array;\r\n};\r\n\r\nvar scratchVertexFormat = new VertexFormat();\r\nvar scratchOptions = {\r\n    vertexFormat: scratchVertexFormat,\r\n    length: undefined,\r\n    topRadius: undefined,\r\n    bottomRadius: undefined,\r\n    slices: undefined,\r\n    offsetAttribute: undefined\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {CylinderGeometry} [result] The object into which to store the result.\r\n * @returns {CylinderGeometry} The modified result parameter or a new CylinderGeometry instance if one was not provided.\r\n */\r\nCylinderGeometry.unpack = function (array, startingIndex, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(array)) {\r\n        throw new DeveloperError('array is required');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\r\n    startingIndex += VertexFormat.packedLength;\r\n\r\n    var length = array[startingIndex++];\r\n    var topRadius = array[startingIndex++];\r\n    var bottomRadius = array[startingIndex++];\r\n    var slices = array[startingIndex++];\r\n    var offsetAttribute = array[startingIndex];\r\n\r\n    if (!defined(result)) {\r\n        scratchOptions.length = length;\r\n        scratchOptions.topRadius = topRadius;\r\n        scratchOptions.bottomRadius = bottomRadius;\r\n        scratchOptions.slices = slices;\r\n        scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n        return new CylinderGeometry(scratchOptions);\r\n    }\r\n\r\n    result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n    result._length = length;\r\n    result._topRadius = topRadius;\r\n    result._bottomRadius = bottomRadius;\r\n    result._slices = slices;\r\n    result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of a cylinder, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {CylinderGeometry} cylinderGeometry A description of the cylinder.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nCylinderGeometry.createGeometry = function (cylinderGeometry) {\r\n    var length = cylinderGeometry._length;\r\n    var topRadius = cylinderGeometry._topRadius;\r\n    var bottomRadius = cylinderGeometry._bottomRadius;\r\n    var vertexFormat = cylinderGeometry._vertexFormat;\r\n    var slices = cylinderGeometry._slices;\r\n\r\n    if (length <= 0 || topRadius < 0 || bottomRadius < 0 || (topRadius === 0 && bottomRadius === 0)) {\r\n        return;\r\n    }\r\n\r\n    var twoSlices = slices + slices;\r\n    var threeSlices = slices + twoSlices;\r\n    var numVertices = twoSlices + twoSlices;\r\n\r\n    var positions = CylinderGeometryLibrary.computePositions(length, topRadius, bottomRadius, slices, true);\r\n\r\n    var st = vertexFormat.st ? new Float32Array(numVertices * 2) : undefined;\r\n    var normals = vertexFormat.normal ? new Float32Array(numVertices * 3) : undefined;\r\n    var tangents = vertexFormat.tangent ? new Float32Array(numVertices * 3) : undefined;\r\n    var bitangents = vertexFormat.bitangent ? new Float32Array(numVertices * 3) : undefined;\r\n\r\n    var i;\r\n    var computeNormal = vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent;\r\n\r\n    if (computeNormal) {\r\n        var computeTangent = vertexFormat.tangent || vertexFormat.bitangent;\r\n\r\n        var normalIndex = 0;\r\n        var tangentIndex = 0;\r\n        var bitangentIndex = 0;\r\n\r\n        var theta = Math.atan2(bottomRadius - topRadius, length);\r\n        var normal = normalScratch;\r\n        normal.z = Math.sin(theta);\r\n        var normalScale = Math.cos(theta);\r\n        var tangent = tangentScratch;\r\n        var bitangent = bitangentScratch;\r\n\r\n        for (i = 0; i < slices; i++) {\r\n            var angle = (i / slices) * CesiumMath.TWO_PI;\r\n            var x = normalScale * Math.cos(angle);\r\n            var y = normalScale * Math.sin(angle);\r\n            if (computeNormal) {\r\n                normal.x = x;\r\n                normal.y = y;\r\n\r\n                if (computeTangent) {\r\n                    tangent = Cartesian3.normalize(Cartesian3.cross(Cartesian3.UNIT_Z, normal, tangent), tangent);\r\n                }\r\n\r\n                if (vertexFormat.normal) {\r\n                    normals[normalIndex++] = normal.x;\r\n                    normals[normalIndex++] = normal.y;\r\n                    normals[normalIndex++] = normal.z;\r\n                    normals[normalIndex++] = normal.x;\r\n                    normals[normalIndex++] = normal.y;\r\n                    normals[normalIndex++] = normal.z;\r\n                }\r\n\r\n                if (vertexFormat.tangent) {\r\n                    tangents[tangentIndex++] = tangent.x;\r\n                    tangents[tangentIndex++] = tangent.y;\r\n                    tangents[tangentIndex++] = tangent.z;\r\n                    tangents[tangentIndex++] = tangent.x;\r\n                    tangents[tangentIndex++] = tangent.y;\r\n                    tangents[tangentIndex++] = tangent.z;\r\n                }\r\n\r\n                if (vertexFormat.bitangent) {\r\n                    bitangent = Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\r\n                    bitangents[bitangentIndex++] = bitangent.x;\r\n                    bitangents[bitangentIndex++] = bitangent.y;\r\n                    bitangents[bitangentIndex++] = bitangent.z;\r\n                    bitangents[bitangentIndex++] = bitangent.x;\r\n                    bitangents[bitangentIndex++] = bitangent.y;\r\n                    bitangents[bitangentIndex++] = bitangent.z;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (i = 0; i < slices; i++) {\r\n            if (vertexFormat.normal) {\r\n                normals[normalIndex++] = 0;\r\n                normals[normalIndex++] = 0;\r\n                normals[normalIndex++] = -1;\r\n            }\r\n            if (vertexFormat.tangent) {\r\n                tangents[tangentIndex++] = 1;\r\n                tangents[tangentIndex++] = 0;\r\n                tangents[tangentIndex++] = 0;\r\n            }\r\n            if (vertexFormat.bitangent) {\r\n                bitangents[bitangentIndex++] = 0;\r\n                bitangents[bitangentIndex++] = -1;\r\n                bitangents[bitangentIndex++] = 0;\r\n            }\r\n        }\r\n\r\n        for (i = 0; i < slices; i++) {\r\n            if (vertexFormat.normal) {\r\n                normals[normalIndex++] = 0;\r\n                normals[normalIndex++] = 0;\r\n                normals[normalIndex++] = 1;\r\n            }\r\n            if (vertexFormat.tangent) {\r\n                tangents[tangentIndex++] = 1;\r\n                tangents[tangentIndex++] = 0;\r\n                tangents[tangentIndex++] = 0;\r\n            }\r\n            if (vertexFormat.bitangent) {\r\n                bitangents[bitangentIndex++] = 0;\r\n                bitangents[bitangentIndex++] = 1;\r\n                bitangents[bitangentIndex++] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    var numIndices = 12 * slices - 12;\r\n    var indices = IndexDatatype.createTypedArray(numVertices, numIndices);\r\n    var index = 0;\r\n    var j = 0;\r\n    for (i = 0; i < slices - 1; i++) {\r\n        indices[index++] = j;\r\n        indices[index++] = j + 2;\r\n        indices[index++] = j + 3;\r\n\r\n        indices[index++] = j;\r\n        indices[index++] = j + 3;\r\n        indices[index++] = j + 1;\r\n\r\n        j += 2;\r\n    }\r\n\r\n    indices[index++] = twoSlices - 2;\r\n    indices[index++] = 0;\r\n    indices[index++] = 1;\r\n    indices[index++] = twoSlices - 2;\r\n    indices[index++] = 1;\r\n    indices[index++] = twoSlices - 1;\r\n\r\n    for (i = 1; i < slices - 1; i++) {\r\n        indices[index++] = twoSlices + i + 1;\r\n        indices[index++] = twoSlices + i;\r\n        indices[index++] = twoSlices;\r\n    }\r\n\r\n    for (i = 1; i < slices - 1; i++) {\r\n        indices[index++] = threeSlices;\r\n        indices[index++] = threeSlices + i;\r\n        indices[index++] = threeSlices + i + 1;\r\n    }\r\n\r\n    var textureCoordIndex = 0;\r\n    if (vertexFormat.st) {\r\n        var rad = Math.max(topRadius, bottomRadius);\r\n        for (i = 0; i < numVertices; i++) {\r\n            var position = Cartesian3.fromArray(positions, i * 3, positionScratch);\r\n            st[textureCoordIndex++] = (position.x + rad) / (2.0 * rad);\r\n            st[textureCoordIndex++] = (position.y + rad) / (2.0 * rad);\r\n        }\r\n    }\r\n\r\n    var attributes = new GeometryAttributes();\r\n    if (vertexFormat.position) {\r\n        attributes.position = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute: 3,\r\n            values: positions\r\n        });\r\n    }\r\n\r\n    if (vertexFormat.normal) {\r\n        attributes.normal = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 3,\r\n            values: normals\r\n        });\r\n    }\r\n\r\n    if (vertexFormat.tangent) {\r\n        attributes.tangent = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 3,\r\n            values: tangents\r\n        });\r\n    }\r\n\r\n    if (vertexFormat.bitangent) {\r\n        attributes.bitangent = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 3,\r\n            values: bitangents\r\n        });\r\n    }\r\n\r\n    if (vertexFormat.st) {\r\n        attributes.st = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 2,\r\n            values: st\r\n        });\r\n    }\r\n\r\n    radiusScratch.x = length * 0.5;\r\n    radiusScratch.y = Math.max(bottomRadius, topRadius);\r\n\r\n    var boundingSphere = new BoundingSphere(Cartesian3.ZERO, Cartesian2.magnitude(radiusScratch));\r\n\r\n    if (defined(cylinderGeometry._offsetAttribute)) {\r\n        length = positions.length;\r\n        var applyOffset = new Uint8Array(length / 3);\r\n        var offsetValue = cylinderGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n        arrayFill(applyOffset, offsetValue);\r\n        attributes.applyOffset = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n            componentsPerAttribute: 1,\r\n            values: applyOffset\r\n        });\r\n    }\r\n\r\n    return new Geometry({\r\n        attributes: attributes,\r\n        indices: indices,\r\n        primitiveType: PrimitiveType.TRIANGLES,\r\n        boundingSphere: boundingSphere,\r\n        offsetAttribute: cylinderGeometry._offsetAttribute\r\n    });\r\n};\r\n\r\nvar unitCylinderGeometry;\r\n\r\n/**\r\n * Returns the geometric representation of a unit cylinder, including its vertices, indices, and a bounding sphere.\r\n * @returns {Geometry} The computed vertices and indices.\r\n *\r\n * @private\r\n */\r\nCylinderGeometry.getUnitCylinder = function () {\r\n    if (!defined(unitCylinderGeometry)) {\r\n        unitCylinderGeometry = CylinderGeometry.createGeometry(\r\n            new CylinderGeometry({\r\n                topRadius: 1.0,\r\n                bottomRadius: 1.0,\r\n                length: 1.0,\r\n                vertexFormat: VertexFormat.POSITION_ONLY\r\n            })\r\n        );\r\n    }\r\n    return unitCylinderGeometry;\r\n};\r\nexport default CylinderGeometry;\r\n"],"names":["Cartesian2","Cartesian3","defaultValue","VertexFormat","defined","DeveloperError","GeometryOffsetAttribute","CylinderGeometryLibrary","CesiumMath","IndexDatatype","GeometryAttributes","GeometryAttribute","ComponentDatatype","BoundingSphere","arrayFill","Geometry","PrimitiveType"],"mappings":"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"}