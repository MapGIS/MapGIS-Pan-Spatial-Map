{"version":3,"file":"createSimplePolylineGeometry.js","sources":["../../../../Source/Core/SimplePolylineGeometry.js","../../../../Source/WorkersES6/createSimplePolylineGeometry.js"],"sourcesContent":["import ArcType from './ArcType.js';\r\nimport BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Color from './Color.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport CesiumMath from './Math.js';\r\nimport PolylinePipeline from './PolylinePipeline.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\n\r\nfunction interpolateColors(p0, p1, color0, color1, minDistance, array, offset) {\r\n    var numPoints = PolylinePipeline.numberOfPoints(p0, p1, minDistance);\r\n    var i;\r\n\r\n    var r0 = color0.red;\r\n    var g0 = color0.green;\r\n    var b0 = color0.blue;\r\n    var a0 = color0.alpha;\r\n\r\n    var r1 = color1.red;\r\n    var g1 = color1.green;\r\n    var b1 = color1.blue;\r\n    var a1 = color1.alpha;\r\n\r\n    if (Color.equals(color0, color1)) {\r\n        for (i = 0; i < numPoints; i++) {\r\n            array[offset++] = Color.floatToByte(r0);\r\n            array[offset++] = Color.floatToByte(g0);\r\n            array[offset++] = Color.floatToByte(b0);\r\n            array[offset++] = Color.floatToByte(a0);\r\n        }\r\n        return offset;\r\n    }\r\n\r\n    var redPerVertex = (r1 - r0) / numPoints;\r\n    var greenPerVertex = (g1 - g0) / numPoints;\r\n    var bluePerVertex = (b1 - b0) / numPoints;\r\n    var alphaPerVertex = (a1 - a0) / numPoints;\r\n\r\n    var index = offset;\r\n    for (i = 0; i < numPoints; i++) {\r\n        array[index++] = Color.floatToByte(r0 + i * redPerVertex);\r\n        array[index++] = Color.floatToByte(g0 + i * greenPerVertex);\r\n        array[index++] = Color.floatToByte(b0 + i * bluePerVertex);\r\n        array[index++] = Color.floatToByte(a0 + i * alphaPerVertex);\r\n    }\r\n\r\n    return index;\r\n}\r\n\r\n/**\r\n * A description of a polyline modeled as a line strip; the first two positions define a line segment,\r\n * and each additional position defines a line segment from the previous position.\r\n *\r\n * @alias SimplePolylineGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.positions An array of {@link Cartesian3} defining the positions in the polyline as a line strip.\r\n * @param {Color[]} [options.colors] An Array of {@link Color} defining the per vertex or per segment colors.\r\n * @param {Boolean} [options.colorsPerVertex=false] A boolean that determines whether the colors will be flat across each segment of the line or interpolated across the vertices.\r\n * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polyline segments must follow.\r\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude if options.arcType is not ArcType.NONE. Determines the number of positions in the buffer.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n *\r\n * @exception {DeveloperError} At least two positions are required.\r\n * @exception {DeveloperError} colors has an invalid length.\r\n *\r\n * @see SimplePolylineGeometry#createGeometry\r\n *\r\n * @example\r\n * // A polyline with two connected line segments\r\n * var polyline = new Cesium.SimplePolylineGeometry({\r\n *   positions : Cesium.Cartesian3.fromDegreesArray([\r\n *     0.0, 0.0,\r\n *     5.0, 0.0,\r\n *     5.0, 5.0\r\n *   ])\r\n * });\r\n * var geometry = Cesium.SimplePolylineGeometry.createGeometry(polyline);\r\n */\r\nfunction SimplePolylineGeometry(options) {\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n    var positions = options.positions;\r\n    var colors = options.colors;\r\n    var colorsPerVertex = defaultValue(options.colorsPerVertex, false);\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(positions) || positions.length < 2) {\r\n        throw new DeveloperError('At least two positions are required.');\r\n    }\r\n    if (defined(colors) && ((colorsPerVertex && colors.length < positions.length) || (!colorsPerVertex && colors.length < positions.length - 1))) {\r\n        throw new DeveloperError('colors has an invalid length.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    this._positions = positions;\r\n    this._colors = colors;\r\n    this._colorsPerVertex = colorsPerVertex;\r\n\r\n    this._arcType = defaultValue(options.arcType, ArcType.GEODESIC);\r\n    this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n    this._ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n    this._workerName = 'createSimplePolylineGeometry';\r\n\r\n    var numComponents = 1 + positions.length * Cartesian3.packedLength;\r\n    numComponents += defined(colors) ? 1 + colors.length * Color.packedLength : 1;\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    this.packedLength = numComponents + Ellipsoid.packedLength + 3;\r\n}\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {SimplePolylineGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nSimplePolylineGeometry.pack = function (value, array, startingIndex) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(value)) {\r\n        throw new DeveloperError('value is required');\r\n    }\r\n    if (!defined(array)) {\r\n        throw new DeveloperError('array is required');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    var i;\r\n\r\n    var positions = value._positions;\r\n    var length = positions.length;\r\n    array[startingIndex++] = length;\r\n\r\n    for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n        Cartesian3.pack(positions[i], array, startingIndex);\r\n    }\r\n\r\n    var colors = value._colors;\r\n    length = defined(colors) ? colors.length : 0.0;\r\n    array[startingIndex++] = length;\r\n\r\n    for (i = 0; i < length; ++i, startingIndex += Color.packedLength) {\r\n        Color.pack(colors[i], array, startingIndex);\r\n    }\r\n\r\n    Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n    startingIndex += Ellipsoid.packedLength;\r\n\r\n    array[startingIndex++] = value._colorsPerVertex ? 1.0 : 0.0;\r\n    array[startingIndex++] = value._arcType;\r\n    array[startingIndex] = value._granularity;\r\n\r\n    return array;\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {SimplePolylineGeometry} [result] The object into which to store the result.\r\n * @returns {SimplePolylineGeometry} The modified result parameter or a new SimplePolylineGeometry instance if one was not provided.\r\n */\r\nSimplePolylineGeometry.unpack = function (array, startingIndex, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(array)) {\r\n        throw new DeveloperError('array is required');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    var i;\r\n\r\n    var length = array[startingIndex++];\r\n    var positions = new Array(length);\r\n\r\n    for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n        positions[i] = Cartesian3.unpack(array, startingIndex);\r\n    }\r\n\r\n    length = array[startingIndex++];\r\n    var colors = length > 0 ? new Array(length) : undefined;\r\n\r\n    for (i = 0; i < length; ++i, startingIndex += Color.packedLength) {\r\n        colors[i] = Color.unpack(array, startingIndex);\r\n    }\r\n\r\n    var ellipsoid = Ellipsoid.unpack(array, startingIndex);\r\n    startingIndex += Ellipsoid.packedLength;\r\n\r\n    var colorsPerVertex = array[startingIndex++] === 1.0;\r\n    var arcType = array[startingIndex++];\r\n    var granularity = array[startingIndex];\r\n\r\n    if (!defined(result)) {\r\n        return new SimplePolylineGeometry({\r\n            positions: positions,\r\n            colors: colors,\r\n            ellipsoid: ellipsoid,\r\n            colorsPerVertex: colorsPerVertex,\r\n            arcType: arcType,\r\n            granularity: granularity\r\n        });\r\n    }\r\n\r\n    result._positions = positions;\r\n    result._colors = colors;\r\n    result._ellipsoid = ellipsoid;\r\n    result._colorsPerVertex = colorsPerVertex;\r\n    result._arcType = arcType;\r\n    result._granularity = granularity;\r\n\r\n    return result;\r\n};\r\n\r\nvar scratchArray1 = new Array(2);\r\nvar scratchArray2 = new Array(2);\r\nvar generateArcOptionsScratch = {\r\n    positions: scratchArray1,\r\n    height: scratchArray2,\r\n    ellipsoid: undefined,\r\n    minDistance: undefined,\r\n    granularity: undefined\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of a simple polyline, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {SimplePolylineGeometry} simplePolylineGeometry A description of the polyline.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nSimplePolylineGeometry.createGeometry = function (simplePolylineGeometry) {\r\n    var positions = simplePolylineGeometry._positions;\r\n    var colors = simplePolylineGeometry._colors;\r\n    var colorsPerVertex = simplePolylineGeometry._colorsPerVertex;\r\n    var arcType = simplePolylineGeometry._arcType;\r\n    var granularity = simplePolylineGeometry._granularity;\r\n    var ellipsoid = simplePolylineGeometry._ellipsoid;\r\n\r\n    var minDistance = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\r\n    var perSegmentColors = defined(colors) && !colorsPerVertex;\r\n\r\n    var i;\r\n    var length = positions.length;\r\n\r\n    var positionValues;\r\n    var numberOfPositions;\r\n    var colorValues;\r\n    var color;\r\n    var offset = 0;\r\n\r\n    if (arcType === ArcType.GEODESIC || arcType === ArcType.RHUMB) {\r\n        var subdivisionSize;\r\n        var numberOfPointsFunction;\r\n        var generateArcFunction;\r\n        if (arcType === ArcType.GEODESIC) {\r\n            subdivisionSize = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\r\n            numberOfPointsFunction = PolylinePipeline.numberOfPoints;\r\n            generateArcFunction = PolylinePipeline.generateArc;\r\n        } else {\r\n            subdivisionSize = granularity;\r\n            numberOfPointsFunction = PolylinePipeline.numberOfPointsRhumbLine;\r\n            generateArcFunction = PolylinePipeline.generateRhumbArc;\r\n        }\r\n\r\n        var heights = PolylinePipeline.extractHeights(positions, ellipsoid);\r\n\r\n        var generateArcOptions = generateArcOptionsScratch;\r\n        if (arcType === ArcType.GEODESIC) {\r\n            generateArcOptions.minDistance = minDistance;\r\n        } else {\r\n            generateArcOptions.granularity = granularity;\r\n        }\r\n        generateArcOptions.ellipsoid = ellipsoid;\r\n\r\n        if (perSegmentColors) {\r\n            var positionCount = 0;\r\n            for (i = 0; i < length - 1; i++) {\r\n                positionCount += numberOfPointsFunction(positions[i], positions[i + 1], subdivisionSize) + 1;\r\n            }\r\n\r\n            positionValues = new Float64Array(positionCount * 3);\r\n            colorValues = new Uint8Array(positionCount * 4);\r\n\r\n            generateArcOptions.positions = scratchArray1;\r\n            generateArcOptions.height = scratchArray2;\r\n\r\n            var ci = 0;\r\n            for (i = 0; i < length - 1; ++i) {\r\n                scratchArray1[0] = positions[i];\r\n                scratchArray1[1] = positions[i + 1];\r\n\r\n                scratchArray2[0] = heights[i];\r\n                scratchArray2[1] = heights[i + 1];\r\n\r\n                var pos = generateArcFunction(generateArcOptions);\r\n\r\n                if (defined(colors)) {\r\n                    var segLen = pos.length / 3;\r\n                    color = colors[i];\r\n                    for (var k = 0; k < segLen; ++k) {\r\n                        colorValues[ci++] = Color.floatToByte(color.red);\r\n                        colorValues[ci++] = Color.floatToByte(color.green);\r\n                        colorValues[ci++] = Color.floatToByte(color.blue);\r\n                        colorValues[ci++] = Color.floatToByte(color.alpha);\r\n                    }\r\n                }\r\n\r\n                positionValues.set(pos, offset);\r\n                offset += pos.length;\r\n            }\r\n        } else {\r\n            generateArcOptions.positions = positions;\r\n            generateArcOptions.height = heights;\r\n            positionValues = new Float64Array(generateArcFunction(generateArcOptions));\r\n\r\n            if (defined(colors)) {\r\n                colorValues = new Uint8Array((positionValues.length / 3) * 4);\r\n\r\n                for (i = 0; i < length - 1; ++i) {\r\n                    var p0 = positions[i];\r\n                    var p1 = positions[i + 1];\r\n                    var c0 = colors[i];\r\n                    var c1 = colors[i + 1];\r\n                    offset = interpolateColors(p0, p1, c0, c1, minDistance, colorValues, offset);\r\n                }\r\n\r\n                var lastColor = colors[length - 1];\r\n                colorValues[offset++] = Color.floatToByte(lastColor.red);\r\n                colorValues[offset++] = Color.floatToByte(lastColor.green);\r\n                colorValues[offset++] = Color.floatToByte(lastColor.blue);\r\n                colorValues[offset++] = Color.floatToByte(lastColor.alpha);\r\n            }\r\n        }\r\n    } else {\r\n        numberOfPositions = perSegmentColors ? length * 2 - 2 : length;\r\n        positionValues = new Float64Array(numberOfPositions * 3);\r\n        colorValues = defined(colors) ? new Uint8Array(numberOfPositions * 4) : undefined;\r\n\r\n        var positionIndex = 0;\r\n        var colorIndex = 0;\r\n\r\n        for (i = 0; i < length; ++i) {\r\n            var p = positions[i];\r\n\r\n            if (perSegmentColors && i > 0) {\r\n                Cartesian3.pack(p, positionValues, positionIndex);\r\n                positionIndex += 3;\r\n\r\n                color = colors[i - 1];\r\n                colorValues[colorIndex++] = Color.floatToByte(color.red);\r\n                colorValues[colorIndex++] = Color.floatToByte(color.green);\r\n                colorValues[colorIndex++] = Color.floatToByte(color.blue);\r\n                colorValues[colorIndex++] = Color.floatToByte(color.alpha);\r\n            }\r\n\r\n            if (perSegmentColors && i === length - 1) {\r\n                break;\r\n            }\r\n\r\n            Cartesian3.pack(p, positionValues, positionIndex);\r\n            positionIndex += 3;\r\n\r\n            if (defined(colors)) {\r\n                color = colors[i];\r\n                colorValues[colorIndex++] = Color.floatToByte(color.red);\r\n                colorValues[colorIndex++] = Color.floatToByte(color.green);\r\n                colorValues[colorIndex++] = Color.floatToByte(color.blue);\r\n                colorValues[colorIndex++] = Color.floatToByte(color.alpha);\r\n            }\r\n        }\r\n    }\r\n\r\n    var attributes = new GeometryAttributes();\r\n    attributes.position = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.DOUBLE,\r\n        componentsPerAttribute: 3,\r\n        values: positionValues\r\n    });\r\n\r\n    if (defined(colors)) {\r\n        attributes.color = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n            componentsPerAttribute: 4,\r\n            values: colorValues,\r\n            normalize: true\r\n        });\r\n    }\r\n\r\n    numberOfPositions = positionValues.length / 3;\r\n    var numberOfIndices = (numberOfPositions - 1) * 2;\r\n    var indices = IndexDatatype.createTypedArray(numberOfPositions, numberOfIndices);\r\n\r\n    var index = 0;\r\n    for (i = 0; i < numberOfPositions - 1; ++i) {\r\n        indices[index++] = i;\r\n        indices[index++] = i + 1;\r\n    }\r\n\r\n    return new Geometry({\r\n        attributes: attributes,\r\n        indices: indices,\r\n        primitiveType: PrimitiveType.LINES,\r\n        boundingSphere: BoundingSphere.fromPoints(positions)\r\n    });\r\n};\r\nexport default SimplePolylineGeometry;\r\n","import defined from '../Core/defined.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\nimport SimplePolylineGeometry from '../Core/SimplePolylineGeometry.js';\r\n\r\nfunction createSimplePolylineGeometry(simplePolylineGeometry, offset) {\r\n    if (defined(offset)) {\r\n        simplePolylineGeometry = SimplePolylineGeometry.unpack(simplePolylineGeometry, offset);\r\n    }\r\n    simplePolylineGeometry._ellipsoid = Ellipsoid.clone(simplePolylineGeometry._ellipsoid);\r\n    return SimplePolylineGeometry.createGeometry(simplePolylineGeometry);\r\n}\r\nexport default createSimplePolylineGeometry;\r\n"],"names":["PolylinePipeline","Color","defaultValue","defined","DeveloperError","ArcType","CesiumMath","Ellipsoid","Cartesian3","GeometryAttributes","GeometryAttribute","ComponentDatatype","IndexDatatype","Geometry","PrimitiveType","BoundingSphere"],"mappings":"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"}