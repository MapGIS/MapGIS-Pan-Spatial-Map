{"version":3,"file":"Check-f996273c.js","sources":["../../../../Source/Core/DeveloperError.js","../../../../Source/Core/Check.js"],"sourcesContent":["import defined from './defined.js';\r\n\r\n/**\r\n * Constructs an exception object that is thrown due to a developer error, e.g., invalid argument,\r\n * argument out of range, etc.  This exception should only be thrown during development;\r\n * it usually indicates a bug in the calling code.  This exception should never be\r\n * caught; instead the calling code should strive not to generate it.\r\n * <br /><br />\r\n * On the other hand, a {@link RuntimeError} indicates an exception that may\r\n * be thrown at runtime, e.g., out of memory, that the calling code should be prepared\r\n * to catch.\r\n *\r\n * @alias DeveloperError\r\n * @constructor\r\n * @extends Error\r\n *\r\n * @param {String} [message] The error message for this exception.\r\n *\r\n * @see RuntimeError\r\n */\r\nfunction DeveloperError(message) {\r\n    /**\r\n     * 'DeveloperError' indicating that this exception was thrown due to a developer error.\r\n     * @type {String}\r\n     * @readonly\r\n     */\r\n    this.name = 'DeveloperError';\r\n\r\n    /**\r\n     * The explanation for why this exception was thrown.\r\n     * @type {String}\r\n     * @readonly\r\n     */\r\n    this.message = message;\r\n\r\n    //Browsers such as IE don't have a stack property until you actually throw the error.\r\n    var stack;\r\n    try {\r\n        throw new Error();\r\n    } catch (e) {\r\n        stack = e.stack;\r\n    }\r\n\r\n    /**\r\n     * The stack trace of this exception, if available.\r\n     * @type {String}\r\n     * @readonly\r\n     */\r\n    this.stack = stack;\r\n}\r\n\r\nif (defined(Object.create)) {\r\n    DeveloperError.prototype = Object.create(Error.prototype);\r\n    DeveloperError.prototype.constructor = DeveloperError;\r\n}\r\n\r\nDeveloperError.prototype.toString = function () {\r\n    var str = this.name + ': ' + this.message;\r\n\r\n    if (defined(this.stack)) {\r\n        str += '\\n' + this.stack.toString();\r\n    }\r\n\r\n    return str;\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nDeveloperError.throwInstantiationError = function () {\r\n    throw new DeveloperError('This function defines an interface and should not be called directly.');\r\n};\r\nexport default DeveloperError;\r\n","import defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\n\r\n/**\r\n * Contains functions for checking that supplied arguments are of a specified type\r\n * or meet specified conditions\r\n * @private\r\n */\r\nvar Check = {};\r\n\r\n/**\r\n * Contains type checking functions, all using the typeof operator\r\n */\r\nCheck.typeOf = {};\r\n\r\nfunction getUndefinedErrorMessage(name) {\r\n    return name + ' is required, actual value was undefined';\r\n}\r\n\r\nfunction getFailedTypeErrorMessage(actual, expected, name) {\r\n    return 'Expected ' + name + ' to be typeof ' + expected + ', actual typeof was ' + actual;\r\n}\r\n\r\n/**\r\n * Throws if test is not defined\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value that is to be checked\r\n * @exception {DeveloperError} test must be defined\r\n */\r\nCheck.defined = function (name, test) {\r\n    if (!defined(test)) {\r\n        throw new DeveloperError(getUndefinedErrorMessage(name));\r\n    }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'function'\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @exception {DeveloperError} test must be typeof 'function'\r\n */\r\nCheck.typeOf.func = function (name, test) {\r\n    if (typeof test !== 'function') {\r\n        throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'function', name));\r\n    }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'string'\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @exception {DeveloperError} test must be typeof 'string'\r\n */\r\nCheck.typeOf.string = function (name, test) {\r\n    if (typeof test !== 'string') {\r\n        throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'string', name));\r\n    }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'number'\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @exception {DeveloperError} test must be typeof 'number'\r\n */\r\nCheck.typeOf.number = function (name, test) {\r\n    if (typeof test !== 'number') {\r\n        throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'number', name));\r\n    }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'number' and less than limit\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @param {Number} limit The limit value to compare against\r\n * @exception {DeveloperError} test must be typeof 'number' and less than limit\r\n */\r\nCheck.typeOf.number.lessThan = function (name, test, limit) {\r\n    Check.typeOf.number(name, test);\r\n    if (test >= limit) {\r\n        throw new DeveloperError('Expected ' + name + ' to be less than ' + limit + ', actual value was ' + test);\r\n    }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'number' and less than or equal to limit\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @param {Number} limit The limit value to compare against\r\n * @exception {DeveloperError} test must be typeof 'number' and less than or equal to limit\r\n */\r\nCheck.typeOf.number.lessThanOrEquals = function (name, test, limit) {\r\n    Check.typeOf.number(name, test);\r\n    if (test > limit) {\r\n        throw new DeveloperError('Expected ' + name + ' to be less than or equal to ' + limit + ', actual value was ' + test);\r\n    }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'number' and greater than limit\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @param {Number} limit The limit value to compare against\r\n * @exception {DeveloperError} test must be typeof 'number' and greater than limit\r\n */\r\nCheck.typeOf.number.greaterThan = function (name, test, limit) {\r\n    Check.typeOf.number(name, test);\r\n    if (test <= limit) {\r\n        throw new DeveloperError('Expected ' + name + ' to be greater than ' + limit + ', actual value was ' + test);\r\n    }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'number' and greater than or equal to limit\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @param {Number} limit The limit value to compare against\r\n * @exception {DeveloperError} test must be typeof 'number' and greater than or equal to limit\r\n */\r\nCheck.typeOf.number.greaterThanOrEquals = function (name, test, limit) {\r\n    Check.typeOf.number(name, test);\r\n    if (test < limit) {\r\n        throw new DeveloperError('Expected ' + name + ' to be greater than or equal to ' + limit + ', actual value was ' + test);\r\n    }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'object'\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @exception {DeveloperError} test must be typeof 'object'\r\n */\r\nCheck.typeOf.object = function (name, test) {\r\n    if (typeof test !== 'object') {\r\n        throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'object', name));\r\n    }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'boolean'\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @exception {DeveloperError} test must be typeof 'boolean'\r\n */\r\nCheck.typeOf.bool = function (name, test) {\r\n    if (typeof test !== 'boolean') {\r\n        throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'boolean', name));\r\n    }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'bigint'\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @exception {DeveloperError} test must be typeof 'bigint'\r\n */\r\nCheck.typeOf.bigint = function (name, test) {\r\n    if (typeof test !== 'bigint') {\r\n        throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'bigint', name));\r\n    }\r\n};\r\n\r\n/**\r\n * Throws if test1 and test2 is not typeof 'number' and not equal in value\r\n *\r\n * @param {String} name1 The name of the first variable being tested\r\n * @param {String} name2 The name of the second variable being tested against\r\n * @param {*} test1 The value to test\r\n * @param {*} test2 The value to test against\r\n * @exception {DeveloperError} test1 and test2 should be type of 'number' and be equal in value\r\n */\r\nCheck.typeOf.number.equals = function (name1, name2, test1, test2) {\r\n    Check.typeOf.number(name1, test1);\r\n    Check.typeOf.number(name2, test2);\r\n    if (test1 !== test2) {\r\n        throw new DeveloperError(name1 + ' must be equal to ' + name2 + ', the actual values are ' + test1 + ' and ' + test2);\r\n    }\r\n};\r\nexport default Check;\r\n"],"names":["defined"],"mappings":"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"}