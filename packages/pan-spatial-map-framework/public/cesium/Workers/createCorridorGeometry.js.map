{"version":3,"file":"createCorridorGeometry.js","sources":["../../../../Source/Core/CorridorGeometry.js","../../../../Source/WorkersES6/createCorridorGeometry.js"],"sourcesContent":["import arrayFill from './arrayFill.js';\r\nimport arrayRemoveDuplicates from './arrayRemoveDuplicates.js';\r\nimport BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Cartographic from './Cartographic.js';\r\nimport Check from './Check.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport CornerType from './CornerType.js';\r\nimport CorridorGeometryLibrary from './CorridorGeometryLibrary.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport CesiumMath from './Math.js';\r\nimport PolygonPipeline from './PolygonPipeline.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\nimport Rectangle from './Rectangle.js';\r\nimport VertexFormat from './VertexFormat.js';\r\n\r\nvar cartesian1 = new Cartesian3();\r\nvar cartesian2 = new Cartesian3();\r\nvar cartesian3 = new Cartesian3();\r\nvar cartesian4 = new Cartesian3();\r\nvar cartesian5 = new Cartesian3();\r\nvar cartesian6 = new Cartesian3();\r\n\r\nvar scratch1 = new Cartesian3();\r\nvar scratch2 = new Cartesian3();\r\n\r\nfunction scaleToSurface(positions, ellipsoid) {\r\n    for (var i = 0; i < positions.length; i++) {\r\n        positions[i] = ellipsoid.scaleToGeodeticSurface(positions[i], positions[i]);\r\n    }\r\n    return positions;\r\n}\r\n\r\nfunction addNormals(attr, normal, left, front, back, vertexFormat) {\r\n    var normals = attr.normals;\r\n    var tangents = attr.tangents;\r\n    var bitangents = attr.bitangents;\r\n    var forward = Cartesian3.normalize(Cartesian3.cross(left, normal, scratch1), scratch1);\r\n    if (vertexFormat.normal) {\r\n        CorridorGeometryLibrary.addAttribute(normals, normal, front, back);\r\n    }\r\n    if (vertexFormat.tangent) {\r\n        CorridorGeometryLibrary.addAttribute(tangents, forward, front, back);\r\n    }\r\n    if (vertexFormat.bitangent) {\r\n        CorridorGeometryLibrary.addAttribute(bitangents, left, front, back);\r\n    }\r\n}\r\n\r\nfunction combine(computedPositions, vertexFormat, ellipsoid) {\r\n    var positions = computedPositions.positions;\r\n    var corners = computedPositions.corners;\r\n    var endPositions = computedPositions.endPositions;\r\n    var computedLefts = computedPositions.lefts;\r\n    var computedNormals = computedPositions.normals;\r\n    var attributes = new GeometryAttributes();\r\n    var corner;\r\n    var leftCount = 0;\r\n    var rightCount = 0;\r\n    var i;\r\n    var indicesLength = 0;\r\n    var length;\r\n    for (i = 0; i < positions.length; i += 2) {\r\n        length = positions[i].length - 3;\r\n        leftCount += length; //subtracting 3 to account for duplicate points at corners\r\n        indicesLength += length * 2;\r\n        rightCount += positions[i + 1].length - 3;\r\n    }\r\n    leftCount += 3; //add back count for end positions\r\n    rightCount += 3;\r\n    for (i = 0; i < corners.length; i++) {\r\n        corner = corners[i];\r\n        var leftSide = corners[i].leftPositions;\r\n        if (defined(leftSide)) {\r\n            length = leftSide.length;\r\n            leftCount += length;\r\n            indicesLength += length;\r\n        } else {\r\n            length = corners[i].rightPositions.length;\r\n            rightCount += length;\r\n            indicesLength += length;\r\n        }\r\n    }\r\n\r\n    var addEndPositions = defined(endPositions);\r\n    var endPositionLength;\r\n    if (addEndPositions) {\r\n        endPositionLength = endPositions[0].length - 3;\r\n        leftCount += endPositionLength;\r\n        rightCount += endPositionLength;\r\n        endPositionLength /= 3;\r\n        indicesLength += endPositionLength * 6;\r\n    }\r\n    var size = leftCount + rightCount;\r\n    var finalPositions = new Float64Array(size);\r\n    var normals = vertexFormat.normal ? new Float32Array(size) : undefined;\r\n    var tangents = vertexFormat.tangent ? new Float32Array(size) : undefined;\r\n    var bitangents = vertexFormat.bitangent ? new Float32Array(size) : undefined;\r\n    var attr = {\r\n        normals: normals,\r\n        tangents: tangents,\r\n        bitangents: bitangents\r\n    };\r\n    var front = 0;\r\n    var back = size - 1;\r\n    var UL, LL, UR, LR;\r\n    var normal = cartesian1;\r\n    var left = cartesian2;\r\n    var rightPos, leftPos;\r\n    var halfLength = endPositionLength / 2;\r\n\r\n    var indices = IndexDatatype.createTypedArray(size / 3, indicesLength);\r\n    var index = 0;\r\n    if (addEndPositions) {\r\n        // add rounded end\r\n        leftPos = cartesian3;\r\n        rightPos = cartesian4;\r\n        var firstEndPositions = endPositions[0];\r\n        normal = Cartesian3.fromArray(computedNormals, 0, normal);\r\n        left = Cartesian3.fromArray(computedLefts, 0, left);\r\n        for (i = 0; i < halfLength; i++) {\r\n            leftPos = Cartesian3.fromArray(firstEndPositions, (halfLength - 1 - i) * 3, leftPos);\r\n            rightPos = Cartesian3.fromArray(firstEndPositions, (halfLength + i) * 3, rightPos);\r\n            CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\r\n            CorridorGeometryLibrary.addAttribute(finalPositions, leftPos, undefined, back);\r\n            addNormals(attr, normal, left, front, back, vertexFormat);\r\n\r\n            LL = front / 3;\r\n            LR = LL + 1;\r\n            UL = (back - 2) / 3;\r\n            UR = UL - 1;\r\n            indices[index++] = UL;\r\n            indices[index++] = LL;\r\n            indices[index++] = UR;\r\n            indices[index++] = UR;\r\n            indices[index++] = LL;\r\n            indices[index++] = LR;\r\n\r\n            front += 3;\r\n            back -= 3;\r\n        }\r\n    }\r\n\r\n    var posIndex = 0;\r\n    var compIndex = 0;\r\n    var rightEdge = positions[posIndex++]; //add first two edges\r\n    var leftEdge = positions[posIndex++];\r\n    finalPositions.set(rightEdge, front);\r\n    finalPositions.set(leftEdge, back - leftEdge.length + 1);\r\n\r\n    left = Cartesian3.fromArray(computedLefts, compIndex, left);\r\n    var rightNormal;\r\n    var leftNormal;\r\n    length = leftEdge.length - 3;\r\n    for (i = 0; i < length; i += 3) {\r\n        rightNormal = ellipsoid.geodeticSurfaceNormal(Cartesian3.fromArray(rightEdge, i, scratch1), scratch1);\r\n        leftNormal = ellipsoid.geodeticSurfaceNormal(Cartesian3.fromArray(leftEdge, length - i, scratch2), scratch2);\r\n        normal = Cartesian3.normalize(Cartesian3.add(rightNormal, leftNormal, normal), normal);\r\n        addNormals(attr, normal, left, front, back, vertexFormat);\r\n\r\n        LL = front / 3;\r\n        LR = LL + 1;\r\n        UL = (back - 2) / 3;\r\n        UR = UL - 1;\r\n        indices[index++] = UL;\r\n        indices[index++] = LL;\r\n        indices[index++] = UR;\r\n        indices[index++] = UR;\r\n        indices[index++] = LL;\r\n        indices[index++] = LR;\r\n\r\n        front += 3;\r\n        back -= 3;\r\n    }\r\n\r\n    rightNormal = ellipsoid.geodeticSurfaceNormal(Cartesian3.fromArray(rightEdge, length, scratch1), scratch1);\r\n    leftNormal = ellipsoid.geodeticSurfaceNormal(Cartesian3.fromArray(leftEdge, length, scratch2), scratch2);\r\n    normal = Cartesian3.normalize(Cartesian3.add(rightNormal, leftNormal, normal), normal);\r\n    compIndex += 3;\r\n    for (i = 0; i < corners.length; i++) {\r\n        var j;\r\n        corner = corners[i];\r\n        var l = corner.leftPositions;\r\n        var r = corner.rightPositions;\r\n        var pivot;\r\n        var start;\r\n        var outsidePoint = cartesian6;\r\n        var previousPoint = cartesian3;\r\n        var nextPoint = cartesian4;\r\n        normal = Cartesian3.fromArray(computedNormals, compIndex, normal);\r\n        if (defined(l)) {\r\n            addNormals(attr, normal, left, undefined, back, vertexFormat);\r\n            back -= 3;\r\n            pivot = LR;\r\n            start = UR;\r\n            for (j = 0; j < l.length / 3; j++) {\r\n                outsidePoint = Cartesian3.fromArray(l, j * 3, outsidePoint);\r\n                indices[index++] = pivot;\r\n                indices[index++] = start - j - 1;\r\n                indices[index++] = start - j;\r\n                CorridorGeometryLibrary.addAttribute(finalPositions, outsidePoint, undefined, back);\r\n                previousPoint = Cartesian3.fromArray(finalPositions, (start - j - 1) * 3, previousPoint);\r\n                nextPoint = Cartesian3.fromArray(finalPositions, pivot * 3, nextPoint);\r\n                left = Cartesian3.normalize(Cartesian3.subtract(previousPoint, nextPoint, left), left);\r\n                addNormals(attr, normal, left, undefined, back, vertexFormat);\r\n                back -= 3;\r\n            }\r\n            outsidePoint = Cartesian3.fromArray(finalPositions, pivot * 3, outsidePoint);\r\n            previousPoint = Cartesian3.subtract(Cartesian3.fromArray(finalPositions, start * 3, previousPoint), outsidePoint, previousPoint);\r\n            nextPoint = Cartesian3.subtract(Cartesian3.fromArray(finalPositions, (start - j) * 3, nextPoint), outsidePoint, nextPoint);\r\n            left = Cartesian3.normalize(Cartesian3.add(previousPoint, nextPoint, left), left);\r\n            addNormals(attr, normal, left, front, undefined, vertexFormat);\r\n            front += 3;\r\n        } else {\r\n            addNormals(attr, normal, left, front, undefined, vertexFormat);\r\n            front += 3;\r\n            pivot = UR;\r\n            start = LR;\r\n            for (j = 0; j < r.length / 3; j++) {\r\n                outsidePoint = Cartesian3.fromArray(r, j * 3, outsidePoint);\r\n                indices[index++] = pivot;\r\n                indices[index++] = start + j;\r\n                indices[index++] = start + j + 1;\r\n                CorridorGeometryLibrary.addAttribute(finalPositions, outsidePoint, front);\r\n                previousPoint = Cartesian3.fromArray(finalPositions, pivot * 3, previousPoint);\r\n                nextPoint = Cartesian3.fromArray(finalPositions, (start + j) * 3, nextPoint);\r\n                left = Cartesian3.normalize(Cartesian3.subtract(previousPoint, nextPoint, left), left);\r\n                addNormals(attr, normal, left, front, undefined, vertexFormat);\r\n                front += 3;\r\n            }\r\n            outsidePoint = Cartesian3.fromArray(finalPositions, pivot * 3, outsidePoint);\r\n            previousPoint = Cartesian3.subtract(Cartesian3.fromArray(finalPositions, (start + j) * 3, previousPoint), outsidePoint, previousPoint);\r\n            nextPoint = Cartesian3.subtract(Cartesian3.fromArray(finalPositions, start * 3, nextPoint), outsidePoint, nextPoint);\r\n            left = Cartesian3.normalize(Cartesian3.negate(Cartesian3.add(nextPoint, previousPoint, left), left), left);\r\n            addNormals(attr, normal, left, undefined, back, vertexFormat);\r\n            back -= 3;\r\n        }\r\n        rightEdge = positions[posIndex++];\r\n        leftEdge = positions[posIndex++];\r\n        rightEdge.splice(0, 3); //remove duplicate points added by corner\r\n        leftEdge.splice(leftEdge.length - 3, 3);\r\n        finalPositions.set(rightEdge, front);\r\n        finalPositions.set(leftEdge, back - leftEdge.length + 1);\r\n        length = leftEdge.length - 3;\r\n\r\n        compIndex += 3;\r\n        left = Cartesian3.fromArray(computedLefts, compIndex, left);\r\n        for (j = 0; j < leftEdge.length; j += 3) {\r\n            rightNormal = ellipsoid.geodeticSurfaceNormal(Cartesian3.fromArray(rightEdge, j, scratch1), scratch1);\r\n            leftNormal = ellipsoid.geodeticSurfaceNormal(Cartesian3.fromArray(leftEdge, length - j, scratch2), scratch2);\r\n            normal = Cartesian3.normalize(Cartesian3.add(rightNormal, leftNormal, normal), normal);\r\n            addNormals(attr, normal, left, front, back, vertexFormat);\r\n\r\n            LR = front / 3;\r\n            LL = LR - 1;\r\n            UR = (back - 2) / 3;\r\n            UL = UR + 1;\r\n            indices[index++] = UL;\r\n            indices[index++] = LL;\r\n            indices[index++] = UR;\r\n            indices[index++] = UR;\r\n            indices[index++] = LL;\r\n            indices[index++] = LR;\r\n\r\n            front += 3;\r\n            back -= 3;\r\n        }\r\n        front -= 3;\r\n        back += 3;\r\n    }\r\n    normal = Cartesian3.fromArray(computedNormals, computedNormals.length - 3, normal);\r\n    addNormals(attr, normal, left, front, back, vertexFormat);\r\n\r\n    if (addEndPositions) {\r\n        // add rounded end\r\n        front += 3;\r\n        back -= 3;\r\n        leftPos = cartesian3;\r\n        rightPos = cartesian4;\r\n        var lastEndPositions = endPositions[1];\r\n        for (i = 0; i < halfLength; i++) {\r\n            leftPos = Cartesian3.fromArray(lastEndPositions, (endPositionLength - i - 1) * 3, leftPos);\r\n            rightPos = Cartesian3.fromArray(lastEndPositions, i * 3, rightPos);\r\n            CorridorGeometryLibrary.addAttribute(finalPositions, leftPos, undefined, back);\r\n            CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\r\n            addNormals(attr, normal, left, front, back, vertexFormat);\r\n\r\n            LR = front / 3;\r\n            LL = LR - 1;\r\n            UR = (back - 2) / 3;\r\n            UL = UR + 1;\r\n            indices[index++] = UL;\r\n            indices[index++] = LL;\r\n            indices[index++] = UR;\r\n            indices[index++] = UR;\r\n            indices[index++] = LL;\r\n            indices[index++] = LR;\r\n\r\n            front += 3;\r\n            back -= 3;\r\n        }\r\n    }\r\n\r\n    attributes.position = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.DOUBLE,\r\n        componentsPerAttribute: 3,\r\n        values: finalPositions\r\n    });\r\n\r\n    if (vertexFormat.st) {\r\n        var st = new Float32Array((size / 3) * 2);\r\n        var rightSt;\r\n        var leftSt;\r\n        var stIndex = 0;\r\n        if (addEndPositions) {\r\n            leftCount /= 3;\r\n            rightCount /= 3;\r\n            var theta = Math.PI / (endPositionLength + 1);\r\n            leftSt = 1 / (leftCount - endPositionLength + 1);\r\n            rightSt = 1 / (rightCount - endPositionLength + 1);\r\n            var a;\r\n            var halfEndPos = endPositionLength / 2;\r\n            for (i = halfEndPos + 1; i < endPositionLength + 1; i++) {\r\n                // lower left rounded end\r\n                a = CesiumMath.PI_OVER_TWO + theta * i;\r\n                st[stIndex++] = rightSt * (1 + Math.cos(a));\r\n                st[stIndex++] = 0.5 * (1 + Math.sin(a));\r\n            }\r\n            for (i = 1; i < rightCount - endPositionLength + 1; i++) {\r\n                // bottom edge\r\n                st[stIndex++] = i * rightSt;\r\n                st[stIndex++] = 0;\r\n            }\r\n            for (i = endPositionLength; i > halfEndPos; i--) {\r\n                // lower right rounded end\r\n                a = CesiumMath.PI_OVER_TWO - i * theta;\r\n                st[stIndex++] = 1 - rightSt * (1 + Math.cos(a));\r\n                st[stIndex++] = 0.5 * (1 + Math.sin(a));\r\n            }\r\n            for (i = halfEndPos; i > 0; i--) {\r\n                // upper right rounded end\r\n                a = CesiumMath.PI_OVER_TWO - theta * i;\r\n                st[stIndex++] = 1 - leftSt * (1 + Math.cos(a));\r\n                st[stIndex++] = 0.5 * (1 + Math.sin(a));\r\n            }\r\n            for (i = leftCount - endPositionLength; i > 0; i--) {\r\n                // top edge\r\n                st[stIndex++] = i * leftSt;\r\n                st[stIndex++] = 1;\r\n            }\r\n            for (i = 1; i < halfEndPos + 1; i++) {\r\n                // upper left rounded end\r\n                a = CesiumMath.PI_OVER_TWO + theta * i;\r\n                st[stIndex++] = leftSt * (1 + Math.cos(a));\r\n                st[stIndex++] = 0.5 * (1 + Math.sin(a));\r\n            }\r\n        } else {\r\n            leftCount /= 3;\r\n            rightCount /= 3;\r\n            leftSt = 1 / (leftCount - 1);\r\n            rightSt = 1 / (rightCount - 1);\r\n            for (i = 0; i < rightCount; i++) {\r\n                // bottom edge\r\n                st[stIndex++] = i * rightSt;\r\n                st[stIndex++] = 0;\r\n            }\r\n            for (i = leftCount; i > 0; i--) {\r\n                // top edge\r\n                st[stIndex++] = (i - 1) * leftSt;\r\n                st[stIndex++] = 1;\r\n            }\r\n        }\r\n\r\n        attributes.st = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 2,\r\n            values: st\r\n        });\r\n    }\r\n\r\n    if (vertexFormat.normal) {\r\n        attributes.normal = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 3,\r\n            values: attr.normals\r\n        });\r\n    }\r\n\r\n    if (vertexFormat.tangent) {\r\n        attributes.tangent = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 3,\r\n            values: attr.tangents\r\n        });\r\n    }\r\n\r\n    if (vertexFormat.bitangent) {\r\n        attributes.bitangent = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 3,\r\n            values: attr.bitangents\r\n        });\r\n    }\r\n\r\n    return {\r\n        attributes: attributes,\r\n        indices: indices\r\n    };\r\n}\r\n\r\nfunction extrudedAttributes(attributes, vertexFormat) {\r\n    if (!vertexFormat.normal && !vertexFormat.tangent && !vertexFormat.bitangent && !vertexFormat.st) {\r\n        return attributes;\r\n    }\r\n    var positions = attributes.position.values;\r\n    var topNormals;\r\n    var topBitangents;\r\n    if (vertexFormat.normal || vertexFormat.bitangent) {\r\n        topNormals = attributes.normal.values;\r\n        topBitangents = attributes.bitangent.values;\r\n    }\r\n    var size = attributes.position.values.length / 18;\r\n    var threeSize = size * 3;\r\n    var twoSize = size * 2;\r\n    var sixSize = threeSize * 2;\r\n    var i;\r\n    if (vertexFormat.normal || vertexFormat.bitangent || vertexFormat.tangent) {\r\n        var normals = vertexFormat.normal ? new Float32Array(threeSize * 6) : undefined;\r\n        var tangents = vertexFormat.tangent ? new Float32Array(threeSize * 6) : undefined;\r\n        var bitangents = vertexFormat.bitangent ? new Float32Array(threeSize * 6) : undefined;\r\n        var topPosition = cartesian1;\r\n        var bottomPosition = cartesian2;\r\n        var previousPosition = cartesian3;\r\n        var normal = cartesian4;\r\n        var tangent = cartesian5;\r\n        var bitangent = cartesian6;\r\n        var attrIndex = sixSize;\r\n        for (i = 0; i < threeSize; i += 3) {\r\n            var attrIndexOffset = attrIndex + sixSize;\r\n            topPosition = Cartesian3.fromArray(positions, i, topPosition);\r\n            bottomPosition = Cartesian3.fromArray(positions, i + threeSize, bottomPosition);\r\n            previousPosition = Cartesian3.fromArray(positions, (i + 3) % threeSize, previousPosition);\r\n            bottomPosition = Cartesian3.subtract(bottomPosition, topPosition, bottomPosition);\r\n            previousPosition = Cartesian3.subtract(previousPosition, topPosition, previousPosition);\r\n            normal = Cartesian3.normalize(Cartesian3.cross(bottomPosition, previousPosition, normal), normal);\r\n            if (vertexFormat.normal) {\r\n                CorridorGeometryLibrary.addAttribute(normals, normal, attrIndexOffset);\r\n                CorridorGeometryLibrary.addAttribute(normals, normal, attrIndexOffset + 3);\r\n                CorridorGeometryLibrary.addAttribute(normals, normal, attrIndex);\r\n                CorridorGeometryLibrary.addAttribute(normals, normal, attrIndex + 3);\r\n            }\r\n            if (vertexFormat.tangent || vertexFormat.bitangent) {\r\n                bitangent = Cartesian3.fromArray(topNormals, i, bitangent);\r\n                if (vertexFormat.bitangent) {\r\n                    CorridorGeometryLibrary.addAttribute(bitangents, bitangent, attrIndexOffset);\r\n                    CorridorGeometryLibrary.addAttribute(bitangents, bitangent, attrIndexOffset + 3);\r\n                    CorridorGeometryLibrary.addAttribute(bitangents, bitangent, attrIndex);\r\n                    CorridorGeometryLibrary.addAttribute(bitangents, bitangent, attrIndex + 3);\r\n                }\r\n\r\n                if (vertexFormat.tangent) {\r\n                    tangent = Cartesian3.normalize(Cartesian3.cross(bitangent, normal, tangent), tangent);\r\n                    CorridorGeometryLibrary.addAttribute(tangents, tangent, attrIndexOffset);\r\n                    CorridorGeometryLibrary.addAttribute(tangents, tangent, attrIndexOffset + 3);\r\n                    CorridorGeometryLibrary.addAttribute(tangents, tangent, attrIndex);\r\n                    CorridorGeometryLibrary.addAttribute(tangents, tangent, attrIndex + 3);\r\n                }\r\n            }\r\n            attrIndex += 6;\r\n        }\r\n\r\n        if (vertexFormat.normal) {\r\n            normals.set(topNormals); //top\r\n            for (i = 0; i < threeSize; i += 3) {\r\n                //bottom normals\r\n                normals[i + threeSize] = -topNormals[i];\r\n                normals[i + threeSize + 1] = -topNormals[i + 1];\r\n                normals[i + threeSize + 2] = -topNormals[i + 2];\r\n            }\r\n            attributes.normal.values = normals;\r\n        } else {\r\n            attributes.normal = undefined;\r\n        }\r\n\r\n        if (vertexFormat.bitangent) {\r\n            bitangents.set(topBitangents); //top\r\n            bitangents.set(topBitangents, threeSize); //bottom\r\n            attributes.bitangent.values = bitangents;\r\n        } else {\r\n            attributes.bitangent = undefined;\r\n        }\r\n\r\n        if (vertexFormat.tangent) {\r\n            var topTangents = attributes.tangent.values;\r\n            tangents.set(topTangents); //top\r\n            tangents.set(topTangents, threeSize); //bottom\r\n            attributes.tangent.values = tangents;\r\n        }\r\n    }\r\n    if (vertexFormat.st) {\r\n        var topSt = attributes.st.values;\r\n        var st = new Float32Array(twoSize * 6);\r\n        st.set(topSt); //top\r\n        st.set(topSt, twoSize); //bottom\r\n        var index = twoSize * 2;\r\n\r\n        for (var j = 0; j < 2; j++) {\r\n            st[index++] = topSt[0];\r\n            st[index++] = topSt[1];\r\n            for (i = 2; i < twoSize; i += 2) {\r\n                var s = topSt[i];\r\n                var t = topSt[i + 1];\r\n                st[index++] = s;\r\n                st[index++] = t;\r\n                st[index++] = s;\r\n                st[index++] = t;\r\n            }\r\n            st[index++] = topSt[0];\r\n            st[index++] = topSt[1];\r\n        }\r\n        attributes.st.values = st;\r\n    }\r\n\r\n    return attributes;\r\n}\r\n\r\nfunction addWallPositions(positions, index, wallPositions) {\r\n    wallPositions[index++] = positions[0];\r\n    wallPositions[index++] = positions[1];\r\n    wallPositions[index++] = positions[2];\r\n    for (var i = 3; i < positions.length; i += 3) {\r\n        var x = positions[i];\r\n        var y = positions[i + 1];\r\n        var z = positions[i + 2];\r\n        wallPositions[index++] = x;\r\n        wallPositions[index++] = y;\r\n        wallPositions[index++] = z;\r\n        wallPositions[index++] = x;\r\n        wallPositions[index++] = y;\r\n        wallPositions[index++] = z;\r\n    }\r\n    wallPositions[index++] = positions[0];\r\n    wallPositions[index++] = positions[1];\r\n    wallPositions[index++] = positions[2];\r\n\r\n    return wallPositions;\r\n}\r\n\r\nfunction computePositionsExtruded(params, vertexFormat) {\r\n    var topVertexFormat = new VertexFormat({\r\n        position: vertexFormat.position,\r\n        normal: vertexFormat.normal || vertexFormat.bitangent || params.shadowVolume,\r\n        tangent: vertexFormat.tangent,\r\n        bitangent: vertexFormat.normal || vertexFormat.bitangent,\r\n        st: vertexFormat.st\r\n    });\r\n    var ellipsoid = params.ellipsoid;\r\n    var computedPositions = CorridorGeometryLibrary.computePositions(params);\r\n    var attr = combine(computedPositions, topVertexFormat, ellipsoid);\r\n    var height = params.height;\r\n    var extrudedHeight = params.extrudedHeight;\r\n    var attributes = attr.attributes;\r\n    var indices = attr.indices;\r\n    var positions = attributes.position.values;\r\n    var length = positions.length;\r\n    var newPositions = new Float64Array(length * 6);\r\n    var extrudedPositions = new Float64Array(length);\r\n    extrudedPositions.set(positions);\r\n    var wallPositions = new Float64Array(length * 4);\r\n\r\n    positions = PolygonPipeline.scaleToGeodeticHeight(positions, height, ellipsoid);\r\n    wallPositions = addWallPositions(positions, 0, wallPositions);\r\n    extrudedPositions = PolygonPipeline.scaleToGeodeticHeight(extrudedPositions, extrudedHeight, ellipsoid);\r\n    wallPositions = addWallPositions(extrudedPositions, length * 2, wallPositions);\r\n    newPositions.set(positions);\r\n    newPositions.set(extrudedPositions, length);\r\n    newPositions.set(wallPositions, length * 2);\r\n    attributes.position.values = newPositions;\r\n\r\n    attributes = extrudedAttributes(attributes, vertexFormat);\r\n    var i;\r\n    var size = length / 3;\r\n    if (params.shadowVolume) {\r\n        var topNormals = attributes.normal.values;\r\n        length = topNormals.length;\r\n\r\n        var extrudeNormals = new Float32Array(length * 6);\r\n        for (i = 0; i < length; i++) {\r\n            topNormals[i] = -topNormals[i];\r\n        }\r\n        //only get normals for bottom layer that's going to be pushed down\r\n        extrudeNormals.set(topNormals, length); //bottom face\r\n        extrudeNormals = addWallPositions(topNormals, length * 4, extrudeNormals); //bottom wall\r\n        attributes.extrudeDirection = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 3,\r\n            values: extrudeNormals\r\n        });\r\n        if (!vertexFormat.normal) {\r\n            attributes.normal = undefined;\r\n        }\r\n    }\r\n    if (defined(params.offsetAttribute)) {\r\n        var applyOffset = new Uint8Array(size * 6);\r\n        if (params.offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n            applyOffset = arrayFill(applyOffset, 1, 0, size); // top face\r\n            applyOffset = arrayFill(applyOffset, 1, size * 2, size * 4); // top wall\r\n        } else {\r\n            var applyOffsetValue = params.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n            applyOffset = arrayFill(applyOffset, applyOffsetValue);\r\n        }\r\n        attributes.applyOffset = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n            componentsPerAttribute: 1,\r\n            values: applyOffset\r\n        });\r\n    }\r\n\r\n    var iLength = indices.length;\r\n    var twoSize = size + size;\r\n    var newIndices = IndexDatatype.createTypedArray(newPositions.length / 3, iLength * 2 + twoSize * 3);\r\n    newIndices.set(indices);\r\n    var index = iLength;\r\n    for (i = 0; i < iLength; i += 3) {\r\n        // bottom indices\r\n        var v0 = indices[i];\r\n        var v1 = indices[i + 1];\r\n        var v2 = indices[i + 2];\r\n        newIndices[index++] = v2 + size;\r\n        newIndices[index++] = v1 + size;\r\n        newIndices[index++] = v0 + size;\r\n    }\r\n\r\n    var UL, LL, UR, LR;\r\n\r\n    for (i = 0; i < twoSize; i += 2) {\r\n        //wall indices\r\n        UL = i + twoSize;\r\n        LL = UL + twoSize;\r\n        UR = UL + 1;\r\n        LR = LL + 1;\r\n        newIndices[index++] = UL;\r\n        newIndices[index++] = LL;\r\n        newIndices[index++] = UR;\r\n        newIndices[index++] = UR;\r\n        newIndices[index++] = LL;\r\n        newIndices[index++] = LR;\r\n    }\r\n\r\n    return {\r\n        attributes: attributes,\r\n        indices: newIndices\r\n    };\r\n}\r\n\r\nvar scratchCartesian1 = new Cartesian3();\r\nvar scratchCartesian2 = new Cartesian3();\r\nvar scratchCartographic = new Cartographic();\r\n\r\nfunction computeOffsetPoints(position1, position2, ellipsoid, halfWidth, min, max) {\r\n    // Compute direction of offset the point\r\n    var direction = Cartesian3.subtract(position2, position1, scratchCartesian1);\r\n    Cartesian3.normalize(direction, direction);\r\n    var normal = ellipsoid.geodeticSurfaceNormal(position1, scratchCartesian2);\r\n    var offsetDirection = Cartesian3.cross(direction, normal, scratchCartesian1);\r\n    Cartesian3.multiplyByScalar(offsetDirection, halfWidth, offsetDirection);\r\n\r\n    var minLat = min.latitude;\r\n    var minLon = min.longitude;\r\n    var maxLat = max.latitude;\r\n    var maxLon = max.longitude;\r\n\r\n    // Compute 2 offset points\r\n    Cartesian3.add(position1, offsetDirection, scratchCartesian2);\r\n    ellipsoid.cartesianToCartographic(scratchCartesian2, scratchCartographic);\r\n\r\n    var lat = scratchCartographic.latitude;\r\n    var lon = scratchCartographic.longitude;\r\n    minLat = Math.min(minLat, lat);\r\n    minLon = Math.min(minLon, lon);\r\n    maxLat = Math.max(maxLat, lat);\r\n    maxLon = Math.max(maxLon, lon);\r\n\r\n    Cartesian3.subtract(position1, offsetDirection, scratchCartesian2);\r\n    ellipsoid.cartesianToCartographic(scratchCartesian2, scratchCartographic);\r\n\r\n    lat = scratchCartographic.latitude;\r\n    lon = scratchCartographic.longitude;\r\n    minLat = Math.min(minLat, lat);\r\n    minLon = Math.min(minLon, lon);\r\n    maxLat = Math.max(maxLat, lat);\r\n    maxLon = Math.max(maxLon, lon);\r\n\r\n    min.latitude = minLat;\r\n    min.longitude = minLon;\r\n    max.latitude = maxLat;\r\n    max.longitude = maxLon;\r\n}\r\n\r\nvar scratchCartesianOffset = new Cartesian3();\r\nvar scratchCartesianEnds = new Cartesian3();\r\nvar scratchCartographicMin = new Cartographic();\r\nvar scratchCartographicMax = new Cartographic();\r\n\r\nfunction computeRectangle(positions, ellipsoid, width, cornerType, result) {\r\n    positions = scaleToSurface(positions, ellipsoid);\r\n    var cleanPositions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\r\n    var length = cleanPositions.length;\r\n    if (length < 2 || width <= 0) {\r\n        return new Rectangle();\r\n    }\r\n    var halfWidth = width * 0.5;\r\n\r\n    scratchCartographicMin.latitude = Number.POSITIVE_INFINITY;\r\n    scratchCartographicMin.longitude = Number.POSITIVE_INFINITY;\r\n    scratchCartographicMax.latitude = Number.NEGATIVE_INFINITY;\r\n    scratchCartographicMax.longitude = Number.NEGATIVE_INFINITY;\r\n\r\n    var lat, lon;\r\n    if (cornerType === CornerType.ROUNDED) {\r\n        // Compute start cap\r\n        var first = cleanPositions[0];\r\n        Cartesian3.subtract(first, cleanPositions[1], scratchCartesianOffset);\r\n        Cartesian3.normalize(scratchCartesianOffset, scratchCartesianOffset);\r\n        Cartesian3.multiplyByScalar(scratchCartesianOffset, halfWidth, scratchCartesianOffset);\r\n        Cartesian3.add(first, scratchCartesianOffset, scratchCartesianEnds);\r\n\r\n        ellipsoid.cartesianToCartographic(scratchCartesianEnds, scratchCartographic);\r\n        lat = scratchCartographic.latitude;\r\n        lon = scratchCartographic.longitude;\r\n        scratchCartographicMin.latitude = Math.min(scratchCartographicMin.latitude, lat);\r\n        scratchCartographicMin.longitude = Math.min(scratchCartographicMin.longitude, lon);\r\n        scratchCartographicMax.latitude = Math.max(scratchCartographicMax.latitude, lat);\r\n        scratchCartographicMax.longitude = Math.max(scratchCartographicMax.longitude, lon);\r\n    }\r\n\r\n    // Compute the rest\r\n    for (var i = 0; i < length - 1; ++i) {\r\n        computeOffsetPoints(cleanPositions[i], cleanPositions[i + 1], ellipsoid, halfWidth, scratchCartographicMin, scratchCartographicMax);\r\n    }\r\n\r\n    // Compute ending point\r\n    var last = cleanPositions[length - 1];\r\n    Cartesian3.subtract(last, cleanPositions[length - 2], scratchCartesianOffset);\r\n    Cartesian3.normalize(scratchCartesianOffset, scratchCartesianOffset);\r\n    Cartesian3.multiplyByScalar(scratchCartesianOffset, halfWidth, scratchCartesianOffset);\r\n    Cartesian3.add(last, scratchCartesianOffset, scratchCartesianEnds);\r\n    computeOffsetPoints(last, scratchCartesianEnds, ellipsoid, halfWidth, scratchCartographicMin, scratchCartographicMax);\r\n\r\n    if (cornerType === CornerType.ROUNDED) {\r\n        // Compute end cap\r\n        ellipsoid.cartesianToCartographic(scratchCartesianEnds, scratchCartographic);\r\n        lat = scratchCartographic.latitude;\r\n        lon = scratchCartographic.longitude;\r\n        scratchCartographicMin.latitude = Math.min(scratchCartographicMin.latitude, lat);\r\n        scratchCartographicMin.longitude = Math.min(scratchCartographicMin.longitude, lon);\r\n        scratchCartographicMax.latitude = Math.max(scratchCartographicMax.latitude, lat);\r\n        scratchCartographicMax.longitude = Math.max(scratchCartographicMax.longitude, lon);\r\n    }\r\n\r\n    var rectangle = defined(result) ? result : new Rectangle();\r\n    rectangle.north = scratchCartographicMax.latitude;\r\n    rectangle.south = scratchCartographicMin.latitude;\r\n    rectangle.east = scratchCartographicMax.longitude;\r\n    rectangle.west = scratchCartographicMin.longitude;\r\n\r\n    return rectangle;\r\n}\r\n\r\n/**\r\n * A description of a corridor. Corridor geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\r\n *\r\n * @alias CorridorGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.positions An array of positions that define the center of the corridor.\r\n * @param {Number} options.width The distance between the edges of the corridor in meters.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n * @param {Number} [options.height=0] The distance in meters between the ellipsoid surface and the positions.\r\n * @param {Number} [options.extrudedHeight] The distance in meters between the ellipsoid surface and the extruded face.\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\r\n *\r\n * @see CorridorGeometry.createGeometry\r\n * @see Packable\r\n *\r\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Corridor.html|Cesium Sandcastle Corridor Demo}\r\n *\r\n * @example\r\n * var corridor = new Cesium.CorridorGeometry({\r\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\r\n *   positions : Cesium.Cartesian3.fromDegreesArray([-72.0, 40.0, -70.0, 35.0]),\r\n *   width : 100000\r\n * });\r\n */\r\nfunction CorridorGeometry(options) {\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n    var positions = options.positions;\r\n    var width = options.width;\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined('options.positions', positions);\r\n    Check.defined('options.width', width);\r\n    //>>includeEnd('debug');\r\n\r\n    var height = defaultValue(options.height, 0.0);\r\n    var extrudedHeight = defaultValue(options.extrudedHeight, height);\r\n\r\n    this._positions = positions;\r\n    this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\r\n    this._vertexFormat = VertexFormat.clone(defaultValue(options.vertexFormat, VertexFormat.DEFAULT));\r\n    this._width = width;\r\n    this._height = Math.max(height, extrudedHeight);\r\n    this._extrudedHeight = Math.min(height, extrudedHeight);\r\n    this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\r\n    this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n    this._shadowVolume = defaultValue(options.shadowVolume, false);\r\n    this._workerName = 'createCorridorGeometry';\r\n    this._offsetAttribute = options.offsetAttribute;\r\n    this._rectangle = undefined;\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    this.packedLength = 1 + positions.length * Cartesian3.packedLength + Ellipsoid.packedLength + VertexFormat.packedLength + 7;\r\n}\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {CorridorGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nCorridorGeometry.pack = function (value, array, startingIndex) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined('value', value);\r\n    Check.defined('array', array);\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    var positions = value._positions;\r\n    var length = positions.length;\r\n    array[startingIndex++] = length;\r\n\r\n    for (var i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n        Cartesian3.pack(positions[i], array, startingIndex);\r\n    }\r\n\r\n    Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n    startingIndex += Ellipsoid.packedLength;\r\n\r\n    VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n    startingIndex += VertexFormat.packedLength;\r\n\r\n    array[startingIndex++] = value._width;\r\n    array[startingIndex++] = value._height;\r\n    array[startingIndex++] = value._extrudedHeight;\r\n    array[startingIndex++] = value._cornerType;\r\n    array[startingIndex++] = value._granularity;\r\n    array[startingIndex++] = value._shadowVolume ? 1.0 : 0.0;\r\n    array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n    return array;\r\n};\r\n\r\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\nvar scratchVertexFormat = new VertexFormat();\r\nvar scratchOptions = {\r\n    positions: undefined,\r\n    ellipsoid: scratchEllipsoid,\r\n    vertexFormat: scratchVertexFormat,\r\n    width: undefined,\r\n    height: undefined,\r\n    extrudedHeight: undefined,\r\n    cornerType: undefined,\r\n    granularity: undefined,\r\n    shadowVolume: undefined,\r\n    offsetAttribute: undefined\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {CorridorGeometry} [result] The object into which to store the result.\r\n * @returns {CorridorGeometry} The modified result parameter or a new CorridorGeometry instance if one was not provided.\r\n */\r\nCorridorGeometry.unpack = function (array, startingIndex, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined('array', array);\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    var length = array[startingIndex++];\r\n    var positions = new Array(length);\r\n\r\n    for (var i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n        positions[i] = Cartesian3.unpack(array, startingIndex);\r\n    }\r\n\r\n    var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n    startingIndex += Ellipsoid.packedLength;\r\n\r\n    var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\r\n    startingIndex += VertexFormat.packedLength;\r\n\r\n    var width = array[startingIndex++];\r\n    var height = array[startingIndex++];\r\n    var extrudedHeight = array[startingIndex++];\r\n    var cornerType = array[startingIndex++];\r\n    var granularity = array[startingIndex++];\r\n    var shadowVolume = array[startingIndex++] === 1.0;\r\n    var offsetAttribute = array[startingIndex];\r\n\r\n    if (!defined(result)) {\r\n        scratchOptions.positions = positions;\r\n        scratchOptions.width = width;\r\n        scratchOptions.height = height;\r\n        scratchOptions.extrudedHeight = extrudedHeight;\r\n        scratchOptions.cornerType = cornerType;\r\n        scratchOptions.granularity = granularity;\r\n        scratchOptions.shadowVolume = shadowVolume;\r\n        scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n        return new CorridorGeometry(scratchOptions);\r\n    }\r\n\r\n    result._positions = positions;\r\n    result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n    result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n    result._width = width;\r\n    result._height = height;\r\n    result._extrudedHeight = extrudedHeight;\r\n    result._cornerType = cornerType;\r\n    result._granularity = granularity;\r\n    result._shadowVolume = shadowVolume;\r\n    result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Computes the bounding rectangle given the provided options\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.positions An array of positions that define the center of the corridor.\r\n * @param {Number} options.width The distance between the edges of the corridor in meters.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\r\n * @param {Rectangle} [result] An object in which to store the result.\r\n *\r\n * @returns {Rectangle} The result rectangle.\r\n */\r\nCorridorGeometry.computeRectangle = function (options, result) {\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n    var positions = options.positions;\r\n    var width = options.width;\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined('options.positions', positions);\r\n    Check.defined('options.width', width);\r\n    //>>includeEnd('debug');\r\n\r\n    var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n    var cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\r\n\r\n    return computeRectangle(positions, ellipsoid, width, cornerType, result);\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of a corridor, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {CorridorGeometry} corridorGeometry A description of the corridor.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nCorridorGeometry.createGeometry = function (corridorGeometry) {\r\n    var positions = corridorGeometry._positions;\r\n    var width = corridorGeometry._width;\r\n    var ellipsoid = corridorGeometry._ellipsoid;\r\n\r\n    positions = scaleToSurface(positions, ellipsoid);\r\n    var cleanPositions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\r\n\r\n    if (cleanPositions.length < 2 || width <= 0) {\r\n        return;\r\n    }\r\n\r\n    var height = corridorGeometry._height;\r\n    var extrudedHeight = corridorGeometry._extrudedHeight;\r\n    var extrude = !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\r\n\r\n    var vertexFormat = corridorGeometry._vertexFormat;\r\n    var params = {\r\n        ellipsoid: ellipsoid,\r\n        positions: cleanPositions,\r\n        width: width,\r\n        cornerType: corridorGeometry._cornerType,\r\n        granularity: corridorGeometry._granularity,\r\n        saveAttributes: true\r\n    };\r\n    var attr;\r\n    if (extrude) {\r\n        params.height = height;\r\n        params.extrudedHeight = extrudedHeight;\r\n        params.shadowVolume = corridorGeometry._shadowVolume;\r\n        params.offsetAttribute = corridorGeometry._offsetAttribute;\r\n        attr = computePositionsExtruded(params, vertexFormat);\r\n    } else {\r\n        var computedPositions = CorridorGeometryLibrary.computePositions(params);\r\n        attr = combine(computedPositions, vertexFormat, ellipsoid);\r\n        attr.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(attr.attributes.position.values, height, ellipsoid);\r\n\r\n        if (defined(corridorGeometry._offsetAttribute)) {\r\n            var applyOffsetValue = corridorGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n            var length = attr.attributes.position.values.length;\r\n            var applyOffset = new Uint8Array(length / 3);\r\n            arrayFill(applyOffset, applyOffsetValue);\r\n            attr.attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute: 1,\r\n                values: applyOffset\r\n            });\r\n        }\r\n    }\r\n    var attributes = attr.attributes;\r\n    var boundingSphere = BoundingSphere.fromVertices(attributes.position.values, undefined, 3);\r\n    if (!vertexFormat.position) {\r\n        attr.attributes.position.values = undefined;\r\n    }\r\n\r\n    return new Geometry({\r\n        attributes: attributes,\r\n        indices: attr.indices,\r\n        primitiveType: PrimitiveType.TRIANGLES,\r\n        boundingSphere: boundingSphere,\r\n        offsetAttribute: corridorGeometry._offsetAttribute\r\n    });\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nCorridorGeometry.createShadowVolume = function (corridorGeometry, minHeightFunc, maxHeightFunc) {\r\n    var granularity = corridorGeometry._granularity;\r\n    var ellipsoid = corridorGeometry._ellipsoid;\r\n\r\n    var minHeight = minHeightFunc(granularity, ellipsoid);\r\n    var maxHeight = maxHeightFunc(granularity, ellipsoid);\r\n\r\n    return new CorridorGeometry({\r\n        positions: corridorGeometry._positions,\r\n        width: corridorGeometry._width,\r\n        cornerType: corridorGeometry._cornerType,\r\n        ellipsoid: ellipsoid,\r\n        granularity: granularity,\r\n        extrudedHeight: minHeight,\r\n        height: maxHeight,\r\n        vertexFormat: VertexFormat.POSITION_ONLY,\r\n        shadowVolume: true\r\n    });\r\n};\r\n\r\nObject.defineProperties(CorridorGeometry.prototype, {\r\n    /**\r\n     * @private\r\n     */\r\n    rectangle: {\r\n        get: function () {\r\n            if (!defined(this._rectangle)) {\r\n                this._rectangle = computeRectangle(this._positions, this._ellipsoid, this._width, this._cornerType);\r\n            }\r\n            return this._rectangle;\r\n        }\r\n    },\r\n    /**\r\n     * For remapping texture coordinates when rendering CorridorGeometries as GroundPrimitives.\r\n     *\r\n     * Corridors don't support stRotation,\r\n     * so just return the corners of the original system.\r\n     * @private\r\n     */\r\n    textureCoordinateRotationPoints: {\r\n        get: function () {\r\n            return [0, 0, 0, 1, 1, 0];\r\n        }\r\n    }\r\n});\r\nexport default CorridorGeometry;\r\n","import CorridorGeometry from '../Core/CorridorGeometry.js';\r\nimport defined from '../Core/defined.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\n\r\nfunction createCorridorGeometry(corridorGeometry, offset) {\r\n    if (defined(offset)) {\r\n        corridorGeometry = CorridorGeometry.unpack(corridorGeometry, offset);\r\n    }\r\n    corridorGeometry._ellipsoid = Ellipsoid.clone(corridorGeometry._ellipsoid);\r\n    return CorridorGeometry.createGeometry(corridorGeometry);\r\n}\r\nexport default createCorridorGeometry;\r\n"],"names":["Cartesian3","CorridorGeometryLibrary","GeometryAttributes","defined","IndexDatatype","GeometryAttribute","ComponentDatatype","CesiumMath","VertexFormat","PolygonPipeline","GeometryOffsetAttribute","arrayFill","Cartographic","arrayRemoveDuplicates","Rectangle","CornerType","defaultValue","Check","Ellipsoid","BoundingSphere","Geometry","PrimitiveType"],"mappings":"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"}