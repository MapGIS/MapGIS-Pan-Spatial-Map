{"version":3,"file":"WallGeometryLibrary-649b4f5a.js","sources":["../../../../Source/Core/WallGeometryLibrary.js"],"sourcesContent":["import arrayRemoveDuplicates from './arrayRemoveDuplicates.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Cartographic from './Cartographic.js';\r\nimport defined from './defined.js';\r\nimport CesiumMath from './Math.js';\r\nimport PolylinePipeline from './PolylinePipeline.js';\r\n\r\n/**\r\n * @private\r\n */\r\nvar WallGeometryLibrary = {};\r\n\r\nfunction latLonEquals(c0, c1) {\r\n    return CesiumMath.equalsEpsilon(c0.latitude, c1.latitude, CesiumMath.EPSILON10) && CesiumMath.equalsEpsilon(c0.longitude, c1.longitude, CesiumMath.EPSILON10);\r\n}\r\n\r\nvar scratchCartographic1 = new Cartographic();\r\nvar scratchCartographic2 = new Cartographic();\r\nfunction removeDuplicates(ellipsoid, positions, topHeights, bottomHeights) {\r\n    positions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\r\n\r\n    var length = positions.length;\r\n    if (length < 2) {\r\n        return;\r\n    }\r\n\r\n    var hasBottomHeights = defined(bottomHeights);\r\n    var hasTopHeights = defined(topHeights);\r\n\r\n    var cleanedPositions = new Array(length);\r\n    var cleanedTopHeights = new Array(length);\r\n    var cleanedBottomHeights = new Array(length);\r\n\r\n    var v0 = positions[0];\r\n    cleanedPositions[0] = v0;\r\n\r\n    var c0 = ellipsoid.cartesianToCartographic(v0, scratchCartographic1);\r\n    if (hasTopHeights) {\r\n        c0.height = topHeights[0];\r\n    }\r\n\r\n    cleanedTopHeights[0] = c0.height;\r\n\r\n    if (hasBottomHeights) {\r\n        cleanedBottomHeights[0] = bottomHeights[0];\r\n    } else {\r\n        cleanedBottomHeights[0] = 0.0;\r\n    }\r\n\r\n    var startTopHeight = cleanedTopHeights[0];\r\n    var startBottomHeight = cleanedBottomHeights[0];\r\n    var hasAllSameHeights = startTopHeight === startBottomHeight;\r\n\r\n    var index = 1;\r\n    for (var i = 1; i < length; ++i) {\r\n        var v1 = positions[i];\r\n        var c1 = ellipsoid.cartesianToCartographic(v1, scratchCartographic2);\r\n        if (hasTopHeights) {\r\n            c1.height = topHeights[i];\r\n        }\r\n        hasAllSameHeights = hasAllSameHeights && c1.height === 0;\r\n\r\n        if (!latLonEquals(c0, c1)) {\r\n            cleanedPositions[index] = v1; // Shallow copy!\r\n            cleanedTopHeights[index] = c1.height;\r\n\r\n            if (hasBottomHeights) {\r\n                cleanedBottomHeights[index] = bottomHeights[i];\r\n            } else {\r\n                cleanedBottomHeights[index] = 0.0;\r\n            }\r\n            hasAllSameHeights = hasAllSameHeights && cleanedTopHeights[index] === cleanedBottomHeights[index];\r\n\r\n            Cartographic.clone(c1, c0);\r\n            ++index;\r\n        } else if (c0.height < c1.height) {\r\n            // two adjacent positions are the same, so use whichever has the greater height\r\n            cleanedTopHeights[index - 1] = c1.height;\r\n        }\r\n    }\r\n\r\n    if (hasAllSameHeights || index < 2) {\r\n        return;\r\n    }\r\n\r\n    cleanedPositions.length = index;\r\n    cleanedTopHeights.length = index;\r\n    cleanedBottomHeights.length = index;\r\n\r\n    return {\r\n        positions: cleanedPositions,\r\n        topHeights: cleanedTopHeights,\r\n        bottomHeights: cleanedBottomHeights\r\n    };\r\n}\r\n\r\nvar positionsArrayScratch = new Array(2);\r\nvar heightsArrayScratch = new Array(2);\r\nvar generateArcOptionsScratch = {\r\n    positions: undefined,\r\n    height: undefined,\r\n    granularity: undefined,\r\n    ellipsoid: undefined\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nWallGeometryLibrary.computePositions = function (ellipsoid, wallPositions, maximumHeights, minimumHeights, granularity, duplicateCorners) {\r\n    var o = removeDuplicates(ellipsoid, wallPositions, maximumHeights, minimumHeights);\r\n\r\n    if (!defined(o)) {\r\n        return;\r\n    }\r\n\r\n    wallPositions = o.positions;\r\n    maximumHeights = o.topHeights;\r\n    minimumHeights = o.bottomHeights;\r\n\r\n    var length = wallPositions.length;\r\n    var numCorners = length - 2;\r\n    var topPositions;\r\n    var bottomPositions;\r\n\r\n    var minDistance = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\r\n\r\n    var generateArcOptions = generateArcOptionsScratch;\r\n    generateArcOptions.minDistance = minDistance;\r\n    generateArcOptions.ellipsoid = ellipsoid;\r\n\r\n    if (duplicateCorners) {\r\n        var count = 0;\r\n        var i;\r\n\r\n        for (i = 0; i < length - 1; i++) {\r\n            count += PolylinePipeline.numberOfPoints(wallPositions[i], wallPositions[i + 1], minDistance) + 1;\r\n        }\r\n\r\n        topPositions = new Float64Array(count * 3);\r\n        bottomPositions = new Float64Array(count * 3);\r\n\r\n        var generateArcPositions = positionsArrayScratch;\r\n        var generateArcHeights = heightsArrayScratch;\r\n        generateArcOptions.positions = generateArcPositions;\r\n        generateArcOptions.height = generateArcHeights;\r\n\r\n        var offset = 0;\r\n        for (i = 0; i < length - 1; i++) {\r\n            generateArcPositions[0] = wallPositions[i];\r\n            generateArcPositions[1] = wallPositions[i + 1];\r\n\r\n            generateArcHeights[0] = maximumHeights[i];\r\n            generateArcHeights[1] = maximumHeights[i + 1];\r\n\r\n            var pos = PolylinePipeline.generateArc(generateArcOptions);\r\n            topPositions.set(pos, offset);\r\n\r\n            generateArcHeights[0] = minimumHeights[i];\r\n            generateArcHeights[1] = minimumHeights[i + 1];\r\n\r\n            bottomPositions.set(PolylinePipeline.generateArc(generateArcOptions), offset);\r\n\r\n            offset += pos.length;\r\n        }\r\n    } else {\r\n        generateArcOptions.positions = wallPositions;\r\n        generateArcOptions.height = maximumHeights;\r\n        topPositions = new Float64Array(PolylinePipeline.generateArc(generateArcOptions));\r\n\r\n        generateArcOptions.height = minimumHeights;\r\n        bottomPositions = new Float64Array(PolylinePipeline.generateArc(generateArcOptions));\r\n    }\r\n\r\n    return {\r\n        bottomPositions: bottomPositions,\r\n        topPositions: topPositions,\r\n        numCorners: numCorners\r\n    };\r\n};\r\nexport default WallGeometryLibrary;\r\n"],"names":["CesiumMath","Cartographic","arrayRemoveDuplicates","Cartesian3","defined","PolylinePipeline"],"mappings":"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"}