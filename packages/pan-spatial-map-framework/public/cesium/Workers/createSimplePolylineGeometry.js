define(["./when-ae2e0b60","./Cartesian2-38b35910","./ArcType-1275a14e","./Transforms-07a9fab5","./Color-0fad516f","./ComponentDatatype-e44126e4","./Check-f996273c","./GeometryAttribute-586bf52c","./GeometryAttributes-5ce4955a","./IndexDatatype-516320ea","./Math-5bbcea10","./PolylinePipeline-f47a23a0","./combine-276652d0","./RuntimeError-ac2797b4","./WebGLConstants-35626ea2","./EllipsoidGeodesic-0207b202","./EllipsoidRhumbLine-af7b5ebe","./IntersectionTests-f49c7cd3","./Plane-45ad3143"],function(D,L,V,U,x,N,e,S,F,H,I,R,o,t,r,a,l,i,n){"use strict";function c(e){var o=(e=D.defaultValue(e,D.defaultValue.EMPTY_OBJECT)).positions,t=e.colors,r=D.defaultValue(e.colorsPerVertex,!1),r=(this._positions=o,this._colors=t,this._colorsPerVertex=r,this._arcType=D.defaultValue(e.arcType,V.ArcType.GEODESIC),this._granularity=D.defaultValue(e.granularity,I.CesiumMath.RADIANS_PER_DEGREE),this._ellipsoid=D.defaultValue(e.ellipsoid,L.Ellipsoid.WGS84),this._workerName="createSimplePolylineGeometry",1+o.length*L.Cartesian3.packedLength);r+=D.defined(t)?1+t.length*x.Color.packedLength:1,this.packedLength=r+L.Ellipsoid.packedLength+3}c.pack=function(e,o,t){t=D.defaultValue(t,0);var r,a=e._positions,l=a.length;for(o[t++]=l,r=0;r<l;++r,t+=L.Cartesian3.packedLength)L.Cartesian3.pack(a[r],o,t);var i=e._colors,l=D.defined(i)?i.length:0;for(o[t++]=l,r=0;r<l;++r,t+=x.Color.packedLength)x.Color.pack(i[r],o,t);return L.Ellipsoid.pack(e._ellipsoid,o,t),t+=L.Ellipsoid.packedLength,o[t++]=e._colorsPerVertex?1:0,o[t++]=e._arcType,o[t]=e._granularity,o},c.unpack=function(e,o,t){o=D.defaultValue(o,0);for(var r=e[o++],a=new Array(r),l=0;l<r;++l,o+=L.Cartesian3.packedLength)a[l]=L.Cartesian3.unpack(e,o);var i=0<(r=e[o++])?new Array(r):void 0;for(l=0;l<r;++l,o+=x.Color.packedLength)i[l]=x.Color.unpack(e,o);var n=L.Ellipsoid.unpack(e,o),s=(o+=L.Ellipsoid.packedLength,1===e[o++]),p=e[o++],d=e[o];return D.defined(t)?(t._positions=a,t._colors=i,t._ellipsoid=n,t._colorsPerVertex=s,t._arcType=p,t._granularity=d,t):new c({positions:a,colors:i,ellipsoid:n,colorsPerVertex:s,arcType:p,granularity:d})};var O=new Array(2),M=new Array(2),W={positions:O,height:M,ellipsoid:void 0,minDistance:void 0,granularity:void 0};return c.createGeometry=function(e){var o=e._positions,t=e._colors,d=e._colorsPerVertex,c=e._arcType,y=e._granularity,e=e._ellipsoid,f=I.CesiumMath.chordLength(y,e.maximumRadius),u=D.defined(t)&&!d,r=o.length,a=0;if(c===V.ArcType.GEODESIC||c===V.ArcType.RHUMB){var h,C,T=c===V.ArcType.GEODESIC?(h=I.CesiumMath.chordLength(y,e.maximumRadius),C=R.PolylinePipeline.numberOfPoints,R.PolylinePipeline.generateArc):(h=y,C=R.PolylinePipeline.numberOfPointsRhumbLine,R.PolylinePipeline.generateRhumbArc),g=R.PolylinePipeline.extractHeights(o,e),l=W;if(c===V.ArcType.GEODESIC?l.minDistance=f:l.granularity=y,l.ellipsoid=e,u){for(var m=0,i=0;i<r-1;i++)m+=C(o[i],o[i+1],h)+1;s=new Float64Array(3*m),p=new Uint8Array(4*m),l.positions=O,l.height=M;var b=0;for(i=0;i<r-1;++i){O[0]=o[i],O[1]=o[i+1],M[0]=g[i],M[1]=g[i+1];var P=T(l);if(D.defined(t))for(var _=P.length/3,n=t[i],B=0;B<_;++B)p[b++]=x.Color.floatToByte(n.red),p[b++]=x.Color.floatToByte(n.green),p[b++]=x.Color.floatToByte(n.blue),p[b++]=x.Color.floatToByte(n.alpha);s.set(P,a),a+=P.length}}else if(l.positions=o,l.height=g,s=new Float64Array(T(l)),D.defined(t)){for(p=new Uint8Array(s.length/3*4),i=0;i<r-1;++i)a=function(d,c,e,o,y,t,r){var a=R.PolylinePipeline.numberOfPoints(d,c,y),l=e.red,i=e.green,n=e.blue,f=e.alpha,d=o.red,c=o.green,y=o.blue,u=o.alpha;if(x.Color.equals(e,o)){for(p=0;p<a;p++)t[r++]=x.Color.floatToByte(l),t[r++]=x.Color.floatToByte(i),t[r++]=x.Color.floatToByte(n),t[r++]=x.Color.floatToByte(f);return r}for(var h=(d-l)/a,C=(c-i)/a,T=(y-n)/a,g=(u-f)/a,s=r,p=0;p<a;p++)t[s++]=x.Color.floatToByte(l+p*h),t[s++]=x.Color.floatToByte(i+p*C),t[s++]=x.Color.floatToByte(n+p*T),t[s++]=x.Color.floatToByte(f+p*g);return s}(o[i],o[i+1],t[i],t[i+1],f,p,a);d=t[r-1];p[a++]=x.Color.floatToByte(d.red),p[a++]=x.Color.floatToByte(d.green),p[a++]=x.Color.floatToByte(d.blue),p[a++]=x.Color.floatToByte(d.alpha)}}else{var A=u?2*r-2:r,s=new Float64Array(3*A),p=D.defined(t)?new Uint8Array(4*A):void 0,E=0,v=0;for(i=0;i<r;++i){var k=o[i];if(u&&0<i&&(L.Cartesian3.pack(k,s,E),E+=3,n=t[i-1],p[v++]=x.Color.floatToByte(n.red),p[v++]=x.Color.floatToByte(n.green),p[v++]=x.Color.floatToByte(n.blue),p[v++]=x.Color.floatToByte(n.alpha)),u&&i===r-1)break;L.Cartesian3.pack(k,s,E),E+=3,D.defined(t)&&(n=t[i],p[v++]=x.Color.floatToByte(n.red),p[v++]=x.Color.floatToByte(n.green),p[v++]=x.Color.floatToByte(n.blue),p[v++]=x.Color.floatToByte(n.alpha))}}var c=new F.GeometryAttributes,y=(c.position=new S.GeometryAttribute({componentDatatype:N.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:s}),D.defined(t)&&(c.color=new S.GeometryAttribute({componentDatatype:N.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:4,values:p,normalize:!0})),2*((A=s.length/3)-1)),G=H.IndexDatatype.createTypedArray(A,y),w=0;for(i=0;i<A-1;++i)G[w++]=i,G[w++]=i+1;return new S.Geometry({attributes:c,indices:G,primitiveType:S.PrimitiveType.LINES,boundingSphere:U.BoundingSphere.fromPoints(o)})},function(e,o){return(e=D.defined(o)?c.unpack(e,o):e)._ellipsoid=L.Ellipsoid.clone(e._ellipsoid),c.createGeometry(e)}});
