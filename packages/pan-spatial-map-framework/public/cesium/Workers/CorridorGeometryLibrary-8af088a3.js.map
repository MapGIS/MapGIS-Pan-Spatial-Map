{"version":3,"file":"CorridorGeometryLibrary-8af088a3.js","sources":["../../../../Source/Core/CorridorGeometryLibrary.js"],"sourcesContent":["import Cartesian3 from './Cartesian3.js';\r\nimport CornerType from './CornerType.js';\r\nimport defined from './defined.js';\r\nimport CesiumMath from './Math.js';\r\nimport Matrix3 from './Matrix3.js';\r\nimport PolylinePipeline from './PolylinePipeline.js';\r\nimport PolylineVolumeGeometryLibrary from './PolylineVolumeGeometryLibrary.js';\r\nimport Quaternion from './Quaternion.js';\r\n\r\n/**\r\n * @private\r\n */\r\nvar CorridorGeometryLibrary = {};\r\n\r\nvar scratch1 = new Cartesian3();\r\nvar scratch2 = new Cartesian3();\r\nvar scratch3 = new Cartesian3();\r\nvar scratch4 = new Cartesian3();\r\n\r\nvar scaleArray2 = [new Cartesian3(), new Cartesian3()];\r\n\r\nvar cartesian1 = new Cartesian3();\r\nvar cartesian2 = new Cartesian3();\r\nvar cartesian3 = new Cartesian3();\r\nvar cartesian4 = new Cartesian3();\r\nvar cartesian5 = new Cartesian3();\r\nvar cartesian6 = new Cartesian3();\r\nvar cartesian7 = new Cartesian3();\r\nvar cartesian8 = new Cartesian3();\r\nvar cartesian9 = new Cartesian3();\r\nvar cartesian10 = new Cartesian3();\r\n\r\nvar quaterion = new Quaternion();\r\nvar rotMatrix = new Matrix3();\r\nfunction computeRoundCorner(cornerPoint, startPoint, endPoint, cornerType, leftIsOutside) {\r\n    var angle = Cartesian3.angleBetween(Cartesian3.subtract(startPoint, cornerPoint, scratch1), Cartesian3.subtract(endPoint, cornerPoint, scratch2));\r\n    var granularity = cornerType === CornerType.BEVELED ? 1 : Math.ceil(angle / CesiumMath.toRadians(5)) + 1;\r\n\r\n    var size = granularity * 3;\r\n    var array = new Array(size);\r\n\r\n    array[size - 3] = endPoint.x;\r\n    array[size - 2] = endPoint.y;\r\n    array[size - 1] = endPoint.z;\r\n\r\n    var m;\r\n    if (leftIsOutside) {\r\n        m = Matrix3.fromQuaternion(Quaternion.fromAxisAngle(Cartesian3.negate(cornerPoint, scratch1), angle / granularity, quaterion), rotMatrix);\r\n    } else {\r\n        m = Matrix3.fromQuaternion(Quaternion.fromAxisAngle(cornerPoint, angle / granularity, quaterion), rotMatrix);\r\n    }\r\n\r\n    var index = 0;\r\n    startPoint = Cartesian3.clone(startPoint, scratch1);\r\n    for (var i = 0; i < granularity; i++) {\r\n        startPoint = Matrix3.multiplyByVector(m, startPoint, startPoint);\r\n        array[index++] = startPoint.x;\r\n        array[index++] = startPoint.y;\r\n        array[index++] = startPoint.z;\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\nfunction addEndCaps(calculatedPositions) {\r\n    var cornerPoint = cartesian1;\r\n    var startPoint = cartesian2;\r\n    var endPoint = cartesian3;\r\n\r\n    var leftEdge = calculatedPositions[1];\r\n    startPoint = Cartesian3.fromArray(calculatedPositions[1], leftEdge.length - 3, startPoint);\r\n    endPoint = Cartesian3.fromArray(calculatedPositions[0], 0, endPoint);\r\n    cornerPoint = Cartesian3.midpoint(startPoint, endPoint, cornerPoint);\r\n    var firstEndCap = computeRoundCorner(cornerPoint, startPoint, endPoint, CornerType.ROUNDED, false);\r\n\r\n    var length = calculatedPositions.length - 1;\r\n    var rightEdge = calculatedPositions[length - 1];\r\n    leftEdge = calculatedPositions[length];\r\n    startPoint = Cartesian3.fromArray(rightEdge, rightEdge.length - 3, startPoint);\r\n    endPoint = Cartesian3.fromArray(leftEdge, 0, endPoint);\r\n    cornerPoint = Cartesian3.midpoint(startPoint, endPoint, cornerPoint);\r\n    var lastEndCap = computeRoundCorner(cornerPoint, startPoint, endPoint, CornerType.ROUNDED, false);\r\n\r\n    return [firstEndCap, lastEndCap];\r\n}\r\n\r\nfunction computeMiteredCorner(position, leftCornerDirection, lastPoint, leftIsOutside) {\r\n    var cornerPoint = scratch1;\r\n    if (leftIsOutside) {\r\n        cornerPoint = Cartesian3.add(position, leftCornerDirection, cornerPoint);\r\n    } else {\r\n        leftCornerDirection = Cartesian3.negate(leftCornerDirection, leftCornerDirection);\r\n        cornerPoint = Cartesian3.add(position, leftCornerDirection, cornerPoint);\r\n    }\r\n    return [cornerPoint.x, cornerPoint.y, cornerPoint.z, lastPoint.x, lastPoint.y, lastPoint.z];\r\n}\r\n\r\nfunction addShiftedPositions(positions, left, scalar, calculatedPositions) {\r\n    var rightPositions = new Array(positions.length);\r\n    var leftPositions = new Array(positions.length);\r\n    var scaledLeft = Cartesian3.multiplyByScalar(left, scalar, scratch1);\r\n    var scaledRight = Cartesian3.negate(scaledLeft, scratch2);\r\n    var rightIndex = 0;\r\n    var leftIndex = positions.length - 1;\r\n\r\n    for (var i = 0; i < positions.length; i += 3) {\r\n        var pos = Cartesian3.fromArray(positions, i, scratch3);\r\n        var rightPos = Cartesian3.add(pos, scaledRight, scratch4);\r\n        rightPositions[rightIndex++] = rightPos.x;\r\n        rightPositions[rightIndex++] = rightPos.y;\r\n        rightPositions[rightIndex++] = rightPos.z;\r\n\r\n        var leftPos = Cartesian3.add(pos, scaledLeft, scratch4);\r\n        leftPositions[leftIndex--] = leftPos.z;\r\n        leftPositions[leftIndex--] = leftPos.y;\r\n        leftPositions[leftIndex--] = leftPos.x;\r\n    }\r\n    calculatedPositions.push(rightPositions, leftPositions);\r\n\r\n    return calculatedPositions;\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nCorridorGeometryLibrary.addAttribute = function (attribute, value, front, back) {\r\n    var x = value.x;\r\n    var y = value.y;\r\n    var z = value.z;\r\n    if (defined(front)) {\r\n        attribute[front] = x;\r\n        attribute[front + 1] = y;\r\n        attribute[front + 2] = z;\r\n    }\r\n    if (defined(back)) {\r\n        attribute[back] = z;\r\n        attribute[back - 1] = y;\r\n        attribute[back - 2] = x;\r\n    }\r\n};\r\n\r\nvar scratchForwardProjection = new Cartesian3();\r\nvar scratchBackwardProjection = new Cartesian3();\r\n\r\n/**\r\n * @private\r\n */\r\nCorridorGeometryLibrary.computePositions = function (params) {\r\n    var granularity = params.granularity;\r\n    var positions = params.positions;\r\n    var ellipsoid = params.ellipsoid;\r\n    var width = params.width / 2;\r\n    var cornerType = params.cornerType;\r\n    var saveAttributes = params.saveAttributes;\r\n    var normal = cartesian1;\r\n    var forward = cartesian2;\r\n    var backward = cartesian3;\r\n    var left = cartesian4;\r\n    var cornerDirection = cartesian5;\r\n    var startPoint = cartesian6;\r\n    var previousPos = cartesian7;\r\n    var rightPos = cartesian8;\r\n    var leftPos = cartesian9;\r\n    var center = cartesian10;\r\n    var calculatedPositions = [];\r\n    var calculatedLefts = saveAttributes ? [] : undefined;\r\n    var calculatedNormals = saveAttributes ? [] : undefined;\r\n    var position = positions[0]; //add first point\r\n    var nextPosition = positions[1];\r\n\r\n    forward = Cartesian3.normalize(Cartesian3.subtract(nextPosition, position, forward), forward);\r\n    normal = ellipsoid.geodeticSurfaceNormal(position, normal);\r\n    left = Cartesian3.normalize(Cartesian3.cross(normal, forward, left), left);\r\n    if (saveAttributes) {\r\n        calculatedLefts.push(left.x, left.y, left.z);\r\n        calculatedNormals.push(normal.x, normal.y, normal.z);\r\n    }\r\n    previousPos = Cartesian3.clone(position, previousPos);\r\n    position = nextPosition;\r\n    backward = Cartesian3.negate(forward, backward);\r\n\r\n    var subdividedPositions;\r\n    var corners = [];\r\n    var i;\r\n    var length = positions.length;\r\n    for (i = 1; i < length - 1; i++) {\r\n        // add middle points and corners\r\n        normal = ellipsoid.geodeticSurfaceNormal(position, normal);\r\n        nextPosition = positions[i + 1];\r\n        forward = Cartesian3.normalize(Cartesian3.subtract(nextPosition, position, forward), forward);\r\n        cornerDirection = Cartesian3.normalize(Cartesian3.add(forward, backward, cornerDirection), cornerDirection);\r\n\r\n        var forwardProjection = Cartesian3.multiplyByScalar(normal, Cartesian3.dot(forward, normal), scratchForwardProjection);\r\n        Cartesian3.subtract(forward, forwardProjection, forwardProjection);\r\n        Cartesian3.normalize(forwardProjection, forwardProjection);\r\n\r\n        var backwardProjection = Cartesian3.multiplyByScalar(normal, Cartesian3.dot(backward, normal), scratchBackwardProjection);\r\n        Cartesian3.subtract(backward, backwardProjection, backwardProjection);\r\n        Cartesian3.normalize(backwardProjection, backwardProjection);\r\n\r\n        var doCorner = !CesiumMath.equalsEpsilon(Math.abs(Cartesian3.dot(forwardProjection, backwardProjection)), 1.0, CesiumMath.EPSILON7);\r\n\r\n        if (doCorner) {\r\n            cornerDirection = Cartesian3.cross(cornerDirection, normal, cornerDirection);\r\n            cornerDirection = Cartesian3.cross(normal, cornerDirection, cornerDirection);\r\n            cornerDirection = Cartesian3.normalize(cornerDirection, cornerDirection);\r\n            var scalar = width / Math.max(0.25, Cartesian3.magnitude(Cartesian3.cross(cornerDirection, backward, scratch1)));\r\n            var leftIsOutside = PolylineVolumeGeometryLibrary.angleIsGreaterThanPi(forward, backward, position, ellipsoid);\r\n            cornerDirection = Cartesian3.multiplyByScalar(cornerDirection, scalar, cornerDirection);\r\n            if (leftIsOutside) {\r\n                rightPos = Cartesian3.add(position, cornerDirection, rightPos);\r\n                center = Cartesian3.add(rightPos, Cartesian3.multiplyByScalar(left, width, center), center);\r\n                leftPos = Cartesian3.add(rightPos, Cartesian3.multiplyByScalar(left, width * 2, leftPos), leftPos);\r\n                scaleArray2[0] = Cartesian3.clone(previousPos, scaleArray2[0]);\r\n                scaleArray2[1] = Cartesian3.clone(center, scaleArray2[1]);\r\n                subdividedPositions = PolylinePipeline.generateArc({\r\n                    positions: scaleArray2,\r\n                    granularity: granularity,\r\n                    ellipsoid: ellipsoid\r\n                });\r\n                calculatedPositions = addShiftedPositions(subdividedPositions, left, width, calculatedPositions);\r\n                if (saveAttributes) {\r\n                    calculatedLefts.push(left.x, left.y, left.z);\r\n                    calculatedNormals.push(normal.x, normal.y, normal.z);\r\n                }\r\n                startPoint = Cartesian3.clone(leftPos, startPoint);\r\n                left = Cartesian3.normalize(Cartesian3.cross(normal, forward, left), left);\r\n                leftPos = Cartesian3.add(rightPos, Cartesian3.multiplyByScalar(left, width * 2, leftPos), leftPos);\r\n                previousPos = Cartesian3.add(rightPos, Cartesian3.multiplyByScalar(left, width, previousPos), previousPos);\r\n                if (cornerType === CornerType.ROUNDED || cornerType === CornerType.BEVELED) {\r\n                    corners.push({\r\n                        leftPositions: computeRoundCorner(rightPos, startPoint, leftPos, cornerType, leftIsOutside)\r\n                    });\r\n                } else {\r\n                    corners.push({\r\n                        leftPositions: computeMiteredCorner(position, Cartesian3.negate(cornerDirection, cornerDirection), leftPos, leftIsOutside)\r\n                    });\r\n                }\r\n            } else {\r\n                leftPos = Cartesian3.add(position, cornerDirection, leftPos);\r\n                center = Cartesian3.add(leftPos, Cartesian3.negate(Cartesian3.multiplyByScalar(left, width, center), center), center);\r\n                rightPos = Cartesian3.add(leftPos, Cartesian3.negate(Cartesian3.multiplyByScalar(left, width * 2, rightPos), rightPos), rightPos);\r\n                scaleArray2[0] = Cartesian3.clone(previousPos, scaleArray2[0]);\r\n                scaleArray2[1] = Cartesian3.clone(center, scaleArray2[1]);\r\n                subdividedPositions = PolylinePipeline.generateArc({\r\n                    positions: scaleArray2,\r\n                    granularity: granularity,\r\n                    ellipsoid: ellipsoid\r\n                });\r\n                calculatedPositions = addShiftedPositions(subdividedPositions, left, width, calculatedPositions);\r\n                if (saveAttributes) {\r\n                    calculatedLefts.push(left.x, left.y, left.z);\r\n                    calculatedNormals.push(normal.x, normal.y, normal.z);\r\n                }\r\n                startPoint = Cartesian3.clone(rightPos, startPoint);\r\n                left = Cartesian3.normalize(Cartesian3.cross(normal, forward, left), left);\r\n                rightPos = Cartesian3.add(leftPos, Cartesian3.negate(Cartesian3.multiplyByScalar(left, width * 2, rightPos), rightPos), rightPos);\r\n                previousPos = Cartesian3.add(leftPos, Cartesian3.negate(Cartesian3.multiplyByScalar(left, width, previousPos), previousPos), previousPos);\r\n                if (cornerType === CornerType.ROUNDED || cornerType === CornerType.BEVELED) {\r\n                    corners.push({\r\n                        rightPositions: computeRoundCorner(leftPos, startPoint, rightPos, cornerType, leftIsOutside)\r\n                    });\r\n                } else {\r\n                    corners.push({\r\n                        rightPositions: computeMiteredCorner(position, cornerDirection, rightPos, leftIsOutside)\r\n                    });\r\n                }\r\n            }\r\n            backward = Cartesian3.negate(forward, backward);\r\n        }\r\n        position = nextPosition;\r\n    }\r\n\r\n    normal = ellipsoid.geodeticSurfaceNormal(position, normal);\r\n    scaleArray2[0] = Cartesian3.clone(previousPos, scaleArray2[0]);\r\n    scaleArray2[1] = Cartesian3.clone(position, scaleArray2[1]);\r\n    subdividedPositions = PolylinePipeline.generateArc({\r\n        positions: scaleArray2,\r\n        granularity: granularity,\r\n        ellipsoid: ellipsoid\r\n    });\r\n    calculatedPositions = addShiftedPositions(subdividedPositions, left, width, calculatedPositions);\r\n    if (saveAttributes) {\r\n        calculatedLefts.push(left.x, left.y, left.z);\r\n        calculatedNormals.push(normal.x, normal.y, normal.z);\r\n    }\r\n\r\n    var endPositions;\r\n    if (cornerType === CornerType.ROUNDED) {\r\n        endPositions = addEndCaps(calculatedPositions);\r\n    }\r\n\r\n    return {\r\n        positions: calculatedPositions,\r\n        corners: corners,\r\n        lefts: calculatedLefts,\r\n        normals: calculatedNormals,\r\n        endPositions: endPositions\r\n    };\r\n};\r\nexport default CorridorGeometryLibrary;\r\n"],"names":["Cartesian3","Quaternion","Matrix3","CornerType","CesiumMath","defined","PolylineVolumeGeometryLibrary","PolylinePipeline"],"mappings":"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"}