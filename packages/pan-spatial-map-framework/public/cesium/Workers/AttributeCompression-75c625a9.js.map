{"version":3,"file":"AttributeCompression-75c625a9.js","sources":["../../../../Source/Core/AttributeCompression.js"],"sourcesContent":["import Cartesian2 from './Cartesian2.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Check from './Check.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport CesiumMath from './Math.js';\r\n\r\nvar RIGHT_SHIFT = 1.0 / 256.0;\r\nvar LEFT_SHIFT = 256.0;\r\n\r\n/**\r\n * Attribute compression and decompression functions.\r\n *\r\n * @namespace AttributeCompression\r\n *\r\n * @private\r\n */\r\nvar AttributeCompression = {};\r\n\r\n/**\r\n * Encodes a normalized vector into 2 SNORM values in the range of [0-rangeMax] following the 'oct' encoding.\r\n *\r\n * Oct encoding is a compact representation of unit length vectors.\r\n * The 'oct' encoding is described in \"A Survey of Efficient Representations of Independent Unit Vectors\",\r\n * Cigolle et al 2014: {@link http://jcgt.org/published/0003/02/01/}\r\n *\r\n * @param {Cartesian3} vector The normalized vector to be compressed into 2 component 'oct' encoding.\r\n * @param {Cartesian2} result The 2 component oct-encoded unit length vector.\r\n * @param {Number} rangeMax The maximum value of the SNORM range. The encoded vector is stored in log2(rangeMax+1) bits.\r\n * @returns {Cartesian2} The 2 component oct-encoded unit length vector.\r\n *\r\n * @exception {DeveloperError} vector must be normalized.\r\n *\r\n * @see AttributeCompression.octDecodeInRange\r\n */\r\nAttributeCompression.octEncodeInRange = function (vector, rangeMax, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined('vector', vector);\r\n    Check.defined('result', result);\r\n    var magSquared = Cartesian3.magnitudeSquared(vector);\r\n    if (Math.abs(magSquared - 1.0) > CesiumMath.EPSILON6) {\r\n        throw new DeveloperError('vector must be normalized.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    result.x = vector.x / (Math.abs(vector.x) + Math.abs(vector.y) + Math.abs(vector.z));\r\n    result.y = vector.y / (Math.abs(vector.x) + Math.abs(vector.y) + Math.abs(vector.z));\r\n    if (vector.z < 0) {\r\n        var x = result.x;\r\n        var y = result.y;\r\n        result.x = (1.0 - Math.abs(y)) * CesiumMath.signNotZero(x);\r\n        result.y = (1.0 - Math.abs(x)) * CesiumMath.signNotZero(y);\r\n    }\r\n\r\n    result.x = CesiumMath.toSNorm(result.x, rangeMax);\r\n    result.y = CesiumMath.toSNorm(result.y, rangeMax);\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Encodes a normalized vector into 2 SNORM values in the range of [0-255] following the 'oct' encoding.\r\n *\r\n * @param {Cartesian3} vector The normalized vector to be compressed into 2 byte 'oct' encoding.\r\n * @param {Cartesian2} result The 2 byte oct-encoded unit length vector.\r\n * @returns {Cartesian2} The 2 byte oct-encoded unit length vector.\r\n *\r\n * @exception {DeveloperError} vector must be normalized.\r\n *\r\n * @see AttributeCompression.octEncodeInRange\r\n * @see AttributeCompression.octDecode\r\n */\r\nAttributeCompression.octEncode = function (vector, result) {\r\n    return AttributeCompression.octEncodeInRange(vector, 255, result);\r\n};\r\n\r\nvar octEncodeScratch = new Cartesian2();\r\nvar uint8ForceArray = new Uint8Array(1);\r\nfunction forceUint8(value) {\r\n    uint8ForceArray[0] = value;\r\n    return uint8ForceArray[0];\r\n}\r\n/**\r\n * @param {Cartesian3} vector The normalized vector to be compressed into 4 byte 'oct' encoding.\r\n * @param {Cartesian4} result The 4 byte oct-encoded unit length vector.\r\n * @returns {Cartesian4} The 4 byte oct-encoded unit length vector.\r\n *\r\n * @exception {DeveloperError} vector must be normalized.\r\n *\r\n * @see AttributeCompression.octEncodeInRange\r\n * @see AttributeCompression.octDecodeFromCartesian4\r\n */\r\nAttributeCompression.octEncodeToCartesian4 = function (vector, result) {\r\n    AttributeCompression.octEncodeInRange(vector, 65535, octEncodeScratch);\r\n    result.x = forceUint8(octEncodeScratch.x * RIGHT_SHIFT);\r\n    result.y = forceUint8(octEncodeScratch.x);\r\n    result.z = forceUint8(octEncodeScratch.y * RIGHT_SHIFT);\r\n    result.w = forceUint8(octEncodeScratch.y);\r\n    return result;\r\n};\r\n\r\n/**\r\n * Decodes a unit-length vector in 'oct' encoding to a normalized 3-component vector.\r\n *\r\n * @param {Number} x The x component of the oct-encoded unit length vector.\r\n * @param {Number} y The y component of the oct-encoded unit length vector.\r\n * @param {Number} rangeMax The maximum value of the SNORM range. The encoded vector is stored in log2(rangeMax+1) bits.\r\n * @param {Cartesian3} result The decoded and normalized vector\r\n * @returns {Cartesian3} The decoded and normalized vector.\r\n *\r\n * @exception {DeveloperError} x and y must be unsigned normalized integers between 0 and rangeMax.\r\n *\r\n * @see AttributeCompression.octEncodeInRange\r\n */\r\nAttributeCompression.octDecodeInRange = function (x, y, rangeMax, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined('result', result);\r\n    if (x < 0 || x > rangeMax || y < 0 || y > rangeMax) {\r\n        throw new DeveloperError('x and y must be unsigned normalized integers between 0 and ' + rangeMax);\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    result.x = CesiumMath.fromSNorm(x, rangeMax);\r\n    result.y = CesiumMath.fromSNorm(y, rangeMax);\r\n    result.z = 1.0 - (Math.abs(result.x) + Math.abs(result.y));\r\n\r\n    if (result.z < 0.0) {\r\n        var oldVX = result.x;\r\n        result.x = (1.0 - Math.abs(result.y)) * CesiumMath.signNotZero(oldVX);\r\n        result.y = (1.0 - Math.abs(oldVX)) * CesiumMath.signNotZero(result.y);\r\n    }\r\n\r\n    return Cartesian3.normalize(result, result);\r\n};\r\n\r\n/**\r\n * Decodes a unit-length vector in 2 byte 'oct' encoding to a normalized 3-component vector.\r\n *\r\n * @param {Number} x The x component of the oct-encoded unit length vector.\r\n * @param {Number} y The y component of the oct-encoded unit length vector.\r\n * @param {Cartesian3} result The decoded and normalized vector.\r\n * @returns {Cartesian3} The decoded and normalized vector.\r\n *\r\n * @exception {DeveloperError} x and y must be an unsigned normalized integer between 0 and 255.\r\n *\r\n * @see AttributeCompression.octDecodeInRange\r\n */\r\nAttributeCompression.octDecode = function (x, y, result) {\r\n    return AttributeCompression.octDecodeInRange(x, y, 255, result);\r\n};\r\n\r\n/**\r\n * Decodes a unit-length vector in 4 byte 'oct' encoding to a normalized 3-component vector.\r\n *\r\n * @param {Cartesian4} encoded The oct-encoded unit length vector.\r\n * @param {Cartesian3} result The decoded and normalized vector.\r\n * @returns {Cartesian3} The decoded and normalized vector.\r\n *\r\n * @exception {DeveloperError} x, y, z, and w must be unsigned normalized integers between 0 and 255.\r\n *\r\n * @see AttributeCompression.octDecodeInRange\r\n * @see AttributeCompression.octEncodeToCartesian4\r\n */\r\nAttributeCompression.octDecodeFromCartesian4 = function (encoded, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.typeOf.object('encoded', encoded);\r\n    Check.typeOf.object('result', result);\r\n    //>>includeEnd('debug');\r\n    var x = encoded.x;\r\n    var y = encoded.y;\r\n    var z = encoded.z;\r\n    var w = encoded.w;\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (x < 0 || x > 255 || y < 0 || y > 255 || z < 0 || z > 255 || w < 0 || w > 255) {\r\n        throw new DeveloperError('x, y, z, and w must be unsigned normalized integers between 0 and 255');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var xOct16 = x * LEFT_SHIFT + y;\r\n    var yOct16 = z * LEFT_SHIFT + w;\r\n    return AttributeCompression.octDecodeInRange(xOct16, yOct16, 65535, result);\r\n};\r\n\r\n/**\r\n * Packs an oct encoded vector into a single floating-point number.\r\n *\r\n * @param {Cartesian2} encoded The oct encoded vector.\r\n * @returns {Number} The oct encoded vector packed into a single float.\r\n *\r\n */\r\nAttributeCompression.octPackFloat = function (encoded) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined('encoded', encoded);\r\n    //>>includeEnd('debug');\r\n    return 256.0 * encoded.x + encoded.y;\r\n};\r\n\r\nvar scratchEncodeCart2 = new Cartesian2();\r\n\r\n/**\r\n * Encodes a normalized vector into 2 SNORM values in the range of [0-255] following the 'oct' encoding and\r\n * stores those values in a single float-point number.\r\n *\r\n * @param {Cartesian3} vector The normalized vector to be compressed into 2 byte 'oct' encoding.\r\n * @returns {Number} The 2 byte oct-encoded unit length vector.\r\n *\r\n * @exception {DeveloperError} vector must be normalized.\r\n */\r\nAttributeCompression.octEncodeFloat = function (vector) {\r\n    AttributeCompression.octEncode(vector, scratchEncodeCart2);\r\n    return AttributeCompression.octPackFloat(scratchEncodeCart2);\r\n};\r\n\r\n/**\r\n * Decodes a unit-length vector in 'oct' encoding packed in a floating-point number to a normalized 3-component vector.\r\n *\r\n * @param {Number} value The oct-encoded unit length vector stored as a single floating-point number.\r\n * @param {Cartesian3} result The decoded and normalized vector\r\n * @returns {Cartesian3} The decoded and normalized vector.\r\n *\r\n */\r\nAttributeCompression.octDecodeFloat = function (value, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined('value', value);\r\n    //>>includeEnd('debug');\r\n\r\n    var temp = value / 256.0;\r\n    var x = Math.floor(temp);\r\n    var y = (temp - x) * 256.0;\r\n\r\n    return AttributeCompression.octDecode(x, y, result);\r\n};\r\n\r\n/**\r\n * Encodes three normalized vectors into 6 SNORM values in the range of [0-255] following the 'oct' encoding and\r\n * packs those into two floating-point numbers.\r\n *\r\n * @param {Cartesian3} v1 A normalized vector to be compressed.\r\n * @param {Cartesian3} v2 A normalized vector to be compressed.\r\n * @param {Cartesian3} v3 A normalized vector to be compressed.\r\n * @param {Cartesian2} result The 'oct' encoded vectors packed into two floating-point numbers.\r\n * @returns {Cartesian2} The 'oct' encoded vectors packed into two floating-point numbers.\r\n *\r\n */\r\nAttributeCompression.octPack = function (v1, v2, v3, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined('v1', v1);\r\n    Check.defined('v2', v2);\r\n    Check.defined('v3', v3);\r\n    Check.defined('result', result);\r\n    //>>includeEnd('debug');\r\n\r\n    var encoded1 = AttributeCompression.octEncodeFloat(v1);\r\n    var encoded2 = AttributeCompression.octEncodeFloat(v2);\r\n\r\n    var encoded3 = AttributeCompression.octEncode(v3, scratchEncodeCart2);\r\n    result.x = 65536.0 * encoded3.x + encoded1;\r\n    result.y = 65536.0 * encoded3.y + encoded2;\r\n    return result;\r\n};\r\n\r\n/**\r\n * Decodes three unit-length vectors in 'oct' encoding packed into a floating-point number to a normalized 3-component vector.\r\n *\r\n * @param {Cartesian2} packed The three oct-encoded unit length vectors stored as two floating-point number.\r\n * @param {Cartesian3} v1 One decoded and normalized vector.\r\n * @param {Cartesian3} v2 One decoded and normalized vector.\r\n * @param {Cartesian3} v3 One decoded and normalized vector.\r\n */\r\nAttributeCompression.octUnpack = function (packed, v1, v2, v3) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined('packed', packed);\r\n    Check.defined('v1', v1);\r\n    Check.defined('v2', v2);\r\n    Check.defined('v3', v3);\r\n    //>>includeEnd('debug');\r\n\r\n    var temp = packed.x / 65536.0;\r\n    var x = Math.floor(temp);\r\n    var encodedFloat1 = (temp - x) * 65536.0;\r\n\r\n    temp = packed.y / 65536.0;\r\n    var y = Math.floor(temp);\r\n    var encodedFloat2 = (temp - y) * 65536.0;\r\n\r\n    AttributeCompression.octDecodeFloat(encodedFloat1, v1);\r\n    AttributeCompression.octDecodeFloat(encodedFloat2, v2);\r\n    AttributeCompression.octDecode(x, y, v3);\r\n};\r\n\r\n/**\r\n * Pack texture coordinates into a single float. The texture coordinates will only preserve 12 bits of precision.\r\n *\r\n * @param {Cartesian2} textureCoordinates The texture coordinates to compress.  Both coordinates must be in the range 0.0-1.0.\r\n * @returns {Number} The packed texture coordinates.\r\n *\r\n */\r\nAttributeCompression.compressTextureCoordinates = function (textureCoordinates) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined('textureCoordinates', textureCoordinates);\r\n    //>>includeEnd('debug');\r\n\r\n    // Move x and y to the range 0-4095;\r\n    var x = (textureCoordinates.x * 4095.0) | 0;\r\n    var y = (textureCoordinates.y * 4095.0) | 0;\r\n    return 4096.0 * x + y;\r\n};\r\n\r\n/**\r\n * Decompresses texture coordinates that were packed into a single float.\r\n *\r\n * @param {Number} compressed The compressed texture coordinates.\r\n * @param {Cartesian2} result The decompressed texture coordinates.\r\n * @returns {Cartesian2} The modified result parameter.\r\n *\r\n */\r\nAttributeCompression.decompressTextureCoordinates = function (compressed, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined('compressed', compressed);\r\n    Check.defined('result', result);\r\n    //>>includeEnd('debug');\r\n\r\n    var temp = compressed / 4096.0;\r\n    var xZeroTo4095 = Math.floor(temp);\r\n    result.x = xZeroTo4095 / 4095.0;\r\n    result.y = (compressed - xZeroTo4095 * 4096) / 4095;\r\n    return result;\r\n};\r\n\r\nfunction zigZagDecode(value) {\r\n    return (value >> 1) ^ -(value & 1);\r\n}\r\n\r\n/**\r\n * Decodes delta and ZigZag encoded vertices. This modifies the buffers in place.\r\n *\r\n * @param {Uint16Array} uBuffer The buffer view of u values.\r\n * @param {Uint16Array} vBuffer The buffer view of v values.\r\n * @param {Uint16Array} [heightBuffer] The buffer view of height values.\r\n *\r\n * @see {@link https://github.com/CesiumGS/quantized-mesh|quantized-mesh-1.0 terrain format}\r\n */\r\nAttributeCompression.zigZagDeltaDecode = function (uBuffer, vBuffer, heightBuffer) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined('uBuffer', uBuffer);\r\n    Check.defined('vBuffer', vBuffer);\r\n    Check.typeOf.number.equals('uBuffer.length', 'vBuffer.length', uBuffer.length, vBuffer.length);\r\n    if (defined(heightBuffer)) {\r\n        Check.typeOf.number.equals('uBuffer.length', 'heightBuffer.length', uBuffer.length, heightBuffer.length);\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var count = uBuffer.length;\r\n\r\n    var u = 0;\r\n    var v = 0;\r\n    var height = 0;\r\n\r\n    for (var i = 0; i < count; ++i) {\r\n        u += zigZagDecode(uBuffer[i]);\r\n        v += zigZagDecode(vBuffer[i]);\r\n\r\n        uBuffer[i] = u;\r\n        vBuffer[i] = v;\r\n\r\n        if (defined(heightBuffer)) {\r\n            height += zigZagDecode(heightBuffer[i]);\r\n            heightBuffer[i] = height;\r\n        }\r\n    }\r\n};\r\nexport default AttributeCompression;\r\n"],"names":["Check","Cartesian3","CesiumMath","DeveloperError","Cartesian2","defined"],"mappings":"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"}