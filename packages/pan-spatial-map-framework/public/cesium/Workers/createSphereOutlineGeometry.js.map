{"version":3,"file":"createSphereOutlineGeometry.js","sources":["../../../../Source/Core/SphereOutlineGeometry.js","../../../../Source/WorkersES6/createSphereOutlineGeometry.js"],"sourcesContent":["import Cartesian3 from './Cartesian3.js';\r\nimport Check from './Check.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport EllipsoidOutlineGeometry from './EllipsoidOutlineGeometry.js';\r\n\r\n/**\r\n * A description of the outline of a sphere.\r\n *\r\n * @alias SphereOutlineGeometry\r\n * @constructor\r\n *\r\n * @param {Object} [options] Object with the following properties:\r\n * @param {Number} [options.radius=1.0] The radius of the sphere.\r\n * @param {Number} [options.stackPartitions=10] The count of stacks for the sphere (1 greater than the number of parallel lines).\r\n * @param {Number} [options.slicePartitions=8] The count of slices for the sphere (Equal to the number of radial lines).\r\n * @param {Number} [options.subdivisions=200] The number of points per line, determining the granularity of the curvature .\r\n *\r\n * @exception {DeveloperError} options.stackPartitions must be greater than or equal to one.\r\n * @exception {DeveloperError} options.slicePartitions must be greater than or equal to zero.\r\n * @exception {DeveloperError} options.subdivisions must be greater than or equal to zero.\r\n *\r\n * @example\r\n * var sphere = new Cesium.SphereOutlineGeometry({\r\n *   radius : 100.0,\r\n *   stackPartitions : 6,\r\n *   slicePartitions: 5\r\n * });\r\n * var geometry = Cesium.SphereOutlineGeometry.createGeometry(sphere);\r\n */\r\nfunction SphereOutlineGeometry(options) {\r\n    var radius = defaultValue(options.radius, 1.0);\r\n    var radii = new Cartesian3(radius, radius, radius);\r\n    var ellipsoidOptions = {\r\n        radii: radii,\r\n        stackPartitions: options.stackPartitions,\r\n        slicePartitions: options.slicePartitions,\r\n        subdivisions: options.subdivisions\r\n    };\r\n\r\n    this._ellipsoidGeometry = new EllipsoidOutlineGeometry(ellipsoidOptions);\r\n    this._workerName = 'createSphereOutlineGeometry';\r\n}\r\n\r\n/**\r\n * The number of elements used to pack the object into an array.\r\n * @type {Number}\r\n */\r\nSphereOutlineGeometry.packedLength = EllipsoidOutlineGeometry.packedLength;\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {SphereOutlineGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nSphereOutlineGeometry.pack = function (value, array, startingIndex) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.typeOf.object('value', value);\r\n    //>>includeEnd('debug');\r\n\r\n    return EllipsoidOutlineGeometry.pack(value._ellipsoidGeometry, array, startingIndex);\r\n};\r\n\r\nvar scratchEllipsoidGeometry = new EllipsoidOutlineGeometry();\r\nvar scratchOptions = {\r\n    radius: undefined,\r\n    radii: new Cartesian3(),\r\n    stackPartitions: undefined,\r\n    slicePartitions: undefined,\r\n    subdivisions: undefined\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {SphereOutlineGeometry} [result] The object into which to store the result.\r\n * @returns {SphereOutlineGeometry} The modified result parameter or a new SphereOutlineGeometry instance if one was not provided.\r\n */\r\nSphereOutlineGeometry.unpack = function (array, startingIndex, result) {\r\n    var ellipsoidGeometry = EllipsoidOutlineGeometry.unpack(array, startingIndex, scratchEllipsoidGeometry);\r\n    scratchOptions.stackPartitions = ellipsoidGeometry._stackPartitions;\r\n    scratchOptions.slicePartitions = ellipsoidGeometry._slicePartitions;\r\n    scratchOptions.subdivisions = ellipsoidGeometry._subdivisions;\r\n\r\n    if (!defined(result)) {\r\n        scratchOptions.radius = ellipsoidGeometry._radii.x;\r\n        return new SphereOutlineGeometry(scratchOptions);\r\n    }\r\n\r\n    Cartesian3.clone(ellipsoidGeometry._radii, scratchOptions.radii);\r\n    result._ellipsoidGeometry = new EllipsoidOutlineGeometry(scratchOptions);\r\n    return result;\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of an outline of a sphere, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {SphereOutlineGeometry} sphereGeometry A description of the sphere outline.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nSphereOutlineGeometry.createGeometry = function (sphereGeometry) {\r\n    return EllipsoidOutlineGeometry.createGeometry(sphereGeometry._ellipsoidGeometry);\r\n};\r\nexport default SphereOutlineGeometry;\r\n","import defined from '../Core/defined.js';\r\nimport SphereOutlineGeometry from '../Core/SphereOutlineGeometry.js';\r\n\r\nfunction createSphereOutlineGeometry(sphereGeometry, offset) {\r\n    if (defined(offset)) {\r\n        sphereGeometry = SphereOutlineGeometry.unpack(sphereGeometry, offset);\r\n    }\r\n    return SphereOutlineGeometry.createGeometry(sphereGeometry);\r\n}\r\nexport default createSphereOutlineGeometry;\r\n"],"names":["defaultValue","Cartesian3","EllipsoidOutlineGeometry","Check","defined"],"mappings":"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"}