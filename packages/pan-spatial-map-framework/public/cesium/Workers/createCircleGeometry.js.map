{"version":3,"file":"createCircleGeometry.js","sources":["../../../../Source/Core/CircleGeometry.js","../../../../Source/WorkersES6/createCircleGeometry.js"],"sourcesContent":["import Cartesian3 from './Cartesian3.js';\r\nimport Check from './Check.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport EllipseGeometry from './EllipseGeometry.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport VertexFormat from './VertexFormat.js';\r\n\r\n/**\r\n * A description of a circle on the ellipsoid. Circle geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\r\n *\r\n * @alias CircleGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3} options.center The circle's center point in the fixed frame.\r\n * @param {Number} options.radius The radius in meters.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the circle will be on.\r\n * @param {Number} [options.height=0.0] The distance in meters between the circle and the ellipsoid surface.\r\n * @param {Number} [options.granularity=0.02] The angular distance between points on the circle in radians.\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n * @param {Number} [options.extrudedHeight=0.0] The distance in meters between the circle's extruded face and the ellipsoid surface.\r\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\r\n *\r\n * @exception {DeveloperError} radius must be greater than zero.\r\n * @exception {DeveloperError} granularity must be greater than zero.\r\n *\r\n * @see CircleGeometry.createGeometry\r\n * @see Packable\r\n *\r\n * @example\r\n * // Create a circle.\r\n * var circle = new Cesium.CircleGeometry({\r\n *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\r\n *   radius : 100000.0\r\n * });\r\n * var geometry = Cesium.CircleGeometry.createGeometry(circle);\r\n */\r\nfunction CircleGeometry(options) {\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n    var radius = options.radius;\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.typeOf.number('radius', radius);\r\n    //>>includeEnd('debug');\r\n\r\n    var ellipseGeometryOptions = {\r\n        center: options.center,\r\n        semiMajorAxis: radius,\r\n        semiMinorAxis: radius,\r\n        ellipsoid: options.ellipsoid,\r\n        height: options.height,\r\n        extrudedHeight: options.extrudedHeight,\r\n        granularity: options.granularity,\r\n        vertexFormat: options.vertexFormat,\r\n        stRotation: options.stRotation,\r\n        shadowVolume: options.shadowVolume\r\n    };\r\n    this._ellipseGeometry = new EllipseGeometry(ellipseGeometryOptions);\r\n    this._workerName = 'createCircleGeometry';\r\n}\r\n\r\n/**\r\n * The number of elements used to pack the object into an array.\r\n * @type {Number}\r\n */\r\nCircleGeometry.packedLength = EllipseGeometry.packedLength;\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {CircleGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nCircleGeometry.pack = function (value, array, startingIndex) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.typeOf.object('value', value);\r\n    //>>includeEnd('debug');\r\n    return EllipseGeometry.pack(value._ellipseGeometry, array, startingIndex);\r\n};\r\n\r\nvar scratchEllipseGeometry = new EllipseGeometry({\r\n    center: new Cartesian3(),\r\n    semiMajorAxis: 1.0,\r\n    semiMinorAxis: 1.0\r\n});\r\nvar scratchOptions = {\r\n    center: new Cartesian3(),\r\n    radius: undefined,\r\n    ellipsoid: Ellipsoid.clone(Ellipsoid.UNIT_SPHERE),\r\n    height: undefined,\r\n    extrudedHeight: undefined,\r\n    granularity: undefined,\r\n    vertexFormat: new VertexFormat(),\r\n    stRotation: undefined,\r\n    semiMajorAxis: undefined,\r\n    semiMinorAxis: undefined,\r\n    shadowVolume: undefined\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {CircleGeometry} [result] The object into which to store the result.\r\n * @returns {CircleGeometry} The modified result parameter or a new CircleGeometry instance if one was not provided.\r\n */\r\nCircleGeometry.unpack = function (array, startingIndex, result) {\r\n    var ellipseGeometry = EllipseGeometry.unpack(array, startingIndex, scratchEllipseGeometry);\r\n    scratchOptions.center = Cartesian3.clone(ellipseGeometry._center, scratchOptions.center);\r\n    scratchOptions.ellipsoid = Ellipsoid.clone(ellipseGeometry._ellipsoid, scratchOptions.ellipsoid);\r\n    scratchOptions.height = ellipseGeometry._height;\r\n    scratchOptions.extrudedHeight = ellipseGeometry._extrudedHeight;\r\n    scratchOptions.granularity = ellipseGeometry._granularity;\r\n    scratchOptions.vertexFormat = VertexFormat.clone(ellipseGeometry._vertexFormat, scratchOptions.vertexFormat);\r\n    scratchOptions.stRotation = ellipseGeometry._stRotation;\r\n    scratchOptions.shadowVolume = ellipseGeometry._shadowVolume;\r\n\r\n    if (!defined(result)) {\r\n        scratchOptions.radius = ellipseGeometry._semiMajorAxis;\r\n        return new CircleGeometry(scratchOptions);\r\n    }\r\n\r\n    scratchOptions.semiMajorAxis = ellipseGeometry._semiMajorAxis;\r\n    scratchOptions.semiMinorAxis = ellipseGeometry._semiMinorAxis;\r\n    result._ellipseGeometry = new EllipseGeometry(scratchOptions);\r\n    return result;\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of a circle on an ellipsoid, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {CircleGeometry} circleGeometry A description of the circle.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nCircleGeometry.createGeometry = function (circleGeometry) {\r\n    return EllipseGeometry.createGeometry(circleGeometry._ellipseGeometry);\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nCircleGeometry.createShadowVolume = function (circleGeometry, minHeightFunc, maxHeightFunc) {\r\n    var granularity = circleGeometry._ellipseGeometry._granularity;\r\n    var ellipsoid = circleGeometry._ellipseGeometry._ellipsoid;\r\n\r\n    var minHeight = minHeightFunc(granularity, ellipsoid);\r\n    var maxHeight = maxHeightFunc(granularity, ellipsoid);\r\n\r\n    return new CircleGeometry({\r\n        center: circleGeometry._ellipseGeometry._center,\r\n        radius: circleGeometry._ellipseGeometry._semiMajorAxis,\r\n        ellipsoid: ellipsoid,\r\n        stRotation: circleGeometry._ellipseGeometry._stRotation,\r\n        granularity: granularity,\r\n        extrudedHeight: minHeight,\r\n        height: maxHeight,\r\n        vertexFormat: VertexFormat.POSITION_ONLY,\r\n        shadowVolume: true\r\n    });\r\n};\r\n\r\nObject.defineProperties(CircleGeometry.prototype, {\r\n    /**\r\n     * @private\r\n     */\r\n    rectangle: {\r\n        get: function () {\r\n            return this._ellipseGeometry.rectangle;\r\n        }\r\n    },\r\n    /**\r\n     * For remapping texture coordinates when rendering CircleGeometries as GroundPrimitives.\r\n     * @private\r\n     */\r\n    textureCoordinateRotationPoints: {\r\n        get: function () {\r\n            return this._ellipseGeometry.textureCoordinateRotationPoints;\r\n        }\r\n    }\r\n});\r\nexport default CircleGeometry;\r\n","import Cartesian3 from '../Core/Cartesian3.js';\r\nimport CircleGeometry from '../Core/CircleGeometry.js';\r\nimport defined from '../Core/defined.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\n\r\nfunction createCircleGeometry(circleGeometry, offset) {\r\n    if (defined(offset)) {\r\n        circleGeometry = CircleGeometry.unpack(circleGeometry, offset);\r\n    }\r\n    circleGeometry._ellipseGeometry._center = Cartesian3.clone(circleGeometry._ellipseGeometry._center);\r\n    circleGeometry._ellipseGeometry._ellipsoid = Ellipsoid.clone(circleGeometry._ellipseGeometry._ellipsoid);\r\n    return CircleGeometry.createGeometry(circleGeometry);\r\n}\r\nexport default createCircleGeometry;\r\n"],"names":["defaultValue","Check","EllipseGeometry","Cartesian3","Ellipsoid","VertexFormat","defined"],"mappings":"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"}