{"version":3,"file":"createCoplanarPolygonOutlineGeometry.js","sources":["../../../../Source/Core/CoplanarPolygonOutlineGeometry.js","../../../../Source/WorkersES6/createCoplanarPolygonOutlineGeometry.js"],"sourcesContent":["import arrayRemoveDuplicates from './arrayRemoveDuplicates.js';\r\nimport BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Check from './Check.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport CoplanarPolygonGeometryLibrary from './CoplanarPolygonGeometryLibrary.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport GeometryInstance from './GeometryInstance.js';\r\nimport GeometryPipeline from './GeometryPipeline.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport PolygonGeometryLibrary from './PolygonGeometryLibrary.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\n\r\nfunction createGeometryFromPositions(positions) {\r\n    var length = positions.length;\r\n    var flatPositions = new Float64Array(length * 3);\r\n    var indices = IndexDatatype.createTypedArray(length, length * 2);\r\n\r\n    var positionIndex = 0;\r\n    var index = 0;\r\n\r\n    for (var i = 0; i < length; i++) {\r\n        var position = positions[i];\r\n        flatPositions[positionIndex++] = position.x;\r\n        flatPositions[positionIndex++] = position.y;\r\n        flatPositions[positionIndex++] = position.z;\r\n\r\n        indices[index++] = i;\r\n        indices[index++] = (i + 1) % length;\r\n    }\r\n\r\n    var attributes = new GeometryAttributes({\r\n        position: new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute: 3,\r\n            values: flatPositions\r\n        })\r\n    });\r\n\r\n    return new Geometry({\r\n        attributes: attributes,\r\n        indices: indices,\r\n        primitiveType: PrimitiveType.LINES\r\n    });\r\n}\r\n\r\n/**\r\n * A description of the outline of a polygon composed of arbitrary coplanar positions.\r\n *\r\n * @alias CoplanarPolygonOutlineGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\r\n *\r\n * @see CoplanarPolygonOutlineGeometry.createGeometry\r\n *\r\n * @example\r\n * var polygonOutline = new Cesium.CoplanarPolygonOutlineGeometry({\r\n *   positions : Cesium.Cartesian3.fromDegreesArrayHeights([\r\n *      -90.0, 30.0, 0.0,\r\n *      -90.0, 30.0, 1000.0,\r\n *      -80.0, 30.0, 1000.0,\r\n *      -80.0, 30.0, 0.0\r\n *   ])\r\n * });\r\n * var geometry = Cesium.CoplanarPolygonOutlineGeometry.createGeometry(polygonOutline);\r\n */\r\nfunction CoplanarPolygonOutlineGeometry(options) {\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n    var polygonHierarchy = options.polygonHierarchy;\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined('options.polygonHierarchy', polygonHierarchy);\r\n    //>>includeEnd('debug');\r\n\r\n    this._polygonHierarchy = polygonHierarchy;\r\n    this._workerName = 'createCoplanarPolygonOutlineGeometry';\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    this.packedLength = PolygonGeometryLibrary.computeHierarchyPackedLength(polygonHierarchy) + 1;\r\n}\r\n\r\n/**\r\n * A description of a coplanar polygon outline from an array of positions.\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\r\n * @returns {CoplanarPolygonOutlineGeometry}\r\n */\r\nCoplanarPolygonOutlineGeometry.fromPositions = function (options) {\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined('options.positions', options.positions);\r\n    //>>includeEnd('debug');\r\n\r\n    var newOptions = {\r\n        polygonHierarchy: {\r\n            positions: options.positions\r\n        }\r\n    };\r\n    return new CoplanarPolygonOutlineGeometry(newOptions);\r\n};\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {CoplanarPolygonOutlineGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nCoplanarPolygonOutlineGeometry.pack = function (value, array, startingIndex) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.typeOf.object('value', value);\r\n    Check.defined('array', array);\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(value._polygonHierarchy, array, startingIndex);\r\n\r\n    array[startingIndex] = value.packedLength;\r\n\r\n    return array;\r\n};\r\n\r\nvar scratchOptions = {\r\n    polygonHierarchy: {}\r\n};\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {CoplanarPolygonOutlineGeometry} [result] The object into which to store the result.\r\n * @returns {CoplanarPolygonOutlineGeometry} The modified result parameter or a new CoplanarPolygonOutlineGeometry instance if one was not provided.\r\n */\r\nCoplanarPolygonOutlineGeometry.unpack = function (array, startingIndex, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined('array', array);\r\n    //>>includeEnd('debug');\r\n\r\n    startingIndex = defaultValue(startingIndex, 0);\r\n\r\n    var polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(array, startingIndex);\r\n    startingIndex = polygonHierarchy.startingIndex;\r\n    delete polygonHierarchy.startingIndex;\r\n    var packedLength = array[startingIndex];\r\n\r\n    if (!defined(result)) {\r\n        result = new CoplanarPolygonOutlineGeometry(scratchOptions);\r\n    }\r\n\r\n    result._polygonHierarchy = polygonHierarchy;\r\n    result.packedLength = packedLength;\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of an arbitrary coplanar polygon, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {CoplanarPolygonOutlineGeometry} polygonGeometry A description of the polygon.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nCoplanarPolygonOutlineGeometry.createGeometry = function (polygonGeometry) {\r\n    var polygonHierarchy = polygonGeometry._polygonHierarchy;\r\n\r\n    var outerPositions = polygonHierarchy.positions;\r\n    outerPositions = arrayRemoveDuplicates(outerPositions, Cartesian3.equalsEpsilon, true);\r\n    if (outerPositions.length < 3) {\r\n        return;\r\n    }\r\n    var isValid = CoplanarPolygonGeometryLibrary.validOutline(outerPositions);\r\n    if (!isValid) {\r\n        return undefined;\r\n    }\r\n\r\n    var polygons = PolygonGeometryLibrary.polygonOutlinesFromHierarchy(polygonHierarchy, false);\r\n\r\n    if (polygons.length === 0) {\r\n        return undefined;\r\n    }\r\n\r\n    var geometries = [];\r\n\r\n    for (var i = 0; i < polygons.length; i++) {\r\n        var geometryInstance = new GeometryInstance({\r\n            geometry: createGeometryFromPositions(polygons[i])\r\n        });\r\n        geometries.push(geometryInstance);\r\n    }\r\n\r\n    var geometry = GeometryPipeline.combineInstances(geometries)[0];\r\n    var boundingSphere = BoundingSphere.fromPoints(polygonHierarchy.positions);\r\n\r\n    return new Geometry({\r\n        attributes: geometry.attributes,\r\n        indices: geometry.indices,\r\n        primitiveType: geometry.primitiveType,\r\n        boundingSphere: boundingSphere\r\n    });\r\n};\r\nexport default CoplanarPolygonOutlineGeometry;\r\n","import CoplanarPolygonOutlineGeometry from '../Core/CoplanarPolygonOutlineGeometry.js';\r\nimport defined from '../Core/defined.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\n\r\nfunction createCoplanarPolygonOutlineGeometry(polygonGeometry, offset) {\r\n    if (defined(offset)) {\r\n        polygonGeometry = CoplanarPolygonOutlineGeometry.unpack(polygonGeometry, offset);\r\n    }\r\n    polygonGeometry._ellipsoid = Ellipsoid.clone(polygonGeometry._ellipsoid);\r\n    return CoplanarPolygonOutlineGeometry.createGeometry(polygonGeometry);\r\n}\r\nexport default createCoplanarPolygonOutlineGeometry;\r\n"],"names":["IndexDatatype","GeometryAttributes","GeometryAttribute","ComponentDatatype","Geometry","PrimitiveType","defaultValue","Check","PolygonGeometryLibrary","defined","arrayRemoveDuplicates","Cartesian3","CoplanarPolygonGeometryLibrary","GeometryInstance","GeometryPipeline","BoundingSphere","Ellipsoid"],"mappings":"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"}