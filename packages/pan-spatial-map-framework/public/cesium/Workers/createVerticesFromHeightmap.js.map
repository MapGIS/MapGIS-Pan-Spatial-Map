{"version":3,"file":"createVerticesFromHeightmap.js","sources":["../../../../Source/Core/HeightmapEncoding.js","../../../../Source/Core/HeightmapTessellator.js","../../../../Source/ThirdParty/LercDecode.js","../../../../Source/WorkersES6/createVerticesFromHeightmap.js"],"sourcesContent":["/**\r\n * The encoding that is used for a heightmap\r\n *\r\n * @enum {Number}\r\n */\r\nvar HeightmapEncoding = {\r\n    /**\r\n     * No encoding\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     */\r\n    NONE: 0,\r\n\r\n    /**\r\n     * LERC encoding\r\n     *\r\n     * @type {Number}\r\n     * @constant\r\n     *\r\n     * @see {@link https://github.com/Esri/lerc|The LERC specification}\r\n     */\r\n    LERC: 1\r\n};\r\nexport default Object.freeze(HeightmapEncoding);\r\n","import AxisAlignedBoundingBox from './AxisAlignedBoundingBox.js';\r\nimport BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian2 from './Cartesian2.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport EllipsoidalOccluder from './EllipsoidalOccluder.js';\r\nimport CesiumMath from './Math.js';\r\nimport Matrix4 from './Matrix4.js';\r\nimport OrientedBoundingBox from './OrientedBoundingBox.js';\r\nimport Rectangle from './Rectangle.js';\r\nimport TerrainEncoding from './TerrainEncoding.js';\r\nimport Transforms from './Transforms.js';\r\nimport WebMercatorProjection from './WebMercatorProjection.js';\r\nimport AttributeCompression from './AttributeCompression.js';\r\nimport EllipsoidTangentPlane from './EllipsoidTangentPlane.js';\r\n\r\n/**\r\n * Contains functions to create a mesh from a heightmap image.\r\n *\r\n * @namespace HeightmapTessellator\r\n *\r\n * @private\r\n */\r\nvar HeightmapTessellator = {};\r\n\r\n/**\r\n * The default structure of a heightmap, as given to {@link HeightmapTessellator.computeVertices}.\r\n *\r\n * @constant\r\n */\r\nHeightmapTessellator.DEFAULT_STRUCTURE = Object.freeze({\r\n    heightScale: 1.0,\r\n    heightOffset: 0.0,\r\n    elementsPerHeight: 1,\r\n    stride: 1,\r\n    elementMultiplier: 256.0,\r\n    isBigEndian: false\r\n});\r\n\r\nvar cartesian3Scratch = new Cartesian3();\r\nvar matrix4Scratch = new Matrix4();\r\nvar minimumScratch = new Cartesian3();\r\nvar maximumScratch = new Cartesian3();\r\nvar toPack = new Cartesian2();\r\nvar scratchNormal = new Cartesian3();\r\nvar scratchToENU = new Matrix4();\r\nvar scratchFromENU = new Matrix4();\r\n/**\r\n * Fills an array of vertices from a heightmap image.\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} options.heightmap The heightmap to tessellate.\r\n * @param {Number} options.width The width of the heightmap, in height samples.\r\n * @param {Number} options.height The height of the heightmap, in height samples.\r\n * @param {Number} options.skirtHeight The height of skirts to drape at the edges of the heightmap.\r\n * @param {Rectangle} options.nativeRectangle A rectangle in the native coordinates of the heightmap's projection.  For\r\n *                 a heightmap with a geographic projection, this is degrees.  For the web mercator\r\n *                 projection, this is meters.\r\n * @param {Number} [options.exaggeration=1.0] The scale used to exaggerate the terrain.\r\n * @param {Number} [options.exaggerationRelativeHeight=0.0] The height from which terrain is exaggerated.\r\n * @param {Rectangle} [options.rectangle] The rectangle covered by the heightmap, in geodetic coordinates with north, south, east and\r\n *                 west properties in radians.  Either rectangle or nativeRectangle must be provided.  If both\r\n *                 are provided, they're assumed to be consistent.\r\n * @param {Boolean} [options.isGeographic=true] True if the heightmap uses a {@link GeographicProjection}, or false if it uses\r\n *                  a {@link WebMercatorProjection}.\r\n * @param {Cartesian3} [options.relativeToCenter=Cartesian3.ZERO] The positions will be computed as <code>Cartesian3.subtract(worldPosition, relativeToCenter)</code>.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to which the heightmap applies.\r\n * @param {Object} [options.structure] An object describing the structure of the height data.\r\n * @param {Number} [options.structure.heightScale=1.0] The factor by which to multiply height samples in order to obtain\r\n *                 the height above the heightOffset, in meters.  The heightOffset is added to the resulting\r\n *                 height after multiplying by the scale.\r\n * @param {Number} [options.structure.heightOffset=0.0] The offset to add to the scaled height to obtain the final\r\n *                 height in meters.  The offset is added after the height sample is multiplied by the\r\n *                 heightScale.\r\n * @param {Number} [options.structure.elementsPerHeight=1] The number of elements in the buffer that make up a single height\r\n *                 sample.  This is usually 1, indicating that each element is a separate height sample.  If\r\n *                 it is greater than 1, that number of elements together form the height sample, which is\r\n *                 computed according to the structure.elementMultiplier and structure.isBigEndian properties.\r\n * @param {Number} [options.structure.stride=1] The number of elements to skip to get from the first element of\r\n *                 one height to the first element of the next height.\r\n * @param {Number} [options.structure.elementMultiplier=256.0] The multiplier used to compute the height value when the\r\n *                 stride property is greater than 1.  For example, if the stride is 4 and the strideMultiplier\r\n *                 is 256, the height is computed as follows:\r\n *                 `height = buffer[index] + buffer[index + 1] * 256 + buffer[index + 2] * 256 * 256 + buffer[index + 3] * 256 * 256 * 256`\r\n *                 This is assuming that the isBigEndian property is false.  If it is true, the order of the\r\n *                 elements is reversed.\r\n * @param {Number} [options.structure.lowestEncodedHeight] The lowest value that can be stored in the height buffer.  Any heights that are lower\r\n *                 than this value after encoding with the `heightScale` and `heightOffset` are clamped to this value.  For example, if the height\r\n *                 buffer is a `Uint16Array`, this value should be 0 because a `Uint16Array` cannot store negative numbers.  If this parameter is\r\n *                 not specified, no minimum value is enforced.\r\n * @param {Number} [options.structure.highestEncodedHeight] The highest value that can be stored in the height buffer.  Any heights that are higher\r\n *                 than this value after encoding with the `heightScale` and `heightOffset` are clamped to this value.  For example, if the height\r\n *                 buffer is a `Uint16Array`, this value should be `256 * 256 - 1` or 65535 because a `Uint16Array` cannot store numbers larger\r\n *                 than 65535.  If this parameter is not specified, no maximum value is enforced.\r\n * @param {Boolean} [options.structure.isBigEndian=false] Indicates endianness of the elements in the buffer when the\r\n *                  stride property is greater than 1.  If this property is false, the first element is the\r\n *                  low-order element.  If it is true, the first element is the high-order element.\r\n *\r\n * @example\r\n * var width = 5;\r\n * var height = 5;\r\n * var statistics = Cesium.HeightmapTessellator.computeVertices({\r\n *     heightmap : [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0],\r\n *     width : width,\r\n *     height : height,\r\n *     skirtHeight : 0.0,\r\n *     nativeRectangle : {\r\n *         west : 10.0,\r\n *         east : 20.0,\r\n *         south : 30.0,\r\n *         north : 40.0\r\n *     }\r\n * });\r\n *\r\n * var encoding = statistics.encoding;\r\n * var position = encoding.decodePosition(statistics.vertices, index);\r\n */\r\nHeightmapTessellator.computeVertices = function (options) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(options) || !defined(options.heightmap)) {\r\n        throw new DeveloperError('options.heightmap is required.');\r\n    }\r\n    if (!defined(options.width) || !defined(options.height)) {\r\n        throw new DeveloperError('options.width and options.height are required.');\r\n    }\r\n    if (!defined(options.nativeRectangle)) {\r\n        throw new DeveloperError('options.nativeRectangle is required.');\r\n    }\r\n    if (!defined(options.skirtHeight)) {\r\n        throw new DeveloperError('options.skirtHeight is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    // This function tends to be a performance hotspot for terrain rendering,\r\n    // so it employs a lot of inlining and unrolling as an optimization.\r\n    // In particular, the functionality of Ellipsoid.cartographicToCartesian\r\n    // is inlined.\r\n\r\n    var cos = Math.cos;\r\n    var sin = Math.sin;\r\n    var sqrt = Math.sqrt;\r\n    var atan = Math.atan;\r\n    var exp = Math.exp;\r\n    var piOverTwo = CesiumMath.PI_OVER_TWO;\r\n    var toRadians = CesiumMath.toRadians;\r\n\r\n    var heightmap = options.heightmap;\r\n    var width = options.width;\r\n    var height = options.height;\r\n    var skirtHeight = options.skirtHeight;\r\n    var hasSkirts = skirtHeight > 0.0;\r\n    var octEncodedNormals = defaultValue(options.octEncodedNormals, undefined);\r\n    var hasVertexNormals = defined(options.octEncodedNormals);\r\n    var repeat = defaultValue(options.repeat, new Cartesian2(1.0, 1.0));\r\n\r\n    // octEncodedNormals = options.octEncodedNormals;\r\n    var isGeographic = defaultValue(options.isGeographic, true);\r\n    var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n\r\n    var oneOverGlobeSemimajorAxis = 1.0 / ellipsoid.maximumRadius;\r\n\r\n    var nativeRectangle = Rectangle.clone(options.nativeRectangle);\r\n    var rectangle = Rectangle.clone(options.rectangle);\r\n\r\n    var geographicWest;\r\n    var geographicSouth;\r\n    var geographicEast;\r\n    var geographicNorth;\r\n\r\n    if (!defined(rectangle)) {\r\n        if (isGeographic) {\r\n            geographicWest = toRadians(nativeRectangle.west);\r\n            geographicSouth = toRadians(nativeRectangle.south);\r\n            geographicEast = toRadians(nativeRectangle.east);\r\n            geographicNorth = toRadians(nativeRectangle.north);\r\n        } else {\r\n            geographicWest = nativeRectangle.west * oneOverGlobeSemimajorAxis;\r\n            geographicSouth = piOverTwo - 2.0 * atan(exp(-nativeRectangle.south * oneOverGlobeSemimajorAxis));\r\n            geographicEast = nativeRectangle.east * oneOverGlobeSemimajorAxis;\r\n            geographicNorth = piOverTwo - 2.0 * atan(exp(-nativeRectangle.north * oneOverGlobeSemimajorAxis));\r\n        }\r\n    } else {\r\n        geographicWest = rectangle.west;\r\n        geographicSouth = rectangle.south;\r\n        geographicEast = rectangle.east;\r\n        geographicNorth = rectangle.north;\r\n    }\r\n\r\n    var relativeToCenter = options.relativeToCenter;\r\n    var hasRelativeToCenter = defined(relativeToCenter);\r\n    relativeToCenter = hasRelativeToCenter ? relativeToCenter : Cartesian3.ZERO;\r\n    var includeWebMercatorT = defaultValue(options.includeWebMercatorT, false);\r\n\r\n    var exaggeration = defaultValue(options.exaggeration, 1.0);\r\n    var exaggerationRelativeHeight = defaultValue(options.exaggerationRelativeHeight, 0.0);\r\n    var hasExaggeration = exaggeration !== 1.0;\r\n    var includeGeodeticSurfaceNormals = hasExaggeration;\r\n    //地形坡度箭头\r\n    //bywha2021.11.4\r\n    var aspectArrow = defaultValue(options.aspectArrow, false);\r\n\r\n    var structure = defaultValue(options.structure, HeightmapTessellator.DEFAULT_STRUCTURE);\r\n    var heightScale = defaultValue(structure.heightScale, HeightmapTessellator.DEFAULT_STRUCTURE.heightScale);\r\n    var heightOffset = defaultValue(structure.heightOffset, HeightmapTessellator.DEFAULT_STRUCTURE.heightOffset);\r\n    var elementsPerHeight = defaultValue(structure.elementsPerHeight, HeightmapTessellator.DEFAULT_STRUCTURE.elementsPerHeight);\r\n    var stride = defaultValue(structure.stride, HeightmapTessellator.DEFAULT_STRUCTURE.stride);\r\n    var elementMultiplier = defaultValue(structure.elementMultiplier, HeightmapTessellator.DEFAULT_STRUCTURE.elementMultiplier);\r\n    var isBigEndian = defaultValue(structure.isBigEndian, HeightmapTessellator.DEFAULT_STRUCTURE.isBigEndian);\r\n\r\n    var rectangleWidth = Rectangle.computeWidth(nativeRectangle);\r\n    var rectangleHeight = Rectangle.computeHeight(nativeRectangle);\r\n\r\n    var granularityX = rectangleWidth / (width - 1);\r\n    var granularityY = rectangleHeight / (height - 1);\r\n\r\n    if (!isGeographic) {\r\n        rectangleWidth *= oneOverGlobeSemimajorAxis;\r\n        rectangleHeight *= oneOverGlobeSemimajorAxis;\r\n    }\r\n\r\n    var radiiSquared = ellipsoid.radiiSquared;\r\n    var radiiSquaredX = radiiSquared.x;\r\n    var radiiSquaredY = radiiSquared.y;\r\n    var radiiSquaredZ = radiiSquared.z;\r\n\r\n    var minimumHeight = 65536.0;\r\n    var maximumHeight = -65536.0;\r\n\r\n    var fromENU = Transforms.eastNorthUpToFixedFrame(relativeToCenter, ellipsoid);\r\n    var toENU = Matrix4.inverseTransformation(fromENU, matrix4Scratch);\r\n\r\n    var southMercatorY;\r\n    var oneOverMercatorHeight;\r\n    if (includeWebMercatorT) {\r\n        southMercatorY = WebMercatorProjection.geodeticLatitudeToMercatorAngle(geographicSouth);\r\n        oneOverMercatorHeight = 1.0 / (WebMercatorProjection.geodeticLatitudeToMercatorAngle(geographicNorth) - southMercatorY);\r\n    }\r\n\r\n    var minimum = minimumScratch;\r\n    minimum.x = Number.POSITIVE_INFINITY;\r\n    minimum.y = Number.POSITIVE_INFINITY;\r\n    minimum.z = Number.POSITIVE_INFINITY;\r\n\r\n    var maximum = maximumScratch;\r\n    maximum.x = Number.NEGATIVE_INFINITY;\r\n    maximum.y = Number.NEGATIVE_INFINITY;\r\n    maximum.z = Number.NEGATIVE_INFINITY;\r\n\r\n    var hMin = Number.POSITIVE_INFINITY;\r\n\r\n    var gridVertexCount = width * height;\r\n    var edgeVertexCount = skirtHeight > 0.0 ? width * 2 + height * 2 : 0;\r\n    var vertexCount = gridVertexCount + edgeVertexCount;\r\n\r\n    var positions = new Array(vertexCount);\r\n    var heights = new Array(vertexCount);\r\n    var uvs = new Array(vertexCount);\r\n    var webMercatorTs = includeWebMercatorT ? new Array(vertexCount) : [];\r\n    var geodeticSurfaceNormals = includeGeodeticSurfaceNormals ? new Array(vertexCount) : [];\r\n\r\n    var startRow = 0;\r\n    var endRow = height;\r\n    var startCol = 0;\r\n    var endCol = width;\r\n\r\n    if (hasSkirts) {\r\n        --startRow;\r\n        ++endRow;\r\n        --startCol;\r\n        ++endCol;\r\n    }\r\n\r\n    var skirtOffsetPercentage = 0.00001;\r\n\r\n    for (var rowIndex = startRow; rowIndex < endRow; ++rowIndex) {\r\n        var row = rowIndex;\r\n        if (row < 0) {\r\n            row = 0;\r\n        }\r\n        if (row >= height) {\r\n            row = height - 1;\r\n        }\r\n\r\n        var latitude = nativeRectangle.north - granularityY * row;\r\n\r\n        if (!isGeographic) {\r\n            latitude = piOverTwo - 2.0 * atan(exp(-latitude * oneOverGlobeSemimajorAxis));\r\n        } else {\r\n            latitude = toRadians(latitude);\r\n        }\r\n\r\n        var v = (latitude - geographicSouth) / (geographicNorth - geographicSouth);\r\n        v = CesiumMath.clamp(v, 0.0, 1.0);\r\n\r\n        var isNorthEdge = rowIndex === startRow;\r\n        var isSouthEdge = rowIndex === endRow - 1;\r\n        if (skirtHeight > 0.0) {\r\n            if (isNorthEdge) {\r\n                latitude += skirtOffsetPercentage * rectangleHeight;\r\n            } else if (isSouthEdge) {\r\n                latitude -= skirtOffsetPercentage * rectangleHeight;\r\n            }\r\n        }\r\n\r\n        var cosLatitude = cos(latitude);\r\n        var nZ = sin(latitude);\r\n        var kZ = radiiSquaredZ * nZ;\r\n\r\n        var webMercatorT;\r\n        if (includeWebMercatorT) {\r\n            webMercatorT = (WebMercatorProjection.geodeticLatitudeToMercatorAngle(latitude) - southMercatorY) * oneOverMercatorHeight;\r\n        }\r\n\r\n        for (var colIndex = startCol; colIndex < endCol; ++colIndex) {\r\n            var col = colIndex;\r\n            if (col < 0) {\r\n                col = 0;\r\n            }\r\n            if (col >= width) {\r\n                col = width - 1;\r\n            }\r\n\r\n            var terrainOffset = row * (width * stride) + col * stride;\r\n\r\n            var heightSample;\r\n            if (elementsPerHeight === 1) {\r\n                heightSample = heightmap[terrainOffset];\r\n            } else {\r\n                heightSample = 0;\r\n\r\n                var elementOffset;\r\n                if (isBigEndian) {\r\n                    for (elementOffset = 0; elementOffset < elementsPerHeight; ++elementOffset) {\r\n                        heightSample = heightSample * elementMultiplier + heightmap[terrainOffset + elementOffset];\r\n                    }\r\n                } else {\r\n                    for (elementOffset = elementsPerHeight - 1; elementOffset >= 0; --elementOffset) {\r\n                        heightSample = heightSample * elementMultiplier + heightmap[terrainOffset + elementOffset];\r\n                    }\r\n                }\r\n            }\r\n\r\n            heightSample = heightSample * heightScale + heightOffset;\r\n\r\n            maximumHeight = Math.max(maximumHeight, heightSample);\r\n            minimumHeight = Math.min(minimumHeight, heightSample);\r\n\r\n            var longitude = nativeRectangle.west + granularityX * col;\r\n\r\n            if (!isGeographic) {\r\n                longitude = longitude * oneOverGlobeSemimajorAxis;\r\n            } else {\r\n                longitude = toRadians(longitude);\r\n            }\r\n\r\n            var u = (longitude - geographicWest) / (geographicEast - geographicWest);\r\n            u = CesiumMath.clamp(u, 0.0, 1.0);\r\n\r\n            var index = row * width + col;\r\n\r\n            if (skirtHeight > 0.0) {\r\n                var isWestEdge = colIndex === startCol;\r\n                var isEastEdge = colIndex === endCol - 1;\r\n                var isEdge = isNorthEdge || isSouthEdge || isWestEdge || isEastEdge;\r\n                var isCorner = (isNorthEdge || isSouthEdge) && (isWestEdge || isEastEdge);\r\n                if (isCorner) {\r\n                    // Don't generate skirts on the corners.\r\n                    continue;\r\n                } else if (isEdge) {\r\n                    heightSample -= skirtHeight;\r\n\r\n                    if (isWestEdge) {\r\n                        // The outer loop iterates north to south but the indices are ordered south to north, hence the index flip below\r\n                        index = gridVertexCount + (height - row - 1);\r\n                        longitude -= skirtOffsetPercentage * rectangleWidth;\r\n                    } else if (isSouthEdge) {\r\n                        // Add after west indices. South indices are ordered east to west.\r\n                        index = gridVertexCount + height + (width - col - 1);\r\n                    } else if (isEastEdge) {\r\n                        // Add after west and south indices. East indices are ordered north to south. The index is flipped like above.\r\n                        index = gridVertexCount + height + width + row;\r\n                        longitude += skirtOffsetPercentage * rectangleWidth;\r\n                    } else if (isNorthEdge) {\r\n                        // Add after west, south, and east indices. North indices are ordered west to east.\r\n                        index = gridVertexCount + height + width + height + col;\r\n                    }\r\n                }\r\n            }\r\n\r\n            var nX = cosLatitude * cos(longitude);\r\n            var nY = cosLatitude * sin(longitude);\r\n\r\n            var kX = radiiSquaredX * nX;\r\n            var kY = radiiSquaredY * nY;\r\n\r\n            var gamma = sqrt(kX * nX + kY * nY + kZ * nZ);\r\n            var oneOverGamma = 1.0 / gamma;\r\n\r\n            var rSurfaceX = kX * oneOverGamma;\r\n            var rSurfaceY = kY * oneOverGamma;\r\n            var rSurfaceZ = kZ * oneOverGamma;\r\n\r\n            var position = new Cartesian3();\r\n            position.x = rSurfaceX + nX * heightSample;\r\n            position.y = rSurfaceY + nY * heightSample;\r\n            position.z = rSurfaceZ + nZ * heightSample;\r\n\r\n            Matrix4.multiplyByPoint(toENU, position, cartesian3Scratch);\r\n            Cartesian3.minimumByComponent(cartesian3Scratch, minimum, minimum);\r\n            Cartesian3.maximumByComponent(cartesian3Scratch, maximum, maximum);\r\n            hMin = Math.min(hMin, heightSample);\r\n\r\n            positions[index] = position;\r\n            uvs[index] = new Cartesian2(u, v);\r\n            heights[index] = heightSample;\r\n\r\n            if (includeWebMercatorT) {\r\n                webMercatorTs[index] = webMercatorT;\r\n            }\r\n\r\n            if (includeGeodeticSurfaceNormals) {\r\n                geodeticSurfaceNormals[index] = ellipsoid.geodeticSurfaceNormal(position);\r\n            }\r\n        }\r\n    }\r\n\r\n    var boundingSphere3D = BoundingSphere.fromPoints(positions);\r\n    var orientedBoundingBox;\r\n    if (defined(rectangle)) {\r\n        orientedBoundingBox = OrientedBoundingBox.fromRectangle(rectangle, minimumHeight, maximumHeight, ellipsoid);\r\n    }\r\n\r\n    var occludeePointInScaledSpace;\r\n    if (hasRelativeToCenter) {\r\n        var occluder = new EllipsoidalOccluder(ellipsoid);\r\n        occludeePointInScaledSpace = occluder.computeHorizonCullingPointPossiblyUnderEllipsoid(relativeToCenter, positions, minimumHeight);\r\n    }\r\n\r\n    var aaBox = new AxisAlignedBoundingBox(minimum, maximum, relativeToCenter);\r\n    var encoding = new TerrainEncoding(\r\n        relativeToCenter,\r\n        aaBox,\r\n        hMin,\r\n        maximumHeight,\r\n        fromENU,\r\n        hasVertexNormals,\r\n        includeWebMercatorT,\r\n        includeGeodeticSurfaceNormals,\r\n        exaggeration,\r\n        exaggerationRelativeHeight\r\n    );\r\n    var vertices = new Float32Array(vertexCount * encoding.stride);\r\n\r\n    var bufferIndex = 0;\r\n\r\n    var array_normals = [];\r\n    for (var l = 0; l < repeat.x * repeat.y; l++) {\r\n        var car3 = new Cartesian3();\r\n        array_normals.push(car3);\r\n    }\r\n    for (var j = 0; j < vertexCount; ++j) {\r\n        if (hasVertexNormals) {\r\n            if (j < gridVertexCount) {\r\n                var n = j * 2.0;\r\n                toPack.x = octEncodedNormals[n];\r\n                toPack.y = octEncodedNormals[n + 1];\r\n                if (aspectArrow) {\r\n                    var y = uvs[j].y;\r\n                    var x = uvs[j].x;\r\n                    x = Math.floor(x * repeat.x);\r\n                    y = Math.floor(y * repeat.y);\r\n                    var scratchNormal_t = new Cartesian3();\r\n                    AttributeCompression.octDecode(toPack.x, toPack.y, scratchNormal_t);\r\n                    var index_asp = parseInt(y * repeat.x + x);\r\n                    if (index_asp < repeat.x * repeat.y) {\r\n                        Cartesian3.add(scratchNormal_t, array_normals[index_asp], array_normals[index_asp]);\r\n                    }\r\n                }\r\n                if (exaggeration !== 1.0) {\r\n                    var normal = AttributeCompression.AttributeCompression.octDecode(toPack.x, toPack.y, scratchNormal);\r\n                    var fromENUNormal = Transforms.Transforms.eastNorthUpToFixedFrame(positions[j], ellipsoid, scratchFromENU);\r\n                    var toENUNormal = Transforms.Matrix4.inverseTransformation(fromENUNormal, scratchToENU);\r\n\r\n                    Transforms.Matrix4.multiplyByPointAsVector(toENUNormal, normal, normal);\r\n                    normal.z *= exaggeration;\r\n                    Cartesian3.normalize(normal, normal);\r\n\r\n                    Transforms.Matrix4.multiplyByPointAsVector(fromENUNormal, normal, normal);\r\n                    Cartesian3.normalize(normal, normal);\r\n\r\n                    AttributeCompression.AttributeCompression.octEncode(normal, toPack);\r\n                }\r\n            }\r\n            bufferIndex = encoding.encode(vertices, bufferIndex, positions[j], uvs[j], heights[j], toPack, webMercatorTs[j], geodeticSurfaceNormals[j]);\r\n        } else {\r\n            bufferIndex = encoding.encode(vertices, bufferIndex, positions[j], uvs[j], heights[j], undefined, webMercatorTs[j], geodeticSurfaceNormals[j]);\r\n        }\r\n    }\r\n    var aspectArry = [];\r\n    if (hasVertexNormals && aspectArrow) {\r\n        for (var i = 0; i < repeat.y; i++) {\r\n            for (var k = 0; k < repeat.x; k++) {\r\n                var ind = parseInt(i * repeat.x + k);\r\n                var ground_normal = array_normals[ind];\r\n                var magnitude = Cartesian3.magnitude(ground_normal);\r\n                if (magnitude < 1e-10) {\r\n                    aspectArry.push(0);\r\n                    continue;\r\n                }\r\n                Cartesian3.normalize(ground_normal, ground_normal);\r\n                var globe_normal = new Cartesian3();\r\n                var inde = parseInt(vertexCount / 2);\r\n                var tangent_plane = new EllipsoidTangentPlane(positions[inde]);\r\n                Cartesian3.cross(tangent_plane.xAxis, tangent_plane.yAxis, globe_normal);\r\n                Cartesian3.normalize(globe_normal, globe_normal); // This is probably already unit-length. // Project our ground normal onto the tangent plane.\r\n                var rejected_ground_normal = new Cartesian3();\r\n                var dot = Cartesian3.dot(ground_normal, globe_normal);\r\n                Cartesian3.multiplyByScalar(globe_normal, dot, rejected_ground_normal);\r\n                var projected_ground_normal = new Cartesian3();\r\n                Cartesian3.subtract(ground_normal, rejected_ground_normal, projected_ground_normal); // Now since the y-axis of the tangent plane is always north, and the x-axis east, we can // calculate our aspect by seeing where the projected ground normal points in the tangent space.\r\n\r\n                var aspect = Cartesian3.angleBetween(projected_ground_normal, tangent_plane.xAxis);\r\n                var cross = new Cartesian3();\r\n                Cartesian3.cross(tangent_plane.xAxis, projected_ground_normal, cross);\r\n                var determ = Cartesian3.dot(cross, globe_normal);\r\n                if (determ < 0.0) {\r\n                    aspect = 2.0 * Math.PI - aspect;\r\n                }\r\n                // var aspect = Math.PI/4*(k+i*3);\r\n                aspectArry.push(aspect);\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        vertices: vertices,\r\n        maximumHeight: maximumHeight,\r\n        minimumHeight: minimumHeight,\r\n        encoding: encoding,\r\n        boundingSphere3D: boundingSphere3D,\r\n        orientedBoundingBox: orientedBoundingBox,\r\n        occludeePointInScaledSpace: occludeePointInScaledSpace,\r\n        aspect: aspectArry,\r\n        repeat: repeat\r\n    };\r\n};\r\nexport default HeightmapTessellator;\r\n","/* jshint forin: false, bitwise: false */\r\n/*\r\nCopyright 2015-2018 Esri\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\nhttp://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\nA copy of the license and additional notices are located with the\r\nsource distribution at:\r\n\r\nhttp://github.com/Esri/lerc/\r\n\r\nContributors:  Johannes Schmid, (LERC v1)\r\n               Chayanika Khatua, (LERC v1)\r\n               Wenxue Ju (LERC v1, v2.x)\r\n*/\r\n\r\n/* Copyright 2015-2018 Esri. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 @preserve */\r\n\r\nvar tmp = {};\r\n\r\n/**\r\n * a module for decoding LERC blobs\r\n * @module Lerc\r\n */\r\n(function() {\r\n  //the original LercDecode for Version 1\r\n  var LercDecode = (function() {\r\n\r\n    // WARNING: This decoder version can only read old version 1 Lerc blobs. Use with caution.\r\n\r\n    // Note: currently, this module only has an implementation for decoding LERC data, not encoding. The name of\r\n    // the class was chosen to be future proof.\r\n\r\n    var CntZImage = {};\r\n\r\n    CntZImage.defaultNoDataValue = -3.4027999387901484e+38; // smallest Float32 value\r\n\r\n    /**\r\n     * Decode a LERC byte stream and return an object containing the pixel data and some required and optional\r\n     * information about it, such as the image's width and height.\r\n     *\r\n     * @param {ArrayBuffer} input The LERC input byte stream\r\n     * @param {object} [options] Decoding options, containing any of the following properties:\r\n     * @config {number} [inputOffset = 0]\r\n     *        Skip the first inputOffset bytes of the input byte stream. A valid LERC file is expected at that position.\r\n     * @config {Uint8Array} [encodedMask = null]\r\n     *        If specified, the decoder will not read mask information from the input and use the specified encoded\r\n     *        mask data instead. Mask header/data must not be present in the LERC byte stream in this case.\r\n     * @config {number} [noDataValue = LercCode.defaultNoDataValue]\r\n     *        Pixel value to use for masked pixels.\r\n     * @config {ArrayBufferView|Array} [pixelType = Float32Array]\r\n     *        The desired type of the pixelData array in the return value. Note that it is the caller's responsibility to\r\n     *        provide an appropriate noDataValue if the default pixelType is overridden.\r\n     * @config {boolean} [returnMask = false]\r\n     *        If true, the return value will contain a maskData property of type Uint8Array which has one element per\r\n     *        pixel, the value of which is 1 or 0 depending on whether that pixel's data is present or masked. If the\r\n     *        input LERC data does not contain a mask, maskData will not be returned.\r\n     * @config {boolean} [returnEncodedMask = false]\r\n     *        If true, the return value will contain a encodedMaskData property, which can be passed into encode() as\r\n     *        encodedMask.\r\n     * @config {boolean} [returnFileInfo = false]\r\n     *        If true, the return value will have a fileInfo property that contains metadata obtained from the\r\n     *        LERC headers and the decoding process.\r\n     * @config {boolean} [computeUsedBitDepths = false]\r\n     *        If true, the fileInfo property in the return value will contain the set of all block bit depths\r\n     *        encountered during decoding. Will only have an effect if returnFileInfo option is true.\r\n     * @returns {{width, height, pixelData, minValue, maxValue, noDataValue, maskData, encodedMaskData, fileInfo}}\r\n     */\r\n    CntZImage.decode = function(input, options) {\r\n      options = options || {};\r\n\r\n      var skipMask = options.encodedMaskData || (options.encodedMaskData === null);\r\n      var parsedData = parse(input, options.inputOffset || 0, skipMask);\r\n\r\n      var noDataValue = (options.noDataValue !== null) ? options.noDataValue : CntZImage.defaultNoDataValue;\r\n\r\n      var uncompressedData = uncompressPixelValues(parsedData, options.pixelType || Float32Array,\r\n        options.encodedMaskData, noDataValue, options.returnMask);\r\n\r\n      var result = {\r\n        width: parsedData.width,\r\n        height: parsedData.height,\r\n        pixelData: uncompressedData.resultPixels,\r\n        minValue: uncompressedData.minValue,\r\n        maxValue: parsedData.pixels.maxValue,\r\n        noDataValue: noDataValue\r\n      };\r\n\r\n      if (uncompressedData.resultMask) {\r\n        result.maskData = uncompressedData.resultMask;\r\n      }\r\n\r\n      if (options.returnEncodedMask && parsedData.mask) {\r\n        result.encodedMaskData = parsedData.mask.bitset ? parsedData.mask.bitset : null;\r\n      }\r\n\r\n      if (options.returnFileInfo) {\r\n        result.fileInfo = formatFileInfo(parsedData);\r\n        if (options.computeUsedBitDepths) {\r\n          result.fileInfo.bitDepths = computeUsedBitDepths(parsedData);\r\n        }\r\n      }\r\n\r\n      return result;\r\n    };\r\n\r\n    var uncompressPixelValues = function(data, TypedArrayClass, maskBitset, noDataValue, storeDecodedMask) {\r\n      var blockIdx = 0;\r\n      var numX = data.pixels.numBlocksX;\r\n      var numY = data.pixels.numBlocksY;\r\n      var blockWidth = Math.floor(data.width / numX);\r\n      var blockHeight = Math.floor(data.height / numY);\r\n      var scale = 2 * data.maxZError;\r\n      var minValue = Number.MAX_VALUE, currentValue;\r\n      maskBitset = maskBitset || ((data.mask) ? data.mask.bitset : null);\r\n\r\n      var resultPixels, resultMask;\r\n      resultPixels = new TypedArrayClass(data.width * data.height);\r\n      if (storeDecodedMask && maskBitset) {\r\n        resultMask = new Uint8Array(data.width * data.height);\r\n      }\r\n      var blockDataBuffer = new Float32Array(blockWidth * blockHeight);\r\n\r\n      var xx, yy;\r\n      for (var y = 0; y <= numY; y++) {\r\n        var thisBlockHeight = (y !== numY) ? blockHeight : (data.height % numY);\r\n        if (thisBlockHeight === 0) {\r\n          continue;\r\n        }\r\n        for (var x = 0; x <= numX; x++) {\r\n          var thisBlockWidth = (x !== numX) ? blockWidth : (data.width % numX);\r\n          if (thisBlockWidth === 0) {\r\n            continue;\r\n          }\r\n\r\n          var outPtr = y * data.width * blockHeight + x * blockWidth;\r\n          var outStride = data.width - thisBlockWidth;\r\n\r\n          var block = data.pixels.blocks[blockIdx];\r\n\r\n          var blockData, blockPtr, constValue;\r\n          if (block.encoding < 2) {\r\n            // block is either uncompressed or bit-stuffed (encodings 0 and 1)\r\n            if (block.encoding === 0) {\r\n              // block is uncompressed\r\n              blockData = block.rawData;\r\n            } else {\r\n              // block is bit-stuffed\r\n              unstuff(block.stuffedData, block.bitsPerPixel, block.numValidPixels, block.offset, scale, blockDataBuffer, data.pixels.maxValue);\r\n              blockData = blockDataBuffer;\r\n            }\r\n            blockPtr = 0;\r\n          }\r\n          else if (block.encoding === 2) {\r\n            // block is all 0\r\n            constValue = 0;\r\n          }\r\n          else {\r\n            // block has constant value (encoding === 3)\r\n            constValue = block.offset;\r\n          }\r\n\r\n          var maskByte;\r\n          if (maskBitset) {\r\n            for (yy = 0; yy < thisBlockHeight; yy++) {\r\n              if (outPtr & 7) {\r\n                //\r\n                maskByte = maskBitset[outPtr >> 3];\r\n                maskByte <<= outPtr & 7;\r\n              }\r\n              for (xx = 0; xx < thisBlockWidth; xx++) {\r\n                if (!(outPtr & 7)) {\r\n                  // read next byte from mask\r\n                  maskByte = maskBitset[outPtr >> 3];\r\n                }\r\n                if (maskByte & 128) {\r\n                  // pixel data present\r\n                  if (resultMask) {\r\n                    resultMask[outPtr] = 1;\r\n                  }\r\n                  currentValue = (block.encoding < 2) ? blockData[blockPtr++] : constValue;\r\n                  minValue = minValue > currentValue ? currentValue : minValue;\r\n                  resultPixels[outPtr++] = currentValue;\r\n                } else {\r\n                  // pixel data not present\r\n                  if (resultMask) {\r\n                    resultMask[outPtr] = 0;\r\n                  }\r\n                  resultPixels[outPtr++] = noDataValue;\r\n                }\r\n                maskByte <<= 1;\r\n              }\r\n              outPtr += outStride;\r\n            }\r\n          } else {\r\n            // mask not present, simply copy block over\r\n            if (block.encoding < 2) {\r\n              // duplicating this code block for performance reasons\r\n              // blockData case:\r\n              for (yy = 0; yy < thisBlockHeight; yy++) {\r\n                for (xx = 0; xx < thisBlockWidth; xx++) {\r\n                  currentValue = blockData[blockPtr++];\r\n                  minValue = minValue > currentValue ? currentValue : minValue;\r\n                  resultPixels[outPtr++] = currentValue;\r\n                }\r\n                outPtr += outStride;\r\n              }\r\n            }\r\n            else {\r\n              // constValue case:\r\n              minValue = minValue > constValue ? constValue : minValue;\r\n              for (yy = 0; yy < thisBlockHeight; yy++) {\r\n                for (xx = 0; xx < thisBlockWidth; xx++) {\r\n                  resultPixels[outPtr++] = constValue;\r\n                }\r\n                outPtr += outStride;\r\n              }\r\n            }\r\n          }\r\n          if ((block.encoding === 1) && (blockPtr !== block.numValidPixels)) {\r\n            throw \"Block and Mask do not match\";\r\n          }\r\n          blockIdx++;\r\n        }\r\n      }\r\n\r\n      return {\r\n        resultPixels: resultPixels,\r\n        resultMask: resultMask,\r\n        minValue: minValue\r\n      };\r\n    };\r\n\r\n    var formatFileInfo = function(data) {\r\n      return {\r\n        \"fileIdentifierString\": data.fileIdentifierString,\r\n        \"fileVersion\": data.fileVersion,\r\n        \"imageType\": data.imageType,\r\n        \"height\": data.height,\r\n        \"width\": data.width,\r\n        \"maxZError\": data.maxZError,\r\n        \"eofOffset\": data.eofOffset,\r\n        \"mask\": data.mask ? {\r\n          \"numBlocksX\": data.mask.numBlocksX,\r\n          \"numBlocksY\": data.mask.numBlocksY,\r\n          \"numBytes\": data.mask.numBytes,\r\n          \"maxValue\": data.mask.maxValue\r\n        } : null,\r\n        \"pixels\": {\r\n          \"numBlocksX\": data.pixels.numBlocksX,\r\n          \"numBlocksY\": data.pixels.numBlocksY,\r\n          \"numBytes\": data.pixels.numBytes,\r\n          \"maxValue\": data.pixels.maxValue,\r\n          \"noDataValue\": data.noDataValue\r\n        }\r\n      };\r\n    };\r\n\r\n    var computeUsedBitDepths = function(data) {\r\n      var numBlocks = data.pixels.numBlocksX * data.pixels.numBlocksY;\r\n      var bitDepths = {};\r\n      for (var i = 0; i < numBlocks; i++) {\r\n        var block = data.pixels.blocks[i];\r\n        if (block.encoding === 0) {\r\n          bitDepths.float32 = true;\r\n        } else if (block.encoding === 1) {\r\n          bitDepths[block.bitsPerPixel] = true;\r\n        } else {\r\n          bitDepths[0] = true;\r\n        }\r\n      }\r\n\r\n      return Object.keys(bitDepths);\r\n    };\r\n\r\n    var parse = function(input, fp, skipMask) {\r\n      var data = {};\r\n\r\n      // File header\r\n      var fileIdView = new Uint8Array(input, fp, 10);\r\n      data.fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\r\n      if (data.fileIdentifierString.trim() !== \"CntZImage\") {\r\n        throw \"Unexpected file identifier string: \" + data.fileIdentifierString;\r\n      }\r\n      fp += 10;\r\n      var view = new DataView(input, fp, 24);\r\n      data.fileVersion = view.getInt32(0, true);\r\n      data.imageType = view.getInt32(4, true);\r\n      data.height = view.getUint32(8, true);\r\n      data.width = view.getUint32(12, true);\r\n      data.maxZError = view.getFloat64(16, true);\r\n      fp += 24;\r\n\r\n      // Mask Header\r\n      if (!skipMask) {\r\n        view = new DataView(input, fp, 16);\r\n        data.mask = {};\r\n        data.mask.numBlocksY = view.getUint32(0, true);\r\n        data.mask.numBlocksX = view.getUint32(4, true);\r\n        data.mask.numBytes = view.getUint32(8, true);\r\n        data.mask.maxValue = view.getFloat32(12, true);\r\n        fp += 16;\r\n\r\n        // Mask Data\r\n        if (data.mask.numBytes > 0) {\r\n          var bitset = new Uint8Array(Math.ceil(data.width * data.height / 8));\r\n          view = new DataView(input, fp, data.mask.numBytes);\r\n          var cnt = view.getInt16(0, true);\r\n          var ip = 2, op = 0;\r\n          do {\r\n            if (cnt > 0) {\r\n              while (cnt--) { bitset[op++] = view.getUint8(ip++); }\r\n            } else {\r\n              var val = view.getUint8(ip++);\r\n              cnt = -cnt;\r\n              while (cnt--) { bitset[op++] = val; }\r\n            }\r\n            cnt = view.getInt16(ip, true);\r\n            ip += 2;\r\n          } while (ip < data.mask.numBytes);\r\n          if ((cnt !== -32768) || (op < bitset.length)) {\r\n            throw \"Unexpected end of mask RLE encoding\";\r\n          }\r\n          data.mask.bitset = bitset;\r\n          fp += data.mask.numBytes;\r\n        }\r\n        else if ((data.mask.numBytes | data.mask.numBlocksY | data.mask.maxValue) === 0) {  // Special case, all nodata\r\n          data.mask.bitset = new Uint8Array(Math.ceil(data.width * data.height / 8));\r\n        }\r\n      }\r\n\r\n      // Pixel Header\r\n      view = new DataView(input, fp, 16);\r\n      data.pixels = {};\r\n      data.pixels.numBlocksY = view.getUint32(0, true);\r\n      data.pixels.numBlocksX = view.getUint32(4, true);\r\n      data.pixels.numBytes = view.getUint32(8, true);\r\n      data.pixels.maxValue = view.getFloat32(12, true);\r\n      fp += 16;\r\n\r\n      var numBlocksX = data.pixels.numBlocksX;\r\n      var numBlocksY = data.pixels.numBlocksY;\r\n      // the number of blocks specified in the header does not take into account the blocks at the end of\r\n      // each row/column with a special width/height that make the image complete in case the width is not\r\n      // evenly divisible by the number of blocks.\r\n      var actualNumBlocksX = numBlocksX + ((data.width % numBlocksX) > 0 ? 1 : 0);\r\n      var actualNumBlocksY = numBlocksY + ((data.height % numBlocksY) > 0 ? 1 : 0);\r\n      data.pixels.blocks = new Array(actualNumBlocksX * actualNumBlocksY);\r\n      var blockI = 0;\r\n      for (var blockY = 0; blockY < actualNumBlocksY; blockY++) {\r\n        for (var blockX = 0; blockX < actualNumBlocksX; blockX++) {\r\n\r\n          // Block\r\n          var size = 0;\r\n          var bytesLeft = input.byteLength - fp;\r\n          view = new DataView(input, fp, Math.min(10, bytesLeft));\r\n          var block = {};\r\n          data.pixels.blocks[blockI++] = block;\r\n          var headerByte = view.getUint8(0); size++;\r\n          block.encoding = headerByte & 63;\r\n          if (block.encoding > 3) {\r\n            throw \"Invalid block encoding (\" + block.encoding + \")\";\r\n          }\r\n          if (block.encoding === 2) {\r\n            fp++;\r\n            continue;\r\n          }\r\n          if ((headerByte !== 0) && (headerByte !== 2)) {\r\n            headerByte >>= 6;\r\n            block.offsetType = headerByte;\r\n            if (headerByte === 2) {\r\n              block.offset = view.getInt8(1); size++;\r\n            } else if (headerByte === 1) {\r\n              block.offset = view.getInt16(1, true); size += 2;\r\n            } else if (headerByte === 0) {\r\n              block.offset = view.getFloat32(1, true); size += 4;\r\n            } else {\r\n              throw \"Invalid block offset type\";\r\n            }\r\n\r\n            if (block.encoding === 1) {\r\n              headerByte = view.getUint8(size); size++;\r\n              block.bitsPerPixel = headerByte & 63;\r\n              headerByte >>= 6;\r\n              block.numValidPixelsType = headerByte;\r\n              if (headerByte === 2) {\r\n                block.numValidPixels = view.getUint8(size); size++;\r\n              } else if (headerByte === 1) {\r\n                block.numValidPixels = view.getUint16(size, true); size += 2;\r\n              } else if (headerByte === 0) {\r\n                block.numValidPixels = view.getUint32(size, true); size += 4;\r\n              } else {\r\n                throw \"Invalid valid pixel count type\";\r\n              }\r\n            }\r\n          }\r\n          fp += size;\r\n\r\n          if (block.encoding === 3) {\r\n            continue;\r\n          }\r\n\r\n          var arrayBuf, store8;\r\n          if (block.encoding === 0) {\r\n            var numPixels = (data.pixels.numBytes - 1) / 4;\r\n            if (numPixels !== Math.floor(numPixels)) {\r\n              throw \"uncompressed block has invalid length\";\r\n            }\r\n            arrayBuf = new ArrayBuffer(numPixels * 4);\r\n            store8 = new Uint8Array(arrayBuf);\r\n            store8.set(new Uint8Array(input, fp, numPixels * 4));\r\n            var rawData = new Float32Array(arrayBuf);\r\n            block.rawData = rawData;\r\n            fp += numPixels * 4;\r\n          } else if (block.encoding === 1) {\r\n            var dataBytes = Math.ceil(block.numValidPixels * block.bitsPerPixel / 8);\r\n            var dataWords = Math.ceil(dataBytes / 4);\r\n            arrayBuf = new ArrayBuffer(dataWords * 4);\r\n            store8 = new Uint8Array(arrayBuf);\r\n            store8.set(new Uint8Array(input, fp, dataBytes));\r\n            block.stuffedData = new Uint32Array(arrayBuf);\r\n            fp += dataBytes;\r\n          }\r\n        }\r\n      }\r\n      data.eofOffset = fp;\r\n      return data;\r\n    };\r\n\r\n    var unstuff = function(src, bitsPerPixel, numPixels, offset, scale, dest, maxValue) {\r\n      var bitMask = (1 << bitsPerPixel) - 1;\r\n      var i = 0, o;\r\n      var bitsLeft = 0;\r\n      var n, buffer;\r\n      var nmax = Math.ceil((maxValue - offset) / scale);\r\n      // get rid of trailing bytes that are already part of next block\r\n      var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\r\n      src[src.length - 1] <<= 8 * numInvalidTailBytes;\r\n\r\n      for (o = 0; o < numPixels; o++) {\r\n        if (bitsLeft === 0) {\r\n          buffer = src[i++];\r\n          bitsLeft = 32;\r\n        }\r\n        if (bitsLeft >= bitsPerPixel) {\r\n          n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\r\n          bitsLeft -= bitsPerPixel;\r\n        } else {\r\n          var missingBits = (bitsPerPixel - bitsLeft);\r\n          n = ((buffer & bitMask) << missingBits) & bitMask;\r\n          buffer = src[i++];\r\n          bitsLeft = 32 - missingBits;\r\n          n += (buffer >>> bitsLeft);\r\n        }\r\n        //pixel values may exceed max due to quantization\r\n        dest[o] = n < nmax ? offset + n * scale : maxValue;\r\n      }\r\n      return dest;\r\n    };\r\n\r\n    return CntZImage;\r\n  })();\r\n\r\n  //version 2. Supports 2.1, 2.2, 2.3\r\n  var Lerc2Decode = (function() {\r\n    \"use strict\";\r\n    // Note: currently, this module only has an implementation for decoding LERC data, not encoding. The name of\r\n    // the class was chosen to be future proof, following LercDecode.\r\n\r\n    /*****************************************\r\n    * private static class bitsutffer used by Lerc2Decode\r\n    *******************************************/\r\n    var BitStuffer = {\r\n      //methods ending with 2 are for the new byte order used by Lerc2.3 and above.\r\n      //originalUnstuff is used to unpack Huffman code table. code is duplicated to unstuffx for performance reasons.\r\n      unstuff: function(src, dest, bitsPerPixel, numPixels, lutArr, offset, scale, maxValue) {\r\n        var bitMask = (1 << bitsPerPixel) - 1;\r\n        var i = 0, o;\r\n        var bitsLeft = 0;\r\n        var n, buffer, missingBits, nmax;\r\n\r\n        // get rid of trailing bytes that are already part of next block\r\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\r\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\r\n        if (lutArr) {\r\n          for (o = 0; o < numPixels; o++) {\r\n            if (bitsLeft === 0) {\r\n              buffer = src[i++];\r\n              bitsLeft = 32;\r\n            }\r\n            if (bitsLeft >= bitsPerPixel) {\r\n              n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\r\n              bitsLeft -= bitsPerPixel;\r\n            }\r\n            else {\r\n              missingBits = (bitsPerPixel - bitsLeft);\r\n              n = ((buffer & bitMask) << missingBits) & bitMask;\r\n              buffer = src[i++];\r\n              bitsLeft = 32 - missingBits;\r\n              n += (buffer >>> bitsLeft);\r\n            }\r\n            dest[o] = lutArr[n];//offset + lutArr[n] * scale;\r\n          }\r\n        }\r\n        else {\r\n          nmax = Math.ceil((maxValue - offset) / scale);\r\n          for (o = 0; o < numPixels; o++) {\r\n            if (bitsLeft === 0) {\r\n              buffer = src[i++];\r\n              bitsLeft = 32;\r\n            }\r\n            if (bitsLeft >= bitsPerPixel) {\r\n              n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\r\n              bitsLeft -= bitsPerPixel;\r\n            }\r\n            else {\r\n              missingBits = (bitsPerPixel - bitsLeft);\r\n              n = ((buffer & bitMask) << missingBits) & bitMask;\r\n              buffer = src[i++];\r\n              bitsLeft = 32 - missingBits;\r\n              n += (buffer >>> bitsLeft);\r\n            }\r\n            //pixel values may exceed max due to quantization\r\n            dest[o] = n < nmax ? offset + n * scale : maxValue;\r\n          }\r\n        }\r\n      },\r\n\r\n      unstuffLUT: function(src, bitsPerPixel, numPixels, offset, scale, maxValue) {\r\n        var bitMask = (1 << bitsPerPixel) - 1;\r\n        var i = 0, o = 0, missingBits = 0, bitsLeft = 0, n = 0;\r\n        var buffer;\r\n        var dest = [];\r\n\r\n        // get rid of trailing bytes that are already part of next block\r\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\r\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\r\n\r\n        var nmax = Math.ceil((maxValue - offset) / scale);\r\n        for (o = 0; o < numPixels; o++) {\r\n          if (bitsLeft === 0) {\r\n            buffer = src[i++];\r\n            bitsLeft = 32;\r\n          }\r\n          if (bitsLeft >= bitsPerPixel) {\r\n            n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\r\n            bitsLeft -= bitsPerPixel;\r\n          } else {\r\n            missingBits = (bitsPerPixel - bitsLeft);\r\n            n = ((buffer & bitMask) << missingBits) & bitMask;\r\n            buffer = src[i++];\r\n            bitsLeft = 32 - missingBits;\r\n            n += (buffer >>> bitsLeft);\r\n          }\r\n          //dest.push(n);\r\n          dest[o] = n < nmax ? offset + n * scale : maxValue;\r\n        }\r\n        dest.unshift(offset);//1st one\r\n        return dest;\r\n      },\r\n\r\n      unstuff2: function(src, dest, bitsPerPixel, numPixels, lutArr, offset, scale, maxValue) {\r\n        var bitMask = (1 << bitsPerPixel) - 1;\r\n        var i = 0, o;\r\n        var bitsLeft = 0, bitPos = 0;\r\n        var n, buffer, missingBits;\r\n        if (lutArr) {\r\n          for (o = 0; o < numPixels; o++) {\r\n            if (bitsLeft === 0) {\r\n              buffer = src[i++];\r\n              bitsLeft = 32;\r\n              bitPos = 0;\r\n            }\r\n            if (bitsLeft >= bitsPerPixel) {\r\n              n = ((buffer >>> bitPos) & bitMask);\r\n              bitsLeft -= bitsPerPixel;\r\n              bitPos += bitsPerPixel;\r\n            } else {\r\n              missingBits = (bitsPerPixel - bitsLeft);\r\n              n = (buffer >>> bitPos) & bitMask;\r\n              buffer = src[i++];\r\n              bitsLeft = 32 - missingBits;\r\n              n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\r\n              bitPos = missingBits;\r\n            }\r\n            dest[o] = lutArr[n];\r\n          }\r\n        }\r\n        else {\r\n          var nmax = Math.ceil((maxValue - offset) / scale);\r\n          for (o = 0; o < numPixels; o++) {\r\n            if (bitsLeft === 0) {\r\n              buffer = src[i++];\r\n              bitsLeft = 32;\r\n              bitPos = 0;\r\n            }\r\n            if (bitsLeft >= bitsPerPixel) {\r\n              //no unsigned left shift\r\n              n = ((buffer >>> bitPos) & bitMask);\r\n              bitsLeft -= bitsPerPixel;\r\n              bitPos += bitsPerPixel;\r\n            } else {\r\n              missingBits = (bitsPerPixel - bitsLeft);\r\n              n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\r\n              buffer = src[i++];\r\n              bitsLeft = 32 - missingBits;\r\n              n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\r\n              bitPos = missingBits;\r\n            }\r\n            //pixel values may exceed max due to quantization\r\n            dest[o] = n < nmax ? offset + n * scale : maxValue;\r\n          }\r\n        }\r\n        return dest;\r\n      },\r\n\r\n      unstuffLUT2: function(src, bitsPerPixel, numPixels, offset, scale, maxValue) {\r\n        var bitMask = (1 << bitsPerPixel) - 1;\r\n        var i = 0, o = 0, missingBits = 0, bitsLeft = 0, n = 0, bitPos = 0;\r\n        var buffer;\r\n        var dest = [];\r\n        var nmax = Math.ceil((maxValue - offset) / scale);\r\n        for (o = 0; o < numPixels; o++) {\r\n          if (bitsLeft === 0) {\r\n            buffer = src[i++];\r\n            bitsLeft = 32;\r\n            bitPos = 0;\r\n          }\r\n          if (bitsLeft >= bitsPerPixel) {\r\n            //no unsigned left shift\r\n            n = ((buffer >>> bitPos) & bitMask);\r\n            bitsLeft -= bitsPerPixel;\r\n            bitPos += bitsPerPixel;\r\n          } else {\r\n            missingBits = (bitsPerPixel - bitsLeft);\r\n            n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\r\n            buffer = src[i++];\r\n            bitsLeft = 32 - missingBits;\r\n            n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\r\n            bitPos = missingBits;\r\n          }\r\n          //dest.push(n);\r\n          dest[o] = n < nmax ? offset + n * scale : maxValue;\r\n        }\r\n        dest.unshift(offset);\r\n        return dest;\r\n      },\r\n\r\n      originalUnstuff: function(src, dest, bitsPerPixel, numPixels) {\r\n        var bitMask = (1 << bitsPerPixel) - 1;\r\n        var i = 0, o;\r\n        var bitsLeft = 0;\r\n        var n, buffer, missingBits;\r\n\r\n        // get rid of trailing bytes that are already part of next block\r\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\r\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\r\n\r\n        for (o = 0; o < numPixels; o++) {\r\n          if (bitsLeft === 0) {\r\n            buffer = src[i++];\r\n            bitsLeft = 32;\r\n          }\r\n          if (bitsLeft >= bitsPerPixel) {\r\n            n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\r\n            bitsLeft -= bitsPerPixel;\r\n          }\r\n          else {\r\n            missingBits = (bitsPerPixel - bitsLeft);\r\n            n = ((buffer & bitMask) << missingBits) & bitMask;\r\n            buffer = src[i++];\r\n            bitsLeft = 32 - missingBits;\r\n            n += (buffer >>> bitsLeft);\r\n          }\r\n          dest[o] = n;\r\n        }\r\n        return dest;\r\n      },\r\n\r\n      originalUnstuff2: function(src, dest, bitsPerPixel, numPixels) {\r\n        var bitMask = (1 << bitsPerPixel) - 1;\r\n        var i = 0, o;\r\n        var bitsLeft = 0, bitPos = 0;\r\n        var n, buffer, missingBits;\r\n        //micro-optimizations\r\n        for (o = 0; o < numPixels; o++) {\r\n          if (bitsLeft === 0) {\r\n            buffer = src[i++];\r\n            bitsLeft = 32;\r\n            bitPos = 0;\r\n          }\r\n          if (bitsLeft >= bitsPerPixel) {\r\n            //no unsigned left shift\r\n            n = ((buffer >>> bitPos) & bitMask);\r\n            bitsLeft -= bitsPerPixel;\r\n            bitPos += bitsPerPixel;\r\n          } else {\r\n            missingBits = (bitsPerPixel - bitsLeft);\r\n            n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\r\n            buffer = src[i++];\r\n            bitsLeft = 32 - missingBits;\r\n            n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\r\n            bitPos = missingBits;\r\n          }\r\n          dest[o] = n;\r\n        }\r\n        return dest;\r\n      }\r\n    };\r\n\r\n    /*****************************************\r\n    *private static class used by Lerc2Decode\r\n    ******************************************/\r\n    var Lerc2Helpers = {\r\n      HUFFMAN_LUT_BITS_MAX: 12, //use 2^12 lut, treat it like constant\r\n      computeChecksumFletcher32: function(input) {\r\n\r\n        var sum1 = 0xffff, sum2 = 0xffff;\r\n        var len = input.length;\r\n        var words = Math.floor(len / 2);\r\n        var i = 0;\r\n        while (words) {\r\n          var tlen = (words >= 359) ? 359 : words;\r\n          words -= tlen;\r\n          do {\r\n            sum1 += (input[i++] << 8);\r\n            sum2 += sum1 += input[i++];\r\n          } while (--tlen);\r\n\r\n          sum1 = (sum1 & 0xffff) + (sum1 >>> 16);\r\n          sum2 = (sum2 & 0xffff) + (sum2 >>> 16);\r\n        }\r\n\r\n        // add the straggler byte if it exists\r\n        if (len & 1) {\r\n          sum2 += sum1 += (input[i] << 8);\r\n        }\r\n        // second reduction step to reduce sums to 16 bits\r\n        sum1 = (sum1 & 0xffff) + (sum1 >>> 16);\r\n        sum2 = (sum2 & 0xffff) + (sum2 >>> 16);\r\n\r\n        return (sum2 << 16 | sum1) >>> 0;\r\n      },\r\n\r\n      readHeaderInfo: function(input, data) {\r\n        var ptr = data.ptr;\r\n        var fileIdView = new Uint8Array(input, ptr, 6);\r\n        var headerInfo = {};\r\n        headerInfo.fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\r\n        if (headerInfo.fileIdentifierString.lastIndexOf(\"Lerc2\", 0) !== 0) {\r\n          throw \"Unexpected file identifier string (expect Lerc2 ): \" + headerInfo.fileIdentifierString;\r\n        }\r\n        ptr += 6;\r\n        var view = new DataView(input, ptr, 8);\r\n        var fileVersion = view.getInt32(0, true);\r\n        headerInfo.fileVersion = fileVersion;\r\n        ptr += 4;\r\n        if (fileVersion >= 3) {\r\n          headerInfo.checksum = view.getUint32(4, true); //nrows\r\n          ptr += 4;\r\n        }\r\n\r\n        //keys start from here\r\n        view = new DataView(input, ptr, 12);\r\n        headerInfo.height = view.getUint32(0, true); //nrows\r\n        headerInfo.width = view.getUint32(4, true); //ncols\r\n        ptr += 8;\r\n        if (fileVersion >= 4) {\r\n          headerInfo.numDims = view.getUint32(8, true);\r\n          ptr += 4;\r\n        }\r\n        else {\r\n          headerInfo.numDims = 1;\r\n        }\r\n\r\n        view = new DataView(input, ptr, 40);\r\n        headerInfo.numValidPixel = view.getUint32(0, true);\r\n        headerInfo.microBlockSize = view.getInt32(4, true);\r\n        headerInfo.blobSize = view.getInt32(8, true);\r\n        headerInfo.imageType = view.getInt32(12, true);\r\n\r\n        headerInfo.maxZError = view.getFloat64(16, true);\r\n        headerInfo.zMin = view.getFloat64(24, true);\r\n        headerInfo.zMax = view.getFloat64(32, true);\r\n        ptr += 40;\r\n        data.headerInfo = headerInfo;\r\n        data.ptr = ptr;\r\n\r\n        var checksum, keyLength;\r\n        if (fileVersion >= 3) {\r\n          keyLength = fileVersion >= 4 ? 52 : 48;\r\n          checksum = this.computeChecksumFletcher32(new Uint8Array(input, ptr - keyLength, headerInfo.blobSize - 14));\r\n          if (checksum !== headerInfo.checksum) {\r\n            throw \"Checksum failed.\";\r\n          }\r\n        }\r\n        return true;\r\n      },\r\n\r\n      checkMinMaxRanges: function(input, data) {\r\n        var headerInfo = data.headerInfo;\r\n        var OutPixelTypeArray = this.getDataTypeArray(headerInfo.imageType);\r\n        var rangeBytes = headerInfo.numDims * this.getDataTypeSize(headerInfo.imageType);\r\n        var minValues = this.readSubArray(input, data.ptr, OutPixelTypeArray, rangeBytes);\r\n        var maxValues = this.readSubArray(input, data.ptr + rangeBytes, OutPixelTypeArray, rangeBytes);\r\n        data.ptr += (2 * rangeBytes);\r\n        var i, equal = true;\r\n        for (i = 0; i < headerInfo.numDims; i++) {\r\n          if (minValues[i] !== maxValues[i]) {\r\n            equal = false;\r\n            break;\r\n          }\r\n        }\r\n        headerInfo.minValues = minValues;\r\n        headerInfo.maxValues = maxValues;\r\n        return equal;\r\n      },\r\n\r\n      readSubArray: function(input, ptr, OutPixelTypeArray, numBytes) {\r\n        var rawData;\r\n        if (OutPixelTypeArray === Uint8Array) {\r\n          rawData = new Uint8Array(input, ptr, numBytes);\r\n        }\r\n        else {\r\n          var arrayBuf = new ArrayBuffer(numBytes);\r\n          var store8 = new Uint8Array(arrayBuf);\r\n          store8.set(new Uint8Array(input, ptr, numBytes));\r\n          rawData = new OutPixelTypeArray(arrayBuf);\r\n        }\r\n        return rawData;\r\n      },\r\n\r\n      readMask: function(input, data) {\r\n        var ptr = data.ptr;\r\n        var headerInfo = data.headerInfo;\r\n        var numPixels = headerInfo.width * headerInfo.height;\r\n        var numValidPixel = headerInfo.numValidPixel;\r\n\r\n        var view = new DataView(input, ptr, 4);\r\n        var mask = {};\r\n        mask.numBytes = view.getUint32(0, true);\r\n        ptr += 4;\r\n\r\n        // Mask Data\r\n        if ((0 === numValidPixel || numPixels === numValidPixel) && 0 !== mask.numBytes) {\r\n          throw (\"invalid mask\");\r\n        }\r\n        var bitset, resultMask;\r\n        if (numValidPixel === 0) {\r\n          bitset = new Uint8Array(Math.ceil(numPixels / 8));\r\n          mask.bitset = bitset;\r\n          resultMask = new Uint8Array(numPixels);\r\n          data.pixels.resultMask = resultMask;\r\n          ptr += mask.numBytes;\r\n        }// ????? else if (data.mask.numBytes > 0 && data.mask.numBytes< data.numValidPixel) {\r\n        else if (mask.numBytes > 0) {\r\n          bitset = new Uint8Array(Math.ceil(numPixels / 8));\r\n          view = new DataView(input, ptr, mask.numBytes);\r\n          var cnt = view.getInt16(0, true);\r\n          var ip = 2, op = 0, val = 0;\r\n          do {\r\n            if (cnt > 0) {\r\n              while (cnt--) { bitset[op++] = view.getUint8(ip++); }\r\n            } else {\r\n              val = view.getUint8(ip++);\r\n              cnt = -cnt;\r\n              while (cnt--) { bitset[op++] = val; }\r\n            }\r\n            cnt = view.getInt16(ip, true);\r\n            ip += 2;\r\n          } while (ip < mask.numBytes);\r\n          if ((cnt !== -32768) || (op < bitset.length)) {\r\n            throw \"Unexpected end of mask RLE encoding\";\r\n          }\r\n\r\n          resultMask = new Uint8Array(numPixels);\r\n          var mb = 0, k = 0;\r\n\r\n          for (k = 0; k < numPixels; k++) {\r\n            if (k & 7) {\r\n              mb = bitset[k >> 3];\r\n              mb <<= k & 7;\r\n            }\r\n            else {\r\n              mb = bitset[k >> 3];\r\n            }\r\n            if (mb & 128) {\r\n              resultMask[k] = 1;\r\n            }\r\n          }\r\n          data.pixels.resultMask = resultMask;\r\n\r\n          mask.bitset = bitset;\r\n          ptr += mask.numBytes;\r\n        }\r\n        data.ptr = ptr;\r\n        data.mask = mask;\r\n        return true;\r\n      },\r\n\r\n      readDataOneSweep: function(input, data, OutPixelTypeArray) {\r\n        var ptr = data.ptr;\r\n        var headerInfo = data.headerInfo;\r\n        var numDims = headerInfo.numDims;\r\n        var numPixels = headerInfo.width * headerInfo.height;\r\n        var imageType = headerInfo.imageType;\r\n        var numBytes = headerInfo.numValidPixel * Lerc2Helpers.getDataTypeSize(imageType) * numDims;\r\n        //data.pixels.numBytes = numBytes;\r\n        var rawData;\r\n        var mask = data.pixels.resultMask;\r\n        if (OutPixelTypeArray === Uint8Array) {\r\n          rawData = new Uint8Array(input, ptr, numBytes);\r\n        }\r\n        else {\r\n          var arrayBuf = new ArrayBuffer(numBytes);\r\n          var store8 = new Uint8Array(arrayBuf);\r\n          store8.set(new Uint8Array(input, ptr, numBytes));\r\n          rawData = new OutPixelTypeArray(arrayBuf);\r\n        }\r\n        if (rawData.length === numPixels * numDims) {\r\n          data.pixels.resultPixels = rawData;\r\n        }\r\n        else  //mask\r\n        {\r\n          data.pixels.resultPixels = new OutPixelTypeArray(numPixels * numDims);\r\n          var z = 0, k = 0, i = 0, nStart = 0;\r\n          if (numDims > 1) {\r\n            for (i=0; i < numDims; i++) {\r\n              nStart = i * numPixels;\r\n              for (k = 0; k < numPixels; k++) {\r\n                if (mask[k]) {\r\n                  data.pixels.resultPixels[nStart + k] = rawData[z++];\r\n                }\r\n              }\r\n            }\r\n          }\r\n          else {\r\n            for (k = 0; k < numPixels; k++) {\r\n              if (mask[k]) {\r\n                data.pixels.resultPixels[k] = rawData[z++];\r\n              }\r\n            }\r\n          }\r\n        }\r\n        ptr += numBytes;\r\n        data.ptr = ptr;       //return data;\r\n        return true;\r\n      },\r\n\r\n      readHuffmanTree: function(input, data) {\r\n        var BITS_MAX = this.HUFFMAN_LUT_BITS_MAX; //8 is slow for the large test image\r\n        //var size_max = 1 << BITS_MAX;\r\n        /* ************************\r\n         * reading code table\r\n         *************************/\r\n        var view = new DataView(input, data.ptr, 16);\r\n        data.ptr += 16;\r\n        var version = view.getInt32(0, true);\r\n        if (version < 2) {\r\n          throw \"unsupported Huffman version\";\r\n        }\r\n        var size = view.getInt32(4, true);\r\n        var i0 = view.getInt32(8, true);\r\n        var i1 = view.getInt32(12, true);\r\n        if (i0 >= i1) {\r\n          return false;\r\n        }\r\n        var blockDataBuffer = new Uint32Array(i1 - i0);\r\n        Lerc2Helpers.decodeBits(input, data, blockDataBuffer);\r\n        var codeTable = []; //size\r\n        var i, j, k, len;\r\n\r\n        for (i = i0; i < i1; i++) {\r\n          j = i - (i < size ? 0 : size);//wrap around\r\n          codeTable[j] = { first: blockDataBuffer[i - i0], second: null };\r\n        }\r\n\r\n        var dataBytes = input.byteLength - data.ptr;\r\n        var dataWords = Math.ceil(dataBytes / 4);\r\n        var arrayBuf = new ArrayBuffer(dataWords * 4);\r\n        var store8 = new Uint8Array(arrayBuf);\r\n        store8.set(new Uint8Array(input, data.ptr, dataBytes));\r\n        var stuffedData = new Uint32Array(arrayBuf); //must start from x*4\r\n        var bitPos = 0, word, srcPtr = 0;\r\n        word = stuffedData[0];\r\n        for (i = i0; i < i1; i++) {\r\n          j = i - (i < size ? 0 : size);//wrap around\r\n          len = codeTable[j].first;\r\n          if (len > 0) {\r\n            codeTable[j].second = (word << bitPos) >>> (32 - len);\r\n\r\n            if (32 - bitPos >= len) {\r\n              bitPos += len;\r\n              if (bitPos === 32) {\r\n                bitPos = 0;\r\n                srcPtr++;\r\n                word = stuffedData[srcPtr];\r\n              }\r\n            }\r\n            else {\r\n              bitPos += len - 32;\r\n              srcPtr++;\r\n              word = stuffedData[srcPtr];\r\n              codeTable[j].second |= word >>> (32 - bitPos);\r\n            }\r\n          }\r\n        }\r\n\r\n        //finished reading code table\r\n\r\n        /* ************************\r\n         * building lut\r\n         *************************/\r\n        var numBitsLUT = 0, numBitsLUTQick = 0;\r\n        var tree = new TreeNode();\r\n        for (i = 0; i < codeTable.length; i++) {\r\n          if (codeTable[i] !== undefined) {\r\n            numBitsLUT = Math.max(numBitsLUT, codeTable[i].first);\r\n          }\r\n        }\r\n        if (numBitsLUT >= BITS_MAX) {\r\n          numBitsLUTQick = BITS_MAX;\r\n        }\r\n        else {\r\n          numBitsLUTQick = numBitsLUT;\r\n        }\r\n        if (numBitsLUT >= 30) {\r\n          console.log(\"WARning, large NUM LUT BITS IS \" + numBitsLUT);\r\n        }\r\n        var decodeLut = [], entry, code, numEntries, jj, currentBit, node;\r\n        for (i = i0; i < i1; i++) {\r\n          j = i - (i < size ? 0 : size);//wrap around\r\n          len = codeTable[j].first;\r\n          if (len > 0) {\r\n            entry = [len, j];\r\n            if (len <= numBitsLUTQick) {\r\n              code = codeTable[j].second << (numBitsLUTQick - len);\r\n              numEntries = 1 << (numBitsLUTQick - len);\r\n              for (k = 0; k < numEntries; k++) {\r\n                decodeLut[code | k] = entry;\r\n              }\r\n            }\r\n            else {\r\n              //build tree\r\n              code = codeTable[j].second;\r\n              node = tree;\r\n              for (jj = len - 1; jj >= 0; jj--) {\r\n                currentBit = code >>> jj & 1; //no left shift as length could be 30,31\r\n                if (currentBit) {\r\n                  if (!node.right) {\r\n                    node.right = new TreeNode();\r\n                  }\r\n                  node = node.right;\r\n                }\r\n                else {\r\n                  if (!node.left) {\r\n                    node.left = new TreeNode();\r\n                  }\r\n                  node = node.left;\r\n                }\r\n                if (jj === 0 && !node.val) {\r\n                  node.val = entry[1];\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        return {\r\n          decodeLut: decodeLut,\r\n          numBitsLUTQick: numBitsLUTQick,\r\n          numBitsLUT: numBitsLUT,\r\n          tree: tree,\r\n          stuffedData: stuffedData,\r\n          srcPtr: srcPtr,\r\n          bitPos: bitPos\r\n        };\r\n      },\r\n\r\n      readHuffman: function(input, data, OutPixelTypeArray) {\r\n        var headerInfo = data.headerInfo;\r\n        var numDims = headerInfo.numDims;\r\n        var height = data.headerInfo.height;\r\n        var width = data.headerInfo.width;\r\n        var numPixels = width * height;\r\n        //var size_max = 1 << BITS_MAX;\r\n        /* ************************\r\n         * reading huffman structure info\r\n         *************************/\r\n        var huffmanInfo = this.readHuffmanTree(input, data);\r\n        var decodeLut = huffmanInfo.decodeLut;\r\n        var tree = huffmanInfo.tree;\r\n        //stuffedData includes huffman headers\r\n        var stuffedData = huffmanInfo.stuffedData;\r\n        var srcPtr = huffmanInfo.srcPtr;\r\n        var bitPos = huffmanInfo.bitPos;\r\n        var numBitsLUTQick = huffmanInfo.numBitsLUTQick;\r\n        var numBitsLUT = huffmanInfo.numBitsLUT;\r\n        var offset = data.headerInfo.imageType === 0 ? 128 : 0;\r\n        /*************************\r\n        *  decode\r\n        ***************************/\r\n        var node, val, delta, mask = data.pixels.resultMask, valTmp, valTmpQuick, currentBit;\r\n        var i, j, k, ii;\r\n        var prevVal = 0;\r\n        if (bitPos > 0) {\r\n          srcPtr++;\r\n          bitPos = 0;\r\n        }\r\n        var word = stuffedData[srcPtr];\r\n        var deltaEncode = data.encodeMode === 1;\r\n        var resultPixelsAllDim = new OutPixelTypeArray(numPixels * numDims);\r\n        var resultPixels = resultPixelsAllDim;\r\n        var iDim;\r\n        for (iDim = 0; iDim < headerInfo.numDims; iDim++) {\r\n          if (numDims > 1) {\r\n            //get the mem block of current dimension\r\n            resultPixels = new OutPixelTypeArray(resultPixelsAllDim.buffer, numPixels * iDim, numPixels);\r\n            prevVal = 0;\r\n          }\r\n          if (data.headerInfo.numValidPixel === width * height) { //all valid\r\n            for (k = 0, i = 0; i < height; i++) {\r\n              for (j = 0; j < width; j++, k++) {\r\n                val = 0;\r\n                valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\r\n                valTmpQuick = valTmp;// >>> deltaBits;\r\n                if (32 - bitPos < numBitsLUTQick) {\r\n                  valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\r\n                  valTmpQuick = valTmp;// >>> deltaBits;\r\n                }\r\n                if (decodeLut[valTmpQuick])    // if there, move the correct number of bits and done\r\n                {\r\n                  val = decodeLut[valTmpQuick][1];\r\n                  bitPos += decodeLut[valTmpQuick][0];\r\n                }\r\n                else {\r\n                  valTmp = (word << bitPos) >>> (32 - numBitsLUT);\r\n                  valTmpQuick = valTmp;// >>> deltaBits;\r\n                  if (32 - bitPos < numBitsLUT) {\r\n                    valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\r\n                    valTmpQuick = valTmp;// >>> deltaBits;\r\n                  }\r\n                  node = tree;\r\n                  for (ii = 0; ii < numBitsLUT; ii++) {\r\n                    currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\r\n                    node = currentBit ? node.right : node.left;\r\n                    if (!(node.left || node.right)) {\r\n                      val = node.val;\r\n                      bitPos = bitPos + ii + 1;\r\n                      break;\r\n                    }\r\n                  }\r\n                }\r\n\r\n                if (bitPos >= 32) {\r\n                  bitPos -= 32;\r\n                  srcPtr++;\r\n                  word = stuffedData[srcPtr];\r\n                }\r\n\r\n                delta = val - offset;\r\n                if (deltaEncode) {\r\n                  if (j > 0) {\r\n                    delta += prevVal;    // use overflow\r\n                  }\r\n                  else if (i > 0) {\r\n                    delta += resultPixels[k - width];\r\n                  }\r\n                  else {\r\n                    delta += prevVal;\r\n                  }\r\n                  delta &= 0xFF; //overflow\r\n                  resultPixels[k] = delta;//overflow\r\n                  prevVal = delta;\r\n                }\r\n                else {\r\n                  resultPixels[k] = delta;\r\n                }\r\n              }\r\n            }\r\n          }\r\n          else { //not all valid, use mask\r\n            for (k = 0, i = 0; i < height; i++) {\r\n              for (j = 0; j < width; j++, k++) {\r\n                if (mask[k]) {\r\n                  val = 0;\r\n                  valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\r\n                  valTmpQuick = valTmp;// >>> deltaBits;\r\n                  if (32 - bitPos < numBitsLUTQick) {\r\n                    valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\r\n                    valTmpQuick = valTmp;// >>> deltaBits;\r\n                  }\r\n                  if (decodeLut[valTmpQuick])    // if there, move the correct number of bits and done\r\n                  {\r\n                    val = decodeLut[valTmpQuick][1];\r\n                    bitPos += decodeLut[valTmpQuick][0];\r\n                  }\r\n                  else {\r\n                    valTmp = (word << bitPos) >>> (32 - numBitsLUT);\r\n                    valTmpQuick = valTmp;// >>> deltaBits;\r\n                    if (32 - bitPos < numBitsLUT) {\r\n                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\r\n                      valTmpQuick = valTmp;// >>> deltaBits;\r\n                    }\r\n                    node = tree;\r\n                    for (ii = 0; ii < numBitsLUT; ii++) {\r\n                      currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\r\n                      node = currentBit ? node.right : node.left;\r\n                      if (!(node.left || node.right)) {\r\n                        val = node.val;\r\n                        bitPos = bitPos + ii + 1;\r\n                        break;\r\n                      }\r\n                    }\r\n                  }\r\n\r\n                  if (bitPos >= 32) {\r\n                    bitPos -= 32;\r\n                    srcPtr++;\r\n                    word = stuffedData[srcPtr];\r\n                  }\r\n\r\n                  delta = val - offset;\r\n                  if (deltaEncode) {\r\n                    if (j > 0 && mask[k - 1]) {\r\n                      delta += prevVal;    // use overflow\r\n                    }\r\n                    else if (i > 0 && mask[k - width]) {\r\n                      delta += resultPixels[k - width];\r\n                    }\r\n                    else {\r\n                      delta += prevVal;\r\n                    }\r\n\r\n                    delta &= 0xFF; //overflow\r\n                    resultPixels[k] = delta;//overflow\r\n                    prevVal = delta;\r\n                  }\r\n                  else {\r\n                    resultPixels[k] = delta;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          data.ptr = data.ptr + (srcPtr + 1) * 4 + (bitPos > 0 ? 4 : 0);\r\n        }\r\n        data.pixels.resultPixels = resultPixelsAllDim;\r\n      },\r\n\r\n      decodeBits: function(input, data, blockDataBuffer, offset, iDim) {\r\n        {\r\n          //bitstuff encoding is 3\r\n          var headerInfo = data.headerInfo;\r\n          var fileVersion = headerInfo.fileVersion;\r\n          //var block = {};\r\n          var blockPtr = 0;\r\n          var viewByteLength = ((input.byteLength - data.ptr) >= 5) ? 5 : (input.byteLength - data.ptr);\r\n          var view = new DataView(input, data.ptr, viewByteLength);\r\n          var headerByte = view.getUint8(0);\r\n          blockPtr++;\r\n          var bits67 = headerByte >> 6;\r\n          var n = (bits67 === 0) ? 4 : 3 - bits67;\r\n          var doLut = (headerByte & 32) > 0 ? true : false;//5th bit\r\n          var numBits = headerByte & 31;\r\n          var numElements = 0;\r\n          if (n === 1) {\r\n            numElements = view.getUint8(blockPtr); blockPtr++;\r\n          } else if (n === 2) {\r\n            numElements = view.getUint16(blockPtr, true); blockPtr += 2;\r\n          } else if (n === 4) {\r\n            numElements = view.getUint32(blockPtr, true); blockPtr += 4;\r\n          } else {\r\n            throw \"Invalid valid pixel count type\";\r\n          }\r\n          //fix: huffman codes are bit stuffed, but not bound by data's max value, so need to use originalUnstuff\r\n          //offset = offset || 0;\r\n          var scale = 2 * headerInfo.maxZError;\r\n          var stuffedData, arrayBuf, store8, dataBytes, dataWords;\r\n          var lutArr, lutData, lutBytes, lutBitsPerElement, bitsPerPixel;\r\n          var zMax = headerInfo.numDims > 1 ? headerInfo.maxValues[iDim] : headerInfo.zMax;\r\n          if (doLut) {\r\n            data.counter.lut++;\r\n            lutBytes = view.getUint8(blockPtr);\r\n            lutBitsPerElement = numBits;\r\n            blockPtr++;\r\n            dataBytes = Math.ceil((lutBytes - 1) * numBits / 8);\r\n            dataWords = Math.ceil(dataBytes / 4);\r\n            arrayBuf = new ArrayBuffer(dataWords * 4);\r\n            store8 = new Uint8Array(arrayBuf);\r\n\r\n            data.ptr += blockPtr;\r\n            store8.set(new Uint8Array(input, data.ptr, dataBytes));\r\n\r\n            lutData = new Uint32Array(arrayBuf);\r\n            data.ptr += dataBytes;\r\n\r\n            bitsPerPixel = 0;\r\n            while ((lutBytes - 1) >>> bitsPerPixel) {\r\n              bitsPerPixel++;\r\n            }\r\n            dataBytes = Math.ceil(numElements * bitsPerPixel / 8);\r\n            dataWords = Math.ceil(dataBytes / 4);\r\n            arrayBuf = new ArrayBuffer(dataWords * 4);\r\n            store8 = new Uint8Array(arrayBuf);\r\n            store8.set(new Uint8Array(input, data.ptr, dataBytes));\r\n            stuffedData = new Uint32Array(arrayBuf);\r\n            data.ptr += dataBytes;\r\n            if (fileVersion >= 3) {\r\n              lutArr = BitStuffer.unstuffLUT2(lutData, numBits, lutBytes - 1, offset, scale, zMax);\r\n            }\r\n            else {\r\n              lutArr = BitStuffer.unstuffLUT(lutData, numBits, lutBytes - 1, offset, scale, zMax);\r\n            }\r\n            //lutArr.unshift(0);\r\n            if (fileVersion >= 3) {\r\n              //BitStuffer.unstuff2(block, blockDataBuffer, headerInfo.zMax);\r\n              BitStuffer.unstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements, lutArr);\r\n            }\r\n            else {\r\n              BitStuffer.unstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements, lutArr);\r\n            }\r\n          }\r\n          else {\r\n            //console.debug(\"bitstuffer\");\r\n            data.counter.bitstuffer++;\r\n            bitsPerPixel = numBits;\r\n            data.ptr += blockPtr;\r\n            if (bitsPerPixel > 0) {\r\n              dataBytes = Math.ceil(numElements * bitsPerPixel / 8);\r\n              dataWords = Math.ceil(dataBytes / 4);\r\n              arrayBuf = new ArrayBuffer(dataWords * 4);\r\n              store8 = new Uint8Array(arrayBuf);\r\n              store8.set(new Uint8Array(input, data.ptr, dataBytes));\r\n              stuffedData = new Uint32Array(arrayBuf);\r\n              data.ptr += dataBytes;\r\n              if (fileVersion >= 3) {\r\n                if (offset === null) {\r\n                  BitStuffer.originalUnstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements);\r\n                }\r\n                else {\r\n                  BitStuffer.unstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements, false, offset, scale, zMax);\r\n                }\r\n              }\r\n              else {\r\n                if (offset === null) {\r\n                  BitStuffer.originalUnstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements);\r\n                }\r\n                else {\r\n                  BitStuffer.unstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements, false, offset, scale, zMax);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n      },\r\n\r\n      readTiles: function(input, data, OutPixelTypeArray) {\r\n        var headerInfo = data.headerInfo;\r\n        var width = headerInfo.width;\r\n        var height = headerInfo.height;\r\n        var microBlockSize = headerInfo.microBlockSize;\r\n        var imageType = headerInfo.imageType;\r\n        var dataTypeSize = Lerc2Helpers.getDataTypeSize(imageType);\r\n        var numBlocksX = Math.ceil(width / microBlockSize);\r\n        var numBlocksY = Math.ceil(height / microBlockSize);\r\n        data.pixels.numBlocksY = numBlocksY;\r\n        data.pixels.numBlocksX = numBlocksX;\r\n        data.pixels.ptr = 0;\r\n        var row = 0, col = 0, blockY = 0, blockX = 0, thisBlockHeight = 0, thisBlockWidth = 0, bytesLeft = 0, headerByte = 0, bits67 = 0, testCode = 0, outPtr = 0, outStride = 0, numBytes = 0, bytesleft = 0, z = 0, blockPtr = 0;\r\n        var view, block, arrayBuf, store8, rawData;\r\n        var blockEncoding;\r\n        var blockDataBuffer = new OutPixelTypeArray(microBlockSize * microBlockSize);\r\n        var lastBlockHeight = (height % microBlockSize) || microBlockSize;\r\n        var lastBlockWidth = (width % microBlockSize) || microBlockSize;\r\n        var offsetType, offset;\r\n        var numDims = headerInfo.numDims, iDim;\r\n        var mask = data.pixels.resultMask;\r\n        var resultPixels = data.pixels.resultPixels;\r\n        for (blockY = 0; blockY < numBlocksY; blockY++) {\r\n          thisBlockHeight = (blockY !== numBlocksY - 1) ? microBlockSize : lastBlockHeight;\r\n          for (blockX = 0; blockX < numBlocksX; blockX++) {\r\n            //console.debug(\"y\" + blockY + \" x\" + blockX);\r\n            thisBlockWidth = (blockX !== numBlocksX - 1) ? microBlockSize : lastBlockWidth;\r\n\r\n            outPtr = blockY * width * microBlockSize + blockX * microBlockSize;\r\n            outStride = width - thisBlockWidth;\r\n\r\n\r\n            for (iDim = 0; iDim < numDims; iDim++) {\r\n              if (numDims > 1) {\r\n                resultPixels = new OutPixelTypeArray(data.pixels.resultPixels.buffer, width * height * iDim * dataTypeSize, width * height);\r\n              }\r\n              bytesLeft = input.byteLength - data.ptr;\r\n              view = new DataView(input, data.ptr, Math.min(10, bytesLeft));\r\n              block = {};\r\n              blockPtr = 0;\r\n              headerByte = view.getUint8(0);\r\n              blockPtr++;\r\n              bits67 = (headerByte >> 6) & 0xFF;\r\n              testCode = (headerByte >> 2) & 15;    // use bits 2345 for integrity check\r\n              if (testCode !== (((blockX * microBlockSize) >> 3) & 15)) {\r\n                throw \"integrity issue\";\r\n                //return false;\r\n              }\r\n\r\n              blockEncoding = headerByte & 3;\r\n              if (blockEncoding > 3) {\r\n                data.ptr += blockPtr;\r\n                throw \"Invalid block encoding (\" + blockEncoding + \")\";\r\n              }\r\n              else if (blockEncoding === 2) { //constant 0\r\n                data.counter.constant++;\r\n                data.ptr += blockPtr;\r\n                continue;\r\n              }\r\n              else if (blockEncoding === 0) {  //uncompressed\r\n                data.counter.uncompressed++;\r\n                data.ptr += blockPtr;\r\n                numBytes = thisBlockHeight * thisBlockWidth * dataTypeSize;\r\n                bytesleft = input.byteLength - data.ptr;\r\n                numBytes = numBytes < bytesleft ? numBytes : bytesleft;\r\n                //bit alignment\r\n                arrayBuf = new ArrayBuffer((numBytes % dataTypeSize) === 0 ? numBytes : (numBytes + dataTypeSize - numBytes % dataTypeSize));\r\n                store8 = new Uint8Array(arrayBuf);\r\n                store8.set(new Uint8Array(input, data.ptr, numBytes));\r\n                rawData = new OutPixelTypeArray(arrayBuf);\r\n                z = 0;\r\n                if (mask) {\r\n                  for (row = 0; row < thisBlockHeight; row++) {\r\n                    for (col = 0; col < thisBlockWidth; col++) {\r\n                      if (mask[outPtr]) {\r\n                        resultPixels[outPtr] = rawData[z++];\r\n                      }\r\n                      outPtr++;\r\n                    }\r\n                    outPtr += outStride;\r\n                  }\r\n                }\r\n                else {//all valid\r\n                  for (row = 0; row < thisBlockHeight; row++) {\r\n                    for (col = 0; col < thisBlockWidth; col++) {\r\n                      resultPixels[outPtr++] = rawData[z++];\r\n                    }\r\n                    outPtr += outStride;\r\n                  }\r\n                }\r\n                data.ptr += z * dataTypeSize;\r\n              }\r\n              else { //1 or 3\r\n                offsetType = Lerc2Helpers.getDataTypeUsed(imageType, bits67);\r\n                offset = Lerc2Helpers.getOnePixel(block, blockPtr, offsetType, view);\r\n                blockPtr += Lerc2Helpers.getDataTypeSize(offsetType);\r\n                if (blockEncoding === 3) //constant offset value\r\n                {\r\n                  data.ptr += blockPtr;\r\n                  data.counter.constantoffset++;\r\n                  //you can delete the following resultMask case in favor of performance because val is constant and users use nodata mask, otherwise nodatavalue post processing handles it too.\r\n                  //while the above statement is true, we're not doing it as we want to keep invalid pixel value at 0 rather than arbitrary values\r\n                  if (mask) {\r\n                    for (row = 0; row < thisBlockHeight; row++) {\r\n                      for (col = 0; col < thisBlockWidth; col++) {\r\n                        if (mask[outPtr]) {\r\n                          resultPixels[outPtr] = offset;\r\n                        }\r\n                        outPtr++;\r\n                      }\r\n                      outPtr += outStride;\r\n                    }\r\n                  }\r\n                  else {\r\n                    for (row = 0; row < thisBlockHeight; row++) {\r\n                      for (col = 0; col < thisBlockWidth; col++) {\r\n                        resultPixels[outPtr++] = offset;\r\n                      }\r\n                      outPtr += outStride;\r\n                    }\r\n                  }\r\n                }\r\n                else { //bitstuff encoding is 3\r\n                  data.ptr += blockPtr;\r\n                  //heavy lifting\r\n                  Lerc2Helpers.decodeBits(input, data, blockDataBuffer, offset, iDim);\r\n                  blockPtr = 0;\r\n                  if (mask) {\r\n                    for (row = 0; row < thisBlockHeight; row++) {\r\n                      for (col = 0; col < thisBlockWidth; col++) {\r\n                        if (mask[outPtr]) {\r\n                          resultPixels[outPtr] = blockDataBuffer[blockPtr++];\r\n                        }\r\n                        outPtr++;\r\n                      }\r\n                      outPtr += outStride;\r\n                    }\r\n                  }\r\n                  else {\r\n                    for (row = 0; row < thisBlockHeight; row++) {\r\n                      for (col = 0; col < thisBlockWidth; col++) {\r\n                        resultPixels[outPtr++] = blockDataBuffer[blockPtr++];\r\n                      }\r\n                      outPtr += outStride;\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n\r\n      /*****************\r\n      *  private methods (helper methods)\r\n      *****************/\r\n\r\n      formatFileInfo: function(data) {\r\n        return {\r\n          \"fileIdentifierString\": data.headerInfo.fileIdentifierString,\r\n          \"fileVersion\": data.headerInfo.fileVersion,\r\n          \"imageType\": data.headerInfo.imageType,\r\n          \"height\": data.headerInfo.height,\r\n          \"width\": data.headerInfo.width,\r\n          \"numValidPixel\": data.headerInfo.numValidPixel,\r\n          \"microBlockSize\": data.headerInfo.microBlockSize,\r\n          \"blobSize\": data.headerInfo.blobSize,\r\n          \"maxZError\": data.headerInfo.maxZError,\r\n          \"pixelType\": Lerc2Helpers.getPixelType(data.headerInfo.imageType),\r\n          \"eofOffset\": data.eofOffset,\r\n          \"mask\": data.mask ? {\r\n            \"numBytes\": data.mask.numBytes\r\n          } : null,\r\n          \"pixels\": {\r\n            \"numBlocksX\": data.pixels.numBlocksX,\r\n            \"numBlocksY\": data.pixels.numBlocksY,\r\n            //\"numBytes\": data.pixels.numBytes,\r\n            \"maxValue\": data.headerInfo.zMax,\r\n            \"minValue\": data.headerInfo.zMin,\r\n            \"noDataValue\": data.noDataValue\r\n          }\r\n        };\r\n      },\r\n\r\n      constructConstantSurface: function(data) {\r\n        var val = data.headerInfo.zMax;\r\n        var numDims =  data.headerInfo.numDims;\r\n        var numPixels = data.headerInfo.height * data.headerInfo.width;\r\n        var numPixelAllDims = numPixels * numDims;\r\n        var i=0, k = 0, nStart=0;\r\n        var mask = data.pixels.resultMask;\r\n        if (mask) {\r\n          if (numDims > 1) {\r\n            for (i=0; i < numDims; i++) {\r\n              nStart = i * numPixels;\r\n              for (k = 0; k < numPixels; k++) {\r\n                if (mask[k]) {\r\n                  data.pixels.resultPixels[nStart + k] = val;\r\n                }\r\n              }\r\n            }\r\n          }\r\n          else {\r\n            for (k = 0; k < numPixels; k++) {\r\n              if (mask[k]) {\r\n                data.pixels.resultPixels[k] = val;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          if (data.pixels.resultPixels.fill) {\r\n            data.pixels.resultPixels.fill(val);\r\n          }\r\n          else {\r\n            for (k = 0; k < numPixelAllDims; k++) {\r\n              data.pixels.resultPixels[k] = val;\r\n            }\r\n          }\r\n        }\r\n        return;\r\n      },\r\n\r\n      getDataTypeArray: function(t) {\r\n        var tp;\r\n        switch (t) {\r\n          case 0: //char\r\n            tp = Int8Array;\r\n            break;\r\n          case 1: //byte\r\n            tp = Uint8Array;\r\n            break;\r\n          case 2: //short\r\n            tp = Int16Array;\r\n            break;\r\n          case 3: //ushort\r\n            tp = Uint16Array;\r\n            break;\r\n          case 4:\r\n            tp = Int32Array;\r\n            break;\r\n          case 5:\r\n            tp = Uint32Array;\r\n            break;\r\n          case 6:\r\n            tp = Float32Array;\r\n            break;\r\n          case 7:\r\n            tp = Float64Array;\r\n            break;\r\n          default:\r\n            tp = Float32Array;\r\n        }\r\n        return tp;\r\n      },\r\n\r\n      getPixelType: function(t) {\r\n        var tp;\r\n        switch (t) {\r\n          case 0: //char\r\n            tp = \"S8\";\r\n            break;\r\n          case 1: //byte\r\n            tp = \"U8\";\r\n            break;\r\n          case 2: //short\r\n            tp = \"S16\";\r\n            break;\r\n          case 3: //ushort\r\n            tp = \"U16\";\r\n            break;\r\n          case 4:\r\n            tp = \"S32\";\r\n            break;\r\n          case 5:\r\n            tp = \"U32\";\r\n            break;\r\n          case 6:\r\n            tp = \"F32\";\r\n            break;\r\n          case 7:\r\n            tp = \"F64\"; //not supported\r\n            break;\r\n          default:\r\n            tp = \"F32\";\r\n        }\r\n        return tp;\r\n      },\r\n\r\n      isValidPixelValue: function(t, val) {\r\n        if (val === null) {\r\n          return false;\r\n        }\r\n        var isValid;\r\n        switch (t) {\r\n          case 0: //char\r\n            isValid = val >= -128 && val <= 127;\r\n            break;\r\n          case 1: //byte  (unsigned char)\r\n            isValid = val >= 0 && val <= 255;\r\n            break;\r\n          case 2: //short\r\n            isValid = val >= -32768 && val <= 32767;\r\n            break;\r\n          case 3: //ushort\r\n            isValid = val >= 0 && val <= 65536;\r\n            break;\r\n          case 4: //int 32\r\n            isValid = val >= -2147483648 && val <= 2147483647;\r\n            break;\r\n          case 5: //uinit 32\r\n            isValid = val >= 0 && val <= 4294967296;\r\n            break;\r\n          case 6:\r\n            isValid = val >= -3.4027999387901484e+38 && val <= 3.4027999387901484e+38;\r\n            break;\r\n          case 7:\r\n            isValid = val >= 5e-324 && val <= 1.7976931348623157e+308;\r\n            break;\r\n          default:\r\n            isValid = false;\r\n        }\r\n        return isValid;\r\n      },\r\n\r\n      getDataTypeSize: function(t) {\r\n        var s = 0;\r\n        switch (t) {\r\n          case 0: //ubyte\r\n          case 1: //byte\r\n            s = 1;\r\n            break;\r\n          case 2: //short\r\n          case 3: //ushort\r\n            s = 2;\r\n            break;\r\n          case 4:\r\n          case 5:\r\n          case 6:\r\n            s = 4;\r\n            break;\r\n          case 7:\r\n            s = 8;\r\n            break;\r\n          default:\r\n            s = t;\r\n        }\r\n        return s;\r\n      },\r\n\r\n      getDataTypeUsed: function(dt, tc) {\r\n        var t = dt;\r\n        switch (dt) {\r\n          case 2: //short\r\n          case 4: //long\r\n            t = dt - tc;\r\n            break;\r\n          case 3: //ushort\r\n          case 5: //ulong\r\n            t = dt - 2 * tc;\r\n            break;\r\n          case 6: //float\r\n            if (0 === tc) {\r\n              t = dt;\r\n            }\r\n            else if (1 === tc) {\r\n              t = 2;\r\n            }\r\n            else {\r\n              t = 1;//byte\r\n            }\r\n            break;\r\n          case 7: //double\r\n            if (0 === tc) {\r\n              t = dt;\r\n            }\r\n            else {\r\n              t = dt - 2 * tc + 1;\r\n            }\r\n            break;\r\n          default:\r\n            t = dt;\r\n            break;\r\n        }\r\n        return t;\r\n      },\r\n\r\n      getOnePixel: function(block, blockPtr, offsetType, view) {\r\n        var temp = 0;\r\n        switch (offsetType) {\r\n          case 0: //char\r\n            temp = view.getInt8(blockPtr);\r\n            break;\r\n          case 1: //byte\r\n            temp = view.getUint8(blockPtr);\r\n            break;\r\n          case 2:\r\n            temp = view.getInt16(blockPtr, true);\r\n            break;\r\n          case 3:\r\n            temp = view.getUint16(blockPtr, true);\r\n            break;\r\n          case 4:\r\n            temp = view.getInt32(blockPtr, true);\r\n            break;\r\n          case 5:\r\n            temp = view.getUInt32(blockPtr, true);\r\n            break;\r\n          case 6:\r\n            temp = view.getFloat32(blockPtr, true);\r\n            break;\r\n          case 7:\r\n            //temp = view.getFloat64(blockPtr, true);\r\n            //blockPtr += 8;\r\n            //lerc2 encoding doesnt handle float 64, force to float32???\r\n            temp = view.getFloat64(blockPtr, true);\r\n            break;\r\n          default:\r\n            throw (\"the decoder does not understand this pixel type\");\r\n        }\r\n        return temp;\r\n      }\r\n    };\r\n\r\n    /***************************************************\r\n    *private class for a tree node. Huffman code is in Lerc2Helpers\r\n    ****************************************************/\r\n    var TreeNode = function(val, left, right) {\r\n      this.val = val;\r\n      this.left = left;\r\n      this.right = right;\r\n    };\r\n\r\n    var Lerc2Decode = {\r\n      /*\r\n      * ********removed options compared to LERC1. We can bring some of them back if needed.\r\n       * removed pixel type. LERC2 is typed and doesn't require user to give pixel type\r\n       * changed encodedMaskData to maskData. LERC2 's js version make it faster to use maskData directly.\r\n       * removed returnMask. mask is used by LERC2 internally and is cost free. In case of user input mask, it's returned as well and has neglible cost.\r\n       * removed nodatavalue. Because LERC2 pixels are typed, nodatavalue will sacrify a useful value for many types (8bit, 16bit) etc,\r\n       *       user has to be knowledgable enough about raster and their data to avoid usability issues. so nodata value is simply removed now.\r\n       *       We can add it back later if their's a clear requirement.\r\n       * removed encodedMask. This option was not implemented in LercDecode. It can be done after decoding (less efficient)\r\n       * removed computeUsedBitDepths.\r\n       *\r\n       *\r\n       * response changes compared to LERC1\r\n       * 1. encodedMaskData is not available\r\n       * 2. noDataValue is optional (returns only if user's noDataValue is with in the valid data type range)\r\n       * 3. maskData is always available\r\n      */\r\n      /*****************\r\n      *  public properties\r\n      ******************/\r\n      //HUFFMAN_LUT_BITS_MAX: 12, //use 2^12 lut, not configurable\r\n\r\n      /*****************\r\n      *  public methods\r\n      *****************/\r\n\r\n      /**\r\n       * Decode a LERC2 byte stream and return an object containing the pixel data and optional metadata.\r\n       *\r\n       * @param {ArrayBuffer} input The LERC input byte stream\r\n       * @param {object} [options] options Decoding options\r\n       * @param {number} [options.inputOffset] The number of bytes to skip in the input byte stream. A valid LERC file is expected at that position\r\n       * @param {boolean} [options.returnFileInfo] If true, the return value will have a fileInfo property that contains metadata obtained from the LERC headers and the decoding process\r\n       */\r\n      decode: function(/*byte array*/ input, /*object*/ options) {\r\n        //currently there's a bug in the sparse array, so please do not set to false\r\n        options = options || {};\r\n        var noDataValue = options.noDataValue;\r\n\r\n        //initialize\r\n        var i = 0, data = {};\r\n        data.ptr = options.inputOffset || 0;\r\n        data.pixels = {};\r\n\r\n        // File header\r\n        if (!Lerc2Helpers.readHeaderInfo(input, data)) {\r\n          return;\r\n        }\r\n        var headerInfo = data.headerInfo;\r\n        var fileVersion = headerInfo.fileVersion;\r\n        var OutPixelTypeArray = Lerc2Helpers.getDataTypeArray(headerInfo.imageType);\r\n\r\n        // Mask Header\r\n        Lerc2Helpers.readMask(input, data);\r\n        if (headerInfo.numValidPixel !== headerInfo.width * headerInfo.height && !data.pixels.resultMask) {\r\n          data.pixels.resultMask = options.maskData;\r\n        }\r\n\r\n        var numPixels = headerInfo.width * headerInfo.height;\r\n        data.pixels.resultPixels = new OutPixelTypeArray(numPixels * headerInfo.numDims);\r\n\r\n        data.counter = {\r\n          onesweep: 0,\r\n          uncompressed: 0,\r\n          lut: 0,\r\n          bitstuffer: 0,\r\n          constant: 0,\r\n          constantoffset: 0\r\n        };\r\n        if (headerInfo.numValidPixel !== 0) {\r\n          //not tested\r\n          if (headerInfo.zMax === headerInfo.zMin) //constant surface\r\n          {\r\n            Lerc2Helpers.constructConstantSurface(data);\r\n          }\r\n          else if (fileVersion >= 4 && Lerc2Helpers.checkMinMaxRanges(input, data)) {\r\n            Lerc2Helpers.constructConstantSurface(data);\r\n          }\r\n          else {\r\n            var view = new DataView(input, data.ptr, 2);\r\n            var bReadDataOneSweep = view.getUint8(0);\r\n            data.ptr++;\r\n            if (bReadDataOneSweep) {\r\n              //console.debug(\"OneSweep\");\r\n              Lerc2Helpers.readDataOneSweep(input, data, OutPixelTypeArray);\r\n            }\r\n            else {\r\n              //lerc2.1: //bitstuffing + lut\r\n              //lerc2.2: //bitstuffing + lut + huffman\r\n              //lerc2.3: new bitstuffer\r\n              if (fileVersion > 1 && headerInfo.imageType <= 1 && Math.abs(headerInfo.maxZError - 0.5) < 0.00001) {\r\n                //this is 2.x plus 8 bit (unsigned and signed) data, possiblity of Huffman\r\n                var flagHuffman = view.getUint8(1);\r\n                data.ptr++;\r\n                data.encodeMode = flagHuffman;\r\n                if (flagHuffman > 2 || (fileVersion < 4 && flagHuffman > 1)) {\r\n                  throw \"Invalid Huffman flag \" + flagHuffman;\r\n                }\r\n                if (flagHuffman) {//1 - delta Huffman, 2 - Huffman\r\n                  //console.log(\"Huffman\");\r\n                  Lerc2Helpers.readHuffman(input, data, OutPixelTypeArray);\r\n                }\r\n                else {\r\n                  //console.log(\"Tiles\");\r\n                  Lerc2Helpers.readTiles(input, data, OutPixelTypeArray);\r\n                }\r\n              }\r\n              else { //lerc2.x non-8 bit data\r\n                //console.log(\"Tiles\");\r\n                Lerc2Helpers.readTiles(input, data, OutPixelTypeArray);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        data.eofOffset = data.ptr;\r\n        var diff;\r\n        if (options.inputOffset) {\r\n          diff = data.headerInfo.blobSize + options.inputOffset - data.ptr;\r\n          if (Math.abs(diff) >= 1) {\r\n            //console.debug(\"incorrect eof: dataptr \" + data.ptr + \" offset \" + options.inputOffset + \" blobsize \" + data.headerInfo.blobSize + \" diff: \" + diff);\r\n            data.eofOffset = options.inputOffset + data.headerInfo.blobSize;\r\n          }\r\n        }\r\n        else {\r\n          diff = data.headerInfo.blobSize - data.ptr;\r\n          if (Math.abs(diff) >= 1) {\r\n            //console.debug(\"incorrect first band eof: dataptr \" + data.ptr + \" blobsize \" + data.headerInfo.blobSize + \" diff: \" + diff);\r\n            data.eofOffset = data.headerInfo.blobSize;\r\n          }\r\n        }\r\n\r\n        var result = {\r\n          width: headerInfo.width,\r\n          height: headerInfo.height,\r\n          pixelData: data.pixels.resultPixels,\r\n          minValue: headerInfo.zMin,\r\n          maxValue: headerInfo.zMax,\r\n          validPixelCount: headerInfo.numValidPixel,\r\n          dimCount: headerInfo.numDims,\r\n          dimStats: {\r\n            minValues: headerInfo.minValues,\r\n            maxValues: headerInfo.maxValues\r\n          },\r\n          maskData: data.pixels.resultMask\r\n          //noDataValue: noDataValue\r\n        };\r\n\r\n        //we should remove this if there's no existing client\r\n        //optional noDataValue processing, it's user's responsiblity\r\n        if (data.pixels.resultMask && Lerc2Helpers.isValidPixelValue(headerInfo.imageType, noDataValue)) {\r\n          var mask = data.pixels.resultMask;\r\n          for (i = 0; i < numPixels; i++) {\r\n            if (!mask[i]) {\r\n              result.pixelData[i] = noDataValue;\r\n            }\r\n          }\r\n          result.noDataValue = noDataValue;\r\n        }\r\n        data.noDataValue = noDataValue;\r\n        if (options.returnFileInfo) {\r\n          result.fileInfo = Lerc2Helpers.formatFileInfo(data);\r\n        }\r\n        return result;\r\n      },\r\n\r\n      getBandCount: function(/*byte array*/ input) {\r\n        var count = 0;\r\n        var i = 0;\r\n        var temp = {};\r\n        temp.ptr = 0;\r\n        temp.pixels = {};\r\n        while (i < input.byteLength - 58) {\r\n          Lerc2Helpers.readHeaderInfo(input, temp);\r\n          i += temp.headerInfo.blobSize;\r\n          count++;\r\n          temp.ptr = i;\r\n        }\r\n        return count;\r\n      }\r\n    };\r\n\r\n    return Lerc2Decode;\r\n  })();\r\n\r\n  var isPlatformLittleEndian = (function() {\r\n    var a = new ArrayBuffer(4);\r\n    var b = new Uint8Array(a);\r\n    var c = new Uint32Array(a);\r\n    c[0] = 1;\r\n    return b[0] === 1;\r\n  })();\r\n\r\n  var Lerc = {\r\n    /************wrapper**********************************************/\r\n    /**\r\n     * A wrapper for decoding both LERC1 and LERC2 byte streams capable of handling multiband pixel blocks for various pixel types.\r\n     *\r\n     * @alias module:Lerc\r\n     * @param {ArrayBuffer} input The LERC input byte stream\r\n     * @param {object} [options] The decoding options below are optional.\r\n     * @param {number} [options.inputOffset] The number of bytes to skip in the input byte stream. A valid Lerc file is expected at that position.\r\n     * @param {string} [options.pixelType] (LERC1 only) Default value is F32. Valid pixel types for input are U8/S8/S16/U16/S32/U32/F32.\r\n     * @param {number} [options.noDataValue] (LERC1 only). It is recommended to use the returned mask instead of setting this value.\r\n     * @returns {{width, height, pixels, pixelType, mask, statistics}}\r\n       * @property {number} width Width of decoded image.\r\n       * @property {number} height Height of decoded image.\r\n       * @property {array} pixels [band1, band2, …] Each band is a typed array of width*height.\r\n       * @property {string} pixelType The type of pixels represented in the output.\r\n       * @property {mask} mask Typed array with a size of width*height, or null if all pixels are valid.\r\n       * @property {array} statistics [statistics_band1, statistics_band2, …] Each element is a statistics object representing min and max values\r\n    **/\r\n    decode: function(encodedData, options) {\r\n      if (!isPlatformLittleEndian) {\r\n        throw \"Big endian system is not supported.\";\r\n      }\r\n      options = options || {};\r\n      var inputOffset = options.inputOffset || 0;\r\n      var fileIdView = new Uint8Array(encodedData, inputOffset, 10);\r\n      var fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\r\n      var lerc, majorVersion;\r\n      if (fileIdentifierString.trim() === \"CntZImage\") {\r\n        lerc = LercDecode;\r\n        majorVersion = 1;\r\n      }\r\n      else if (fileIdentifierString.substring(0, 5) === \"Lerc2\") {\r\n        lerc = Lerc2Decode;\r\n        majorVersion = 2;\r\n      }\r\n      else {\r\n        throw \"Unexpected file identifier string: \" + fileIdentifierString;\r\n      }\r\n\r\n      var iPlane = 0, eof = encodedData.byteLength - 10, encodedMaskData, bandMasks = [], bandMask, maskData;\r\n      var decodedPixelBlock = {\r\n        width: 0,\r\n        height: 0,\r\n        pixels: [],\r\n        pixelType: options.pixelType,\r\n        mask: null,\r\n        statistics: []\r\n      };\r\n\r\n      while (inputOffset < eof) {\r\n        var result = lerc.decode(encodedData, {\r\n          inputOffset: inputOffset,//for both lerc1 and lerc2\r\n          encodedMaskData: encodedMaskData,//lerc1 only\r\n          maskData: maskData,//lerc2 only\r\n          returnMask: iPlane === 0 ? true : false,//lerc1 only\r\n          returnEncodedMask: iPlane === 0 ? true : false,//lerc1 only\r\n          returnFileInfo: true,//for both lerc1 and lerc2\r\n          pixelType: options.pixelType || null,//lerc1 only\r\n          noDataValue: options.noDataValue || null//lerc1 only\r\n        });\r\n\r\n        inputOffset = result.fileInfo.eofOffset;\r\n        if (iPlane === 0) {\r\n          encodedMaskData = result.encodedMaskData;//lerc1\r\n          maskData = result.maskData;//lerc2\r\n          decodedPixelBlock.width = result.width;\r\n          decodedPixelBlock.height = result.height;\r\n          decodedPixelBlock.dimCount = result.dimCount || 1;\r\n          //decodedPixelBlock.dimStats = decodedPixelBlock.dimStats;\r\n          decodedPixelBlock.pixelType = result.pixelType || result.fileInfo.pixelType;\r\n          decodedPixelBlock.mask = result.maskData;\r\n        }\r\n        if (majorVersion >1 && result.fileInfo.mask && result.fileInfo.mask.numBytes > 0) {\r\n          bandMasks.push(result.maskData);\r\n        }\r\n\r\n        iPlane++;\r\n        decodedPixelBlock.pixels.push(result.pixelData);\r\n        decodedPixelBlock.statistics.push({\r\n          minValue: result.minValue,\r\n          maxValue: result.maxValue,\r\n          noDataValue: result.noDataValue,\r\n          dimStats: result.dimStats\r\n        });\r\n      }\r\n      var i, j, numPixels;\r\n      if (majorVersion > 1 && bandMasks.length > 1) {\r\n        numPixels = decodedPixelBlock.width * decodedPixelBlock.height;\r\n        decodedPixelBlock.bandMasks = bandMasks;\r\n        maskData = new Uint8Array(numPixels);\r\n        maskData.set(bandMasks[0]);\r\n        for (i = 1; i < bandMasks.length; i++) {\r\n          bandMask = bandMasks[i];\r\n          for (j = 0; j < numPixels; j++) {\r\n            maskData[j] = maskData[j] & bandMask[j];\r\n          }\r\n        }\r\n        decodedPixelBlock.maskData = maskData;\r\n      }\r\n\r\n      return decodedPixelBlock;\r\n    }\r\n  };\r\n\r\n  tmp.Lerc = Lerc;\r\n})();\r\n\r\nexport default tmp.Lerc;\r\n","import Ellipsoid from '../Core/Ellipsoid.js';\r\nimport HeightmapEncoding from '../Core/HeightmapEncoding.js';\r\nimport HeightmapTessellator from '../Core/HeightmapTessellator.js';\r\nimport Rectangle from '../Core/Rectangle.js';\r\nimport RuntimeError from '../Core/RuntimeError.js';\r\nimport Lerc from '../ThirdParty/LercDecode.js';\r\nimport createTaskProcessorWorker from './createTaskProcessorWorker.js';\r\n\r\nfunction createVerticesFromHeightmap(parameters, transferableObjects) {\r\n    // LERC encoded buffers must be decoded, then we can process them like normal\r\n    if (parameters.encoding === HeightmapEncoding.LERC) {\r\n        var result;\r\n        try {\r\n            result = Lerc.decode(parameters.heightmap);\r\n        } catch (error) {\r\n            throw new RuntimeError(error);\r\n        }\r\n\r\n        var lercStatistics = result.statistics[0];\r\n        if (lercStatistics.minValue === Number.MAX_VALUE) {\r\n            throw new RuntimeError('Invalid tile data');\r\n        }\r\n\r\n        parameters.heightmap = result.pixels[0];\r\n        parameters.width = result.width;\r\n        parameters.height = result.height;\r\n    }\r\n\r\n    parameters.ellipsoid = Ellipsoid.clone(parameters.ellipsoid);\r\n    parameters.rectangle = Rectangle.clone(parameters.rectangle);\r\n\r\n    var statistics = HeightmapTessellator.computeVertices(parameters);\r\n    var vertices = statistics.vertices;\r\n    transferableObjects.push(vertices.buffer);\r\n\r\n    return {\r\n        vertices: vertices.buffer,\r\n        numberOfAttributes: statistics.encoding.stride,\r\n        minimumHeight: statistics.minimumHeight,\r\n        maximumHeight: statistics.maximumHeight,\r\n        gridWidth: parameters.width,\r\n        gridHeight: parameters.height,\r\n        boundingSphere3D: statistics.boundingSphere3D,\r\n        orientedBoundingBox: statistics.orientedBoundingBox,\r\n        occludeePointInScaledSpace: statistics.occludeePointInScaledSpace,\r\n        encoding: statistics.encoding,\r\n        westIndicesSouthToNorth: statistics.westIndicesSouthToNorth,\r\n        southIndicesEastToWest: statistics.southIndicesEastToWest,\r\n        eastIndicesNorthToSouth: statistics.eastIndicesNorthToSouth,\r\n        northIndicesWestToEast: statistics.northIndicesWestToEast,\r\n        aspect: statistics.aspect,\r\n        repeat: statistics.repeat\r\n    };\r\n}\r\nexport default createTaskProcessorWorker(createVerticesFromHeightmap);\r\n"],"names":["Cartesian3","Matrix4","Cartesian2","defined","DeveloperError","CesiumMath","defaultValue","Ellipsoid","Rectangle","Transforms","WebMercatorProjection","BoundingSphere","OrientedBoundingBox","EllipsoidalOccluder","AxisAlignedBoundingBox","TerrainEncoding","AttributeCompression","EllipsoidTangentPlane","HeightmapEncoding","RuntimeError"],"mappings":"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"}