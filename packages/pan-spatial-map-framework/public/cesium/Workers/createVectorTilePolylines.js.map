{"version":3,"file":"createVectorTilePolylines.js","sources":["../../../../Source/Core/decodeVectorPolylinePositions.js","../../../../Source/WorkersES6/createVectorTilePolylines.js"],"sourcesContent":["import AttributeCompression from './AttributeCompression.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Cartographic from './Cartographic.js';\r\nimport CesiumMath from './Math.js';\r\n\r\nvar maxShort = 32767;\r\n\r\nvar scratchBVCartographic = new Cartographic();\r\nvar scratchEncodedPosition = new Cartesian3();\r\n\r\nfunction decodeVectorPolylinePositions(positions, rectangle, minimumHeight, maximumHeight, ellipsoid) {\r\n    var positionsLength = positions.length / 3;\r\n    var uBuffer = positions.subarray(0, positionsLength);\r\n    var vBuffer = positions.subarray(positionsLength, 2 * positionsLength);\r\n    var heightBuffer = positions.subarray(2 * positionsLength, 3 * positionsLength);\r\n    AttributeCompression.zigZagDeltaDecode(uBuffer, vBuffer, heightBuffer);\r\n\r\n    var decoded = new Float64Array(positions.length);\r\n    for (var i = 0; i < positionsLength; ++i) {\r\n        var u = uBuffer[i];\r\n        var v = vBuffer[i];\r\n        var h = heightBuffer[i];\r\n\r\n        var lon = CesiumMath.lerp(rectangle.west, rectangle.east, u / maxShort);\r\n        var lat = CesiumMath.lerp(rectangle.south, rectangle.north, v / maxShort);\r\n        var alt = CesiumMath.lerp(minimumHeight, maximumHeight, h / maxShort);\r\n\r\n        var cartographic = Cartographic.fromRadians(lon, lat, alt, scratchBVCartographic);\r\n        var decodedPosition = ellipsoid.cartographicToCartesian(cartographic, scratchEncodedPosition);\r\n        Cartesian3.pack(decodedPosition, decoded, i * 3);\r\n    }\r\n    return decoded;\r\n}\r\nexport default decodeVectorPolylinePositions;\r\n","import Cartesian3 from '../Core/Cartesian3.js';\r\nimport combine from '../Core/combine.js';\r\nimport decodeVectorPolylinePositions from '../Core/decodeVectorPolylinePositions.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\nimport IndexDatatype from '../Core/IndexDatatype.js';\r\nimport Rectangle from '../Core/Rectangle.js';\r\nimport createTaskProcessorWorker from './createTaskProcessorWorker.js';\r\n\r\nvar scratchRectangle = new Rectangle();\r\nvar scratchEllipsoid = new Ellipsoid();\r\nvar scratchCenter = new Cartesian3();\r\nvar scratchMinMaxHeights = {\r\n    min: undefined,\r\n    max: undefined\r\n};\r\n\r\nfunction unpackBuffer(packedBuffer) {\r\n    packedBuffer = new Float64Array(packedBuffer);\r\n\r\n    var offset = 0;\r\n    scratchMinMaxHeights.min = packedBuffer[offset++];\r\n    scratchMinMaxHeights.max = packedBuffer[offset++];\r\n\r\n    Rectangle.unpack(packedBuffer, offset, scratchRectangle);\r\n    offset += Rectangle.packedLength;\r\n\r\n    Ellipsoid.unpack(packedBuffer, offset, scratchEllipsoid);\r\n    offset += Ellipsoid.packedLength;\r\n\r\n    Cartesian3.unpack(packedBuffer, offset, scratchCenter);\r\n}\r\n\r\nfunction getPositionOffsets(counts) {\r\n    var countsLength = counts.length;\r\n    var positionOffsets = new Uint32Array(countsLength + 1);\r\n    var offset = 0;\r\n    for (var i = 0; i < countsLength; ++i) {\r\n        positionOffsets[i] = offset;\r\n        offset += counts[i];\r\n    }\r\n    positionOffsets[countsLength] = offset;\r\n    return positionOffsets;\r\n}\r\n\r\nvar scratchP0 = new Cartesian3();\r\nvar scratchP1 = new Cartesian3();\r\nvar scratchPrev = new Cartesian3();\r\nvar scratchCur = new Cartesian3();\r\nvar scratchNext = new Cartesian3();\r\n\r\nfunction createVectorTilePolylines(parameters, transferableObjects) {\r\n    var encodedPositions = new Uint16Array(parameters.positions);\r\n    var widths = new Uint16Array(parameters.widths);\r\n    var counts = new Uint32Array(parameters.counts);\r\n    var batchIds = new Uint16Array(parameters.batchIds);\r\n\r\n    unpackBuffer(parameters.packedBuffer);\r\n    var rectangle = scratchRectangle;\r\n    var ellipsoid = scratchEllipsoid;\r\n    var center = scratchCenter;\r\n    var minimumHeight = scratchMinMaxHeights.min;\r\n    var maximumHeight = scratchMinMaxHeights.max;\r\n\r\n    var positions = decodeVectorPolylinePositions(encodedPositions, rectangle, minimumHeight, maximumHeight, ellipsoid);\r\n\r\n    var positionsLength = positions.length / 3;\r\n    var size = positionsLength * 4 - 4;\r\n\r\n    var curPositions = new Float32Array(size * 3);\r\n    var prevPositions = new Float32Array(size * 3);\r\n    var nextPositions = new Float32Array(size * 3);\r\n    var expandAndWidth = new Float32Array(size * 2);\r\n    var vertexBatchIds = new Uint16Array(size);\r\n\r\n    var positionIndex = 0;\r\n    var expandAndWidthIndex = 0;\r\n    var batchIdIndex = 0;\r\n\r\n    var i;\r\n    var offset = 0;\r\n    var length = counts.length;\r\n\r\n    for (i = 0; i < length; ++i) {\r\n        var count = counts[i];\r\n        var width = widths[i];\r\n        var batchId = batchIds[i];\r\n\r\n        for (var j = 0; j < count; ++j) {\r\n            var previous;\r\n            if (j === 0) {\r\n                var p0 = Cartesian3.unpack(positions, offset * 3, scratchP0);\r\n                var p1 = Cartesian3.unpack(positions, (offset + 1) * 3, scratchP1);\r\n\r\n                previous = Cartesian3.subtract(p0, p1, scratchPrev);\r\n                Cartesian3.add(p0, previous, previous);\r\n            } else {\r\n                previous = Cartesian3.unpack(positions, (offset + j - 1) * 3, scratchPrev);\r\n            }\r\n\r\n            var current = Cartesian3.unpack(positions, (offset + j) * 3, scratchCur);\r\n\r\n            var next;\r\n            if (j === count - 1) {\r\n                var p2 = Cartesian3.unpack(positions, (offset + count - 1) * 3, scratchP0);\r\n                var p3 = Cartesian3.unpack(positions, (offset + count - 2) * 3, scratchP1);\r\n\r\n                next = Cartesian3.subtract(p2, p3, scratchNext);\r\n                Cartesian3.add(p2, next, next);\r\n            } else {\r\n                next = Cartesian3.unpack(positions, (offset + j + 1) * 3, scratchNext);\r\n            }\r\n\r\n            Cartesian3.subtract(previous, center, previous);\r\n            Cartesian3.subtract(current, center, current);\r\n            Cartesian3.subtract(next, center, next);\r\n\r\n            var startK = j === 0 ? 2 : 0;\r\n            var endK = j === count - 1 ? 2 : 4;\r\n\r\n            for (var k = startK; k < endK; ++k) {\r\n                Cartesian3.pack(current, curPositions, positionIndex);\r\n                Cartesian3.pack(previous, prevPositions, positionIndex);\r\n                Cartesian3.pack(next, nextPositions, positionIndex);\r\n                positionIndex += 3;\r\n\r\n                var direction = k - 2 < 0 ? -1.0 : 1.0;\r\n                expandAndWidth[expandAndWidthIndex++] = 2 * (k % 2) - 1;\r\n                expandAndWidth[expandAndWidthIndex++] = direction * width;\r\n\r\n                vertexBatchIds[batchIdIndex++] = batchId;\r\n            }\r\n        }\r\n\r\n        offset += count;\r\n    }\r\n\r\n    var indices = IndexDatatype.createTypedArray(size, positionsLength * 6 - 6);\r\n    var index = 0;\r\n    var indicesIndex = 0;\r\n    length = positionsLength - 1;\r\n    for (i = 0; i < length; ++i) {\r\n        indices[indicesIndex++] = index;\r\n        indices[indicesIndex++] = index + 2;\r\n        indices[indicesIndex++] = index + 1;\r\n\r\n        indices[indicesIndex++] = index + 1;\r\n        indices[indicesIndex++] = index + 2;\r\n        indices[indicesIndex++] = index + 3;\r\n\r\n        index += 4;\r\n    }\r\n\r\n    transferableObjects.push(curPositions.buffer, prevPositions.buffer, nextPositions.buffer);\r\n    transferableObjects.push(expandAndWidth.buffer, vertexBatchIds.buffer, indices.buffer);\r\n\r\n    var results = {\r\n        indexDatatype: indices.BYTES_PER_ELEMENT === 2 ? IndexDatatype.UNSIGNED_SHORT : IndexDatatype.UNSIGNED_INT,\r\n        currentPositions: curPositions.buffer,\r\n        previousPositions: prevPositions.buffer,\r\n        nextPositions: nextPositions.buffer,\r\n        expandAndWidth: expandAndWidth.buffer,\r\n        batchIds: vertexBatchIds.buffer,\r\n        indices: indices.buffer\r\n    };\r\n\r\n    if (parameters.keepDecodedPositions) {\r\n        var positionOffsets = getPositionOffsets(counts);\r\n        transferableObjects.push(positions.buffer, positionOffsets.buffer);\r\n        results = combine(results, {\r\n            decodedPositions: positions.buffer,\r\n            decodedPositionOffsets: positionOffsets.buffer\r\n        });\r\n    }\r\n\r\n    return results;\r\n}\r\nexport default createTaskProcessorWorker(createVectorTilePolylines);\r\n"],"names":["Cartographic","Cartesian3","AttributeCompression","CesiumMath","Rectangle","Ellipsoid","IndexDatatype","combine"],"mappings":"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"}