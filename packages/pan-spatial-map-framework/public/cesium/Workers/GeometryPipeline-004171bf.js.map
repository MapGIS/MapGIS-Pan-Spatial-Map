{"version":3,"file":"GeometryPipeline-004171bf.js","sources":["../../../../Source/Core/barycentricCoordinates.js","../../../../Source/Core/Tipsify.js","../../../../Source/Core/GeometryPipeline.js"],"sourcesContent":["import Cartesian2 from './Cartesian2.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Check from './Check.js';\r\nimport defined from './defined.js';\r\nimport CesiumMath from './Math.js';\r\n\r\nvar scratchCartesian1 = new Cartesian3();\r\nvar scratchCartesian2 = new Cartesian3();\r\nvar scratchCartesian3 = new Cartesian3();\r\n\r\n/**\r\n * Computes the barycentric coordinates for a point with respect to a triangle.\r\n *\r\n * @function\r\n *\r\n * @param {Cartesian2|Cartesian3} point The point to test.\r\n * @param {Cartesian2|Cartesian3} p0 The first point of the triangle, corresponding to the barycentric x-axis.\r\n * @param {Cartesian2|Cartesian3} p1 The second point of the triangle, corresponding to the barycentric y-axis.\r\n * @param {Cartesian2|Cartesian3} p2 The third point of the triangle, corresponding to the barycentric z-axis.\r\n * @param {Cartesian3} [result] The object onto which to store the result.\r\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\r\n *\r\n * @example\r\n * // Returns Cartesian3.UNIT_X\r\n * var p = new Cesium.Cartesian3(-1.0, 0.0, 0.0);\r\n * var b = Cesium.barycentricCoordinates(p,\r\n *   new Cesium.Cartesian3(-1.0, 0.0, 0.0),\r\n *   new Cesium.Cartesian3( 1.0, 0.0, 0.0),\r\n *   new Cesium.Cartesian3( 0.0, 1.0, 1.0));\r\n */\r\nfunction barycentricCoordinates(point, p0, p1, p2, result) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    Check.defined('point', point);\r\n    Check.defined('p0', p0);\r\n    Check.defined('p1', p1);\r\n    Check.defined('p2', p2);\r\n    //>>includeEnd('debug');\r\n\r\n    if (!defined(result)) {\r\n        result = new Cartesian3();\r\n    }\r\n\r\n    // Implementation based on http://www.blackpawn.com/texts/pointinpoly/default.html.\r\n    var v0;\r\n    var v1;\r\n    var v2;\r\n    var dot00;\r\n    var dot01;\r\n    var dot02;\r\n    var dot11;\r\n    var dot12;\r\n\r\n    if (!defined(p0.z)) {\r\n        if (Cartesian2.equalsEpsilon(point, p0, CesiumMath.EPSILON14)) {\r\n            return Cartesian3.clone(Cartesian3.UNIT_X, result);\r\n        }\r\n        if (Cartesian2.equalsEpsilon(point, p1, CesiumMath.EPSILON14)) {\r\n            return Cartesian3.clone(Cartesian3.UNIT_Y, result);\r\n        }\r\n        if (Cartesian2.equalsEpsilon(point, p2, CesiumMath.EPSILON14)) {\r\n            return Cartesian3.clone(Cartesian3.UNIT_Z, result);\r\n        }\r\n\r\n        v0 = Cartesian2.subtract(p1, p0, scratchCartesian1);\r\n        v1 = Cartesian2.subtract(p2, p0, scratchCartesian2);\r\n        v2 = Cartesian2.subtract(point, p0, scratchCartesian3);\r\n\r\n        dot00 = Cartesian2.dot(v0, v0);\r\n        dot01 = Cartesian2.dot(v0, v1);\r\n        dot02 = Cartesian2.dot(v0, v2);\r\n        dot11 = Cartesian2.dot(v1, v1);\r\n        dot12 = Cartesian2.dot(v1, v2);\r\n    } else {\r\n        if (Cartesian3.equalsEpsilon(point, p0, CesiumMath.EPSILON14)) {\r\n            return Cartesian3.clone(Cartesian3.UNIT_X, result);\r\n        }\r\n        if (Cartesian3.equalsEpsilon(point, p1, CesiumMath.EPSILON14)) {\r\n            return Cartesian3.clone(Cartesian3.UNIT_Y, result);\r\n        }\r\n        if (Cartesian3.equalsEpsilon(point, p2, CesiumMath.EPSILON14)) {\r\n            return Cartesian3.clone(Cartesian3.UNIT_Z, result);\r\n        }\r\n\r\n        v0 = Cartesian3.subtract(p1, p0, scratchCartesian1);\r\n        v1 = Cartesian3.subtract(p2, p0, scratchCartesian2);\r\n        v2 = Cartesian3.subtract(point, p0, scratchCartesian3);\r\n\r\n        dot00 = Cartesian3.dot(v0, v0);\r\n        dot01 = Cartesian3.dot(v0, v1);\r\n        dot02 = Cartesian3.dot(v0, v2);\r\n        dot11 = Cartesian3.dot(v1, v1);\r\n        dot12 = Cartesian3.dot(v1, v2);\r\n    }\r\n\r\n    result.y = dot11 * dot02 - dot01 * dot12;\r\n    result.z = dot00 * dot12 - dot01 * dot02;\r\n    // var q = dot00 * dot11 - dot01 * dot01;\r\n\r\n    // This is done to avoid dividing by infinity causing a NaN\r\n    if (result.y !== 0) {\r\n        console.log(dot00)\r\n        console.log(dot11)\r\n        console.log(dot01)\r\n        console.log(dot01)\r\n        console.log(dot00 * dot11 - dot01 * dot01)\r\n        result.y /= (dot00 * dot11 - dot01 * dot01);\r\n    }\r\n    if (result.z !== 0) {\r\n        result.z /= (dot00 * dot11 - dot01 * dot01);\r\n    }\r\n\r\n    result.x = 1.0 - result.y - result.z;\r\n    return result;\r\n}\r\nexport default barycentricCoordinates;\r\n","import defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\n\r\n/**\r\n * Encapsulates an algorithm to optimize triangles for the post\r\n * vertex-shader cache.  This is based on the 2007 SIGGRAPH paper\r\n * 'Fast Triangle Reordering for Vertex Locality and Reduced Overdraw.'\r\n * The runtime is linear but several passes are made.\r\n *\r\n * @namespace Tipsify\r\n *\r\n * @see <a href='http://gfx.cs.princeton.edu/pubs/Sander_2007_%3ETR/tipsy.pdf'>\r\n * Fast Triangle Reordering for Vertex Locality and Reduced Overdraw</a>\r\n * by Sander, Nehab, and Barczak\r\n *\r\n * @private\r\n */\r\nvar Tipsify = {};\r\n\r\n/**\r\n * Calculates the average cache miss ratio (ACMR) for a given set of indices.\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Number[]} options.indices Lists triads of numbers corresponding to the indices of the vertices\r\n *                        in the vertex buffer that define the geometry's triangles.\r\n * @param {Number} [options.maximumIndex] The maximum value of the elements in <code>args.indices</code>.\r\n *                                     If not supplied, this value will be computed.\r\n * @param {Number} [options.cacheSize=24] The number of vertices that can be stored in the cache at any one time.\r\n * @returns {Number} The average cache miss ratio (ACMR).\r\n *\r\n * @exception {DeveloperError} indices length must be a multiple of three.\r\n * @exception {DeveloperError} cacheSize must be greater than two.\r\n *\r\n * @example\r\n * var indices = [0, 1, 2, 3, 4, 5];\r\n * var maxIndex = 5;\r\n * var cacheSize = 3;\r\n * var acmr = Cesium.Tipsify.calculateACMR({indices : indices, maxIndex : maxIndex, cacheSize : cacheSize});\r\n */\r\nTipsify.calculateACMR = function (options) {\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n    var indices = options.indices;\r\n    var maximumIndex = options.maximumIndex;\r\n    var cacheSize = defaultValue(options.cacheSize, 24);\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(indices)) {\r\n        throw new DeveloperError('indices is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var numIndices = indices.length;\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (numIndices < 3 || numIndices % 3 !== 0) {\r\n        throw new DeveloperError('indices length must be a multiple of three.');\r\n    }\r\n    if (maximumIndex <= 0) {\r\n        throw new DeveloperError('maximumIndex must be greater than zero.');\r\n    }\r\n    if (cacheSize < 3) {\r\n        throw new DeveloperError('cacheSize must be greater than two.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    // Compute the maximumIndex if not given\r\n    if (!defined(maximumIndex)) {\r\n        maximumIndex = 0;\r\n        var currentIndex = 0;\r\n        var intoIndices = indices[currentIndex];\r\n        while (currentIndex < numIndices) {\r\n            if (intoIndices > maximumIndex) {\r\n                maximumIndex = intoIndices;\r\n            }\r\n            ++currentIndex;\r\n            intoIndices = indices[currentIndex];\r\n        }\r\n    }\r\n\r\n    // Vertex time stamps\r\n    var vertexTimeStamps = [];\r\n    for (var i = 0; i < maximumIndex + 1; i++) {\r\n        vertexTimeStamps[i] = 0;\r\n    }\r\n\r\n    // Cache processing\r\n    var s = cacheSize + 1;\r\n    for (var j = 0; j < numIndices; ++j) {\r\n        if (s - vertexTimeStamps[indices[j]] > cacheSize) {\r\n            vertexTimeStamps[indices[j]] = s;\r\n            ++s;\r\n        }\r\n    }\r\n\r\n    return (s - cacheSize + 1) / (numIndices / 3);\r\n};\r\n\r\n/**\r\n * Optimizes triangles for the post-vertex shader cache.\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Number[]} options.indices Lists triads of numbers corresponding to the indices of the vertices\r\n *                        in the vertex buffer that define the geometry's triangles.\r\n * @param {Number} [options.maximumIndex] The maximum value of the elements in <code>args.indices</code>.\r\n *                                     If not supplied, this value will be computed.\r\n * @param {Number} [options.cacheSize=24] The number of vertices that can be stored in the cache at any one time.\r\n * @returns {Number[]} A list of the input indices in an optimized order.\r\n *\r\n * @exception {DeveloperError} indices length must be a multiple of three.\r\n * @exception {DeveloperError} cacheSize must be greater than two.\r\n *\r\n * @example\r\n * var indices = [0, 1, 2, 3, 4, 5];\r\n * var maxIndex = 5;\r\n * var cacheSize = 3;\r\n * var reorderedIndices = Cesium.Tipsify.tipsify({indices : indices, maxIndex : maxIndex, cacheSize : cacheSize});\r\n */\r\nTipsify.tipsify = function (options) {\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n    var indices = options.indices;\r\n    var maximumIndex = options.maximumIndex;\r\n    var cacheSize = defaultValue(options.cacheSize, 24);\r\n\r\n    var cursor;\r\n\r\n    function skipDeadEnd(vertices, deadEnd, indices, maximumIndexPlusOne) {\r\n        while (deadEnd.length >= 1) {\r\n            // while the stack is not empty\r\n            var d = deadEnd[deadEnd.length - 1]; // top of the stack\r\n            deadEnd.splice(deadEnd.length - 1, 1); // pop the stack\r\n\r\n            if (vertices[d].numLiveTriangles > 0) {\r\n                return d;\r\n            }\r\n        }\r\n\r\n        while (cursor < maximumIndexPlusOne) {\r\n            if (vertices[cursor].numLiveTriangles > 0) {\r\n                ++cursor;\r\n                return cursor - 1;\r\n            }\r\n            ++cursor;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    function getNextVertex(indices, cacheSize, oneRing, vertices, s, deadEnd, maximumIndexPlusOne) {\r\n        var n = -1;\r\n        var p;\r\n        var m = -1;\r\n        var itOneRing = 0;\r\n        while (itOneRing < oneRing.length) {\r\n            var index = oneRing[itOneRing];\r\n            if (vertices[index].numLiveTriangles) {\r\n                p = 0;\r\n                if (s - vertices[index].timeStamp + 2 * vertices[index].numLiveTriangles <= cacheSize) {\r\n                    p = s - vertices[index].timeStamp;\r\n                }\r\n                if (p > m || m === -1) {\r\n                    m = p;\r\n                    n = index;\r\n                }\r\n            }\r\n            ++itOneRing;\r\n        }\r\n        if (n === -1) {\r\n            return skipDeadEnd(vertices, deadEnd, indices, maximumIndexPlusOne);\r\n        }\r\n        return n;\r\n    }\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(indices)) {\r\n        throw new DeveloperError('indices is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var numIndices = indices.length;\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (numIndices < 3 || numIndices % 3 !== 0) {\r\n        throw new DeveloperError('indices length must be a multiple of three.');\r\n    }\r\n    if (maximumIndex <= 0) {\r\n        throw new DeveloperError('maximumIndex must be greater than zero.');\r\n    }\r\n    if (cacheSize < 3) {\r\n        throw new DeveloperError('cacheSize must be greater than two.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    // Determine maximum index\r\n    var maximumIndexPlusOne = 0;\r\n    var currentIndex = 0;\r\n    var intoIndices = indices[currentIndex];\r\n    var endIndex = numIndices;\r\n    if (defined(maximumIndex)) {\r\n        maximumIndexPlusOne = maximumIndex + 1;\r\n    } else {\r\n        while (currentIndex < endIndex) {\r\n            if (intoIndices > maximumIndexPlusOne) {\r\n                maximumIndexPlusOne = intoIndices;\r\n            }\r\n            ++currentIndex;\r\n            intoIndices = indices[currentIndex];\r\n        }\r\n        if (maximumIndexPlusOne === -1) {\r\n            return 0;\r\n        }\r\n        ++maximumIndexPlusOne;\r\n    }\r\n\r\n    // Vertices\r\n    var vertices = [];\r\n    var i;\r\n    for (i = 0; i < maximumIndexPlusOne; i++) {\r\n        vertices[i] = {\r\n            numLiveTriangles: 0,\r\n            timeStamp: 0,\r\n            vertexTriangles: []\r\n        };\r\n    }\r\n    currentIndex = 0;\r\n    var triangle = 0;\r\n    while (currentIndex < endIndex) {\r\n        vertices[indices[currentIndex]].vertexTriangles.push(triangle);\r\n        ++vertices[indices[currentIndex]].numLiveTriangles;\r\n        vertices[indices[currentIndex + 1]].vertexTriangles.push(triangle);\r\n        ++vertices[indices[currentIndex + 1]].numLiveTriangles;\r\n        vertices[indices[currentIndex + 2]].vertexTriangles.push(triangle);\r\n        ++vertices[indices[currentIndex + 2]].numLiveTriangles;\r\n        ++triangle;\r\n        currentIndex += 3;\r\n    }\r\n\r\n    // Starting index\r\n    var f = 0;\r\n\r\n    // Time Stamp\r\n    var s = cacheSize + 1;\r\n    cursor = 1;\r\n\r\n    // Process\r\n    var oneRing = [];\r\n    var deadEnd = []; //Stack\r\n    var vertex;\r\n    var intoVertices;\r\n    var currentOutputIndex = 0;\r\n    var outputIndices = [];\r\n    var numTriangles = numIndices / 3;\r\n    var triangleEmitted = [];\r\n    for (i = 0; i < numTriangles; i++) {\r\n        triangleEmitted[i] = false;\r\n    }\r\n    var index;\r\n    var limit;\r\n    while (f !== -1) {\r\n        oneRing = [];\r\n        intoVertices = vertices[f];\r\n        limit = intoVertices.vertexTriangles.length;\r\n        for (var k = 0; k < limit; ++k) {\r\n            triangle = intoVertices.vertexTriangles[k];\r\n            if (!triangleEmitted[triangle]) {\r\n                triangleEmitted[triangle] = true;\r\n                currentIndex = triangle + triangle + triangle;\r\n                for (var j = 0; j < 3; ++j) {\r\n                    // Set this index as a possible next index\r\n                    index = indices[currentIndex];\r\n                    oneRing.push(index);\r\n                    deadEnd.push(index);\r\n\r\n                    // Output index\r\n                    outputIndices[currentOutputIndex] = index;\r\n                    ++currentOutputIndex;\r\n\r\n                    // Cache processing\r\n                    vertex = vertices[index];\r\n                    --vertex.numLiveTriangles;\r\n                    if (s - vertex.timeStamp > cacheSize) {\r\n                        vertex.timeStamp = s;\r\n                        ++s;\r\n                    }\r\n                    ++currentIndex;\r\n                }\r\n            }\r\n        }\r\n        f = getNextVertex(indices, cacheSize, oneRing, vertices, s, deadEnd, maximumIndexPlusOne);\r\n    }\r\n\r\n    return outputIndices;\r\n};\r\nexport default Tipsify;\r\n","import AttributeCompression from './AttributeCompression.js';\r\nimport barycentricCoordinates from './barycentricCoordinates.js';\r\nimport BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian2 from './Cartesian2.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Cartesian4 from './Cartesian4.js';\r\nimport Cartographic from './Cartographic.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport EncodedCartesian3 from './EncodedCartesian3.js';\r\nimport GeographicProjection from './GeographicProjection.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryType from './GeometryType.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport Intersect from './Intersect.js';\r\nimport IntersectionTests from './IntersectionTests.js';\r\nimport CesiumMath from './Math.js';\r\nimport Matrix3 from './Matrix3.js';\r\nimport Matrix4 from './Matrix4.js';\r\nimport Plane from './Plane.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\nimport Tipsify from './Tipsify.js';\r\n\r\n/**\r\n * Content pipeline functions for geometries.\r\n *\r\n * @namespace GeometryPipeline\r\n *\r\n * @see Geometry\r\n */\r\nvar GeometryPipeline = {};\r\n\r\nfunction addTriangle(lines, index, i0, i1, i2) {\r\n    lines[index++] = i0;\r\n    lines[index++] = i1;\r\n\r\n    lines[index++] = i1;\r\n    lines[index++] = i2;\r\n\r\n    lines[index++] = i2;\r\n    lines[index] = i0;\r\n}\r\n\r\nfunction trianglesToLines(triangles) {\r\n    var count = triangles.length;\r\n    var size = (count / 3) * 6;\r\n    var lines = IndexDatatype.createTypedArray(count, size);\r\n\r\n    var index = 0;\r\n    for (var i = 0; i < count; i += 3, index += 6) {\r\n        addTriangle(lines, index, triangles[i], triangles[i + 1], triangles[i + 2]);\r\n    }\r\n\r\n    return lines;\r\n}\r\n\r\nfunction triangleStripToLines(triangles) {\r\n    var count = triangles.length;\r\n    if (count >= 3) {\r\n        var size = (count - 2) * 6;\r\n        var lines = IndexDatatype.createTypedArray(count, size);\r\n\r\n        addTriangle(lines, 0, triangles[0], triangles[1], triangles[2]);\r\n        var index = 6;\r\n\r\n        for (var i = 3; i < count; ++i, index += 6) {\r\n            addTriangle(lines, index, triangles[i - 1], triangles[i], triangles[i - 2]);\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    return new Uint16Array();\r\n}\r\n\r\nfunction triangleFanToLines(triangles) {\r\n    if (triangles.length > 0) {\r\n        var count = triangles.length - 1;\r\n        var size = (count - 1) * 6;\r\n        var lines = IndexDatatype.createTypedArray(count, size);\r\n\r\n        var base = triangles[0];\r\n        var index = 0;\r\n        for (var i = 1; i < count; ++i, index += 6) {\r\n            addTriangle(lines, index, base, triangles[i], triangles[i + 1]);\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    return new Uint16Array();\r\n}\r\n\r\n/**\r\n * Converts a geometry's triangle indices to line indices.  If the geometry has an <code>indices</code>\r\n * and its <code>primitiveType</code> is <code>TRIANGLES</code>, <code>TRIANGLE_STRIP</code>,\r\n * <code>TRIANGLE_FAN</code>, it is converted to <code>LINES</code>; otherwise, the geometry is not changed.\r\n * <p>\r\n * This is commonly used to create a wireframe geometry for visual debugging.\r\n * </p>\r\n *\r\n * @param {Geometry} geometry The geometry to modify.\r\n * @returns {Geometry} The modified <code>geometry</code> argument, with its triangle indices converted to lines.\r\n *\r\n * @exception {DeveloperError} geometry.primitiveType must be TRIANGLES, TRIANGLE_STRIP, or TRIANGLE_FAN.\r\n *\r\n * @example\r\n * geometry = Cesium.GeometryPipeline.toWireframe(geometry);\r\n */\r\nGeometryPipeline.toWireframe = function (geometry) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(geometry)) {\r\n        throw new DeveloperError('geometry is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var indices = geometry.indices;\r\n    if (defined(indices)) {\r\n        switch (geometry.primitiveType) {\r\n            case PrimitiveType.TRIANGLES:\r\n                geometry.indices = trianglesToLines(indices);\r\n                break;\r\n            case PrimitiveType.TRIANGLE_STRIP:\r\n                geometry.indices = triangleStripToLines(indices);\r\n                break;\r\n            case PrimitiveType.TRIANGLE_FAN:\r\n                geometry.indices = triangleFanToLines(indices);\r\n                break;\r\n            //>>includeStart('debug', pragmas.debug);\r\n            default:\r\n                throw new DeveloperError('geometry.primitiveType must be TRIANGLES, TRIANGLE_STRIP, or TRIANGLE_FAN.');\r\n            //>>includeEnd('debug');\r\n        }\r\n\r\n        geometry.primitiveType = PrimitiveType.LINES;\r\n    }\r\n\r\n    return geometry;\r\n};\r\n\r\n/**\r\n * Creates a new {@link Geometry} with <code>LINES</code> representing the provided\r\n * attribute (<code>attributeName</code>) for the provided geometry.  This is used to\r\n * visualize vector attributes like normals, tangents, and bitangents.\r\n *\r\n * @param {Geometry} geometry The <code>Geometry</code> instance with the attribute.\r\n * @param {String} [attributeName='normal'] The name of the attribute.\r\n * @param {Number} [length=10000.0] The length of each line segment in meters.  This can be negative to point the vector in the opposite direction.\r\n * @returns {Geometry} A new <code>Geometry</code> instance with line segments for the vector.\r\n *\r\n * @exception {DeveloperError} geometry.attributes must have an attribute with the same name as the attributeName parameter.\r\n *\r\n * @example\r\n * var geometry = Cesium.GeometryPipeline.createLineSegmentsForVectors(instance.geometry, 'bitangent', 100000.0);\r\n */\r\nGeometryPipeline.createLineSegmentsForVectors = function (geometry, attributeName, length) {\r\n    attributeName = defaultValue(attributeName, 'normal');\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(geometry)) {\r\n        throw new DeveloperError('geometry is required.');\r\n    }\r\n    if (!defined(geometry.attributes.position)) {\r\n        throw new DeveloperError('geometry.attributes.position is required.');\r\n    }\r\n    if (!defined(geometry.attributes[attributeName])) {\r\n        throw new DeveloperError('geometry.attributes must have an attribute with the same name as the attributeName parameter, ' + attributeName + '.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    length = defaultValue(length, 10000.0);\r\n\r\n    var positions = geometry.attributes.position.values;\r\n    var vectors = geometry.attributes[attributeName].values;\r\n    var positionsLength = positions.length;\r\n\r\n    var newPositions = new Float64Array(2 * positionsLength);\r\n\r\n    var j = 0;\r\n    for (var i = 0; i < positionsLength; i += 3) {\r\n        newPositions[j++] = positions[i];\r\n        newPositions[j++] = positions[i + 1];\r\n        newPositions[j++] = positions[i + 2];\r\n\r\n        newPositions[j++] = positions[i] + vectors[i] * length;\r\n        newPositions[j++] = positions[i + 1] + vectors[i + 1] * length;\r\n        newPositions[j++] = positions[i + 2] + vectors[i + 2] * length;\r\n    }\r\n\r\n    var newBoundingSphere;\r\n    var bs = geometry.boundingSphere;\r\n    if (defined(bs)) {\r\n        newBoundingSphere = new BoundingSphere(bs.center, bs.radius + length);\r\n    }\r\n\r\n    return new Geometry({\r\n        attributes: {\r\n            position: new GeometryAttribute({\r\n                componentDatatype: ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute: 3,\r\n                values: newPositions\r\n            })\r\n        },\r\n        primitiveType: PrimitiveType.LINES,\r\n        boundingSphere: newBoundingSphere\r\n    });\r\n};\r\n\r\n/**\r\n * Creates an object that maps attribute names to unique locations (indices)\r\n * for matching vertex attributes and shader programs.\r\n *\r\n * @param {Geometry} geometry The geometry, which is not modified, to create the object for.\r\n * @returns {Object} An object with attribute name / index pairs.\r\n *\r\n * @example\r\n * var attributeLocations = Cesium.GeometryPipeline.createAttributeLocations(geometry);\r\n * // Example output\r\n * // {\r\n * //   'position' : 0,\r\n * //   'normal' : 1\r\n * // }\r\n */\r\nGeometryPipeline.createAttributeLocations = function (geometry) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(geometry)) {\r\n        throw new DeveloperError('geometry is required.');\r\n    }\r\n    //>>includeEnd('debug')\r\n\r\n    // There can be a WebGL performance hit when attribute 0 is disabled, so\r\n    // assign attribute locations to well-known attributes.\r\n    var semantics = [\r\n        'position',\r\n        'positionHigh',\r\n        'positionLow',\r\n\r\n        // From VertexFormat.position - after 2D projection and high-precision encoding\r\n        'position3DHigh',\r\n        'position3DLow',\r\n        'position2DHigh',\r\n        'position2DLow',\r\n\r\n        // From Primitive\r\n        'pickColor',\r\n\r\n        // From VertexFormat\r\n        'normal',\r\n        'st',\r\n        'tangent',\r\n        'bitangent',\r\n\r\n        // For shadow volumes\r\n        'extrudeDirection',\r\n\r\n        // From compressing texture coordinates and normals\r\n        'compressedAttributes'\r\n    ];\r\n\r\n    var attributes = geometry.attributes;\r\n    var indices = {};\r\n    var j = 0;\r\n    var i;\r\n    var len = semantics.length;\r\n\r\n    // Attribute locations for well-known attributes\r\n    for (i = 0; i < len; ++i) {\r\n        var semantic = semantics[i];\r\n\r\n        if (defined(attributes[semantic])) {\r\n            indices[semantic] = j++;\r\n        }\r\n    }\r\n\r\n    // Locations for custom attributes\r\n    for (var name in attributes) {\r\n        if (attributes.hasOwnProperty(name) && !defined(indices[name])) {\r\n            indices[name] = j++;\r\n        }\r\n    }\r\n\r\n    return indices;\r\n};\r\n\r\n/**\r\n * Reorders a geometry's attributes and <code>indices</code> to achieve better performance from the GPU's pre-vertex-shader cache.\r\n *\r\n * @param {Geometry} geometry The geometry to modify.\r\n * @returns {Geometry} The modified <code>geometry</code> argument, with its attributes and indices reordered for the GPU's pre-vertex-shader cache.\r\n *\r\n * @exception {DeveloperError} Each attribute array in geometry.attributes must have the same number of attributes.\r\n *\r\n *\r\n * @example\r\n * geometry = Cesium.GeometryPipeline.reorderForPreVertexCache(geometry);\r\n *\r\n * @see GeometryPipeline.reorderForPostVertexCache\r\n */\r\nGeometryPipeline.reorderForPreVertexCache = function (geometry) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(geometry)) {\r\n        throw new DeveloperError('geometry is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var numVertices = Geometry.computeNumberOfVertices(geometry);\r\n\r\n    var indices = geometry.indices;\r\n    if (defined(indices)) {\r\n        var indexCrossReferenceOldToNew = new Int32Array(numVertices);\r\n        for (var i = 0; i < numVertices; i++) {\r\n            indexCrossReferenceOldToNew[i] = -1;\r\n        }\r\n\r\n        // Construct cross reference and reorder indices\r\n        var indicesIn = indices;\r\n        var numIndices = indicesIn.length;\r\n        var indicesOut = IndexDatatype.createTypedArray(numVertices, numIndices);\r\n\r\n        var intoIndicesIn = 0;\r\n        var intoIndicesOut = 0;\r\n        var nextIndex = 0;\r\n        var tempIndex;\r\n        while (intoIndicesIn < numIndices) {\r\n            tempIndex = indexCrossReferenceOldToNew[indicesIn[intoIndicesIn]];\r\n            if (tempIndex !== -1) {\r\n                indicesOut[intoIndicesOut] = tempIndex;\r\n            } else {\r\n                tempIndex = indicesIn[intoIndicesIn];\r\n                indexCrossReferenceOldToNew[tempIndex] = nextIndex;\r\n\r\n                indicesOut[intoIndicesOut] = nextIndex;\r\n                ++nextIndex;\r\n            }\r\n            ++intoIndicesIn;\r\n            ++intoIndicesOut;\r\n        }\r\n        geometry.indices = indicesOut;\r\n\r\n        // Reorder attributes\r\n        var attributes = geometry.attributes;\r\n        for (var property in attributes) {\r\n            if (attributes.hasOwnProperty(property) && defined(attributes[property]) && defined(attributes[property].values)) {\r\n                var attribute = attributes[property];\r\n                var elementsIn = attribute.values;\r\n                var intoElementsIn = 0;\r\n                var numComponents = attribute.componentsPerAttribute;\r\n                var elementsOut = ComponentDatatype.createTypedArray(attribute.componentDatatype, nextIndex * numComponents);\r\n                while (intoElementsIn < numVertices) {\r\n                    var temp = indexCrossReferenceOldToNew[intoElementsIn];\r\n                    if (temp !== -1) {\r\n                        for (var j = 0; j < numComponents; j++) {\r\n                            elementsOut[numComponents * temp + j] = elementsIn[numComponents * intoElementsIn + j];\r\n                        }\r\n                    }\r\n                    ++intoElementsIn;\r\n                }\r\n                attribute.values = elementsOut;\r\n            }\r\n        }\r\n    }\r\n\r\n    return geometry;\r\n};\r\n\r\n/**\r\n * Reorders a geometry's <code>indices</code> to achieve better performance from the GPU's\r\n * post vertex-shader cache by using the Tipsify algorithm.  If the geometry <code>primitiveType</code>\r\n * is not <code>TRIANGLES</code> or the geometry does not have an <code>indices</code>, this function has no effect.\r\n *\r\n * @param {Geometry} geometry The geometry to modify.\r\n * @param {Number} [cacheCapacity=24] The number of vertices that can be held in the GPU's vertex cache.\r\n * @returns {Geometry} The modified <code>geometry</code> argument, with its indices reordered for the post-vertex-shader cache.\r\n *\r\n * @exception {DeveloperError} cacheCapacity must be greater than two.\r\n *\r\n *\r\n * @example\r\n * geometry = Cesium.GeometryPipeline.reorderForPostVertexCache(geometry);\r\n *\r\n * @see GeometryPipeline.reorderForPreVertexCache\r\n * @see {@link http://gfx.cs.princ0eton.edu/pubs/Sander_2007_%3ETR/tipsy.pdf|Fast Triangle Reordering for Vertex Locality and Reduced Overdraw}\r\n * by Sander, Nehab, and Barczak\r\n */\r\nGeometryPipeline.reorderForPostVertexCache = function (geometry, cacheCapacity) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(geometry)) {\r\n        throw new DeveloperError('geometry is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var indices = geometry.indices;\r\n    if (geometry.primitiveType === PrimitiveType.TRIANGLES && defined(indices)) {\r\n        var numIndices = indices.length;\r\n        var maximumIndex = 0;\r\n        for (var j = 0; j < numIndices; j++) {\r\n            if (indices[j] > maximumIndex) {\r\n                maximumIndex = indices[j];\r\n            }\r\n        }\r\n        geometry.indices = Tipsify.tipsify({\r\n            indices: indices,\r\n            maximumIndex: maximumIndex,\r\n            cacheSize: cacheCapacity\r\n        });\r\n    }\r\n\r\n    return geometry;\r\n};\r\n\r\nfunction copyAttributesDescriptions(attributes) {\r\n    var newAttributes = {};\r\n\r\n    for (var attribute in attributes) {\r\n        if (attributes.hasOwnProperty(attribute) && defined(attributes[attribute]) && defined(attributes[attribute].values)) {\r\n            var attr = attributes[attribute];\r\n            newAttributes[attribute] = new GeometryAttribute({\r\n                componentDatatype: attr.componentDatatype,\r\n                componentsPerAttribute: attr.componentsPerAttribute,\r\n                normalize: attr.normalize,\r\n                values: []\r\n            });\r\n        }\r\n    }\r\n\r\n    return newAttributes;\r\n}\r\n\r\nfunction copyVertex(destinationAttributes, sourceAttributes, index) {\r\n    for (var attribute in sourceAttributes) {\r\n        if (sourceAttributes.hasOwnProperty(attribute) && defined(sourceAttributes[attribute]) && defined(sourceAttributes[attribute].values)) {\r\n            var attr = sourceAttributes[attribute];\r\n\r\n            for (var k = 0; k < attr.componentsPerAttribute; ++k) {\r\n                destinationAttributes[attribute].values.push(attr.values[index * attr.componentsPerAttribute + k]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Splits a geometry into multiple geometries, if necessary, to ensure that indices in the\r\n * <code>indices</code> fit into unsigned shorts.  This is used to meet the WebGL requirements\r\n * when unsigned int indices are not supported.\r\n * <p>\r\n * If the geometry does not have any <code>indices</code>, this function has no effect.\r\n * </p>\r\n *\r\n * @param {Geometry} geometry The geometry to be split into multiple geometries.\r\n * @returns {Geometry[]} An array of geometries, each with indices that fit into unsigned shorts.\r\n *\r\n * @exception {DeveloperError} geometry.primitiveType must equal to PrimitiveType.TRIANGLES, PrimitiveType.LINES, or PrimitiveType.POINTS\r\n * @exception {DeveloperError} All geometry attribute lists must have the same number of attributes.\r\n *\r\n * @example\r\n * var geometries = Cesium.GeometryPipeline.fitToUnsignedShortIndices(geometry);\r\n */\r\nGeometryPipeline.fitToUnsignedShortIndices = function (geometry) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(geometry)) {\r\n        throw new DeveloperError('geometry is required.');\r\n    }\r\n    if (\r\n        defined(geometry.indices) &&\r\n        geometry.primitiveType !== PrimitiveType.TRIANGLES &&\r\n        geometry.primitiveType !== PrimitiveType.LINES &&\r\n        geometry.primitiveType !== PrimitiveType.POINTS\r\n    ) {\r\n        throw new DeveloperError('geometry.primitiveType must equal to PrimitiveType.TRIANGLES, PrimitiveType.LINES, or PrimitiveType.POINTS.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var geometries = [];\r\n\r\n    // If there's an index list and more than 64K attributes, it is possible that\r\n    // some indices are outside the range of unsigned short [0, 64K - 1]\r\n    var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\r\n    if (defined(geometry.indices) && numberOfVertices >= CesiumMath.SIXTY_FOUR_KILOBYTES) {\r\n        var oldToNewIndex = [];\r\n        var newIndices = [];\r\n        var currentIndex = 0;\r\n        var newAttributes = copyAttributesDescriptions(geometry.attributes);\r\n\r\n        var originalIndices = geometry.indices;\r\n        var numberOfIndices = originalIndices.length;\r\n\r\n        var indicesPerPrimitive;\r\n\r\n        if (geometry.primitiveType === PrimitiveType.TRIANGLES) {\r\n            indicesPerPrimitive = 3;\r\n        } else if (geometry.primitiveType === PrimitiveType.LINES) {\r\n            indicesPerPrimitive = 2;\r\n        } else if (geometry.primitiveType === PrimitiveType.POINTS) {\r\n            indicesPerPrimitive = 1;\r\n        }\r\n\r\n        for (var j = 0; j < numberOfIndices; j += indicesPerPrimitive) {\r\n            for (var k = 0; k < indicesPerPrimitive; ++k) {\r\n                var x = originalIndices[j + k];\r\n                var i = oldToNewIndex[x];\r\n                if (!defined(i)) {\r\n                    i = currentIndex++;\r\n                    oldToNewIndex[x] = i;\r\n                    copyVertex(newAttributes, geometry.attributes, x);\r\n                }\r\n                newIndices.push(i);\r\n            }\r\n\r\n            if (currentIndex + indicesPerPrimitive >= CesiumMath.SIXTY_FOUR_KILOBYTES) {\r\n                geometries.push(\r\n                    new Geometry({\r\n                        attributes: newAttributes,\r\n                        indices: newIndices,\r\n                        primitiveType: geometry.primitiveType,\r\n                        boundingSphere: geometry.boundingSphere,\r\n                        boundingSphereCV: geometry.boundingSphereCV\r\n                    })\r\n                );\r\n\r\n                // Reset for next vertex-array\r\n                oldToNewIndex = [];\r\n                newIndices = [];\r\n                currentIndex = 0;\r\n                newAttributes = copyAttributesDescriptions(geometry.attributes);\r\n            }\r\n        }\r\n\r\n        if (newIndices.length !== 0) {\r\n            geometries.push(\r\n                new Geometry({\r\n                    attributes: newAttributes,\r\n                    indices: newIndices,\r\n                    primitiveType: geometry.primitiveType,\r\n                    boundingSphere: geometry.boundingSphere,\r\n                    boundingSphereCV: geometry.boundingSphereCV\r\n                })\r\n            );\r\n        }\r\n    } else {\r\n        // No need to split into multiple geometries\r\n        geometries.push(geometry);\r\n    }\r\n\r\n    return geometries;\r\n};\r\n\r\nvar scratchProjectTo2DCartesian3 = new Cartesian3();\r\nvar scratchProjectTo2DCartographic = new Cartographic();\r\n\r\n/**\r\n * Projects a geometry's 3D <code>position</code> attribute to 2D, replacing the <code>position</code>\r\n * attribute with separate <code>position3D</code> and <code>position2D</code> attributes.\r\n * <p>\r\n * If the geometry does not have a <code>position</code>, this function has no effect.\r\n * </p>\r\n *\r\n * @param {Geometry} geometry The geometry to modify.\r\n * @param {String} attributeName The name of the attribute.\r\n * @param {String} attributeName3D The name of the attribute in 3D.\r\n * @param {String} attributeName2D The name of the attribute in 2D.\r\n * @param {Object} [projection=new GeographicProjection()] The projection to use.\r\n * @returns {Geometry} The modified <code>geometry</code> argument with <code>position3D</code> and <code>position2D</code> attributes.\r\n *\r\n * @exception {DeveloperError} geometry must have attribute matching the attributeName argument.\r\n * @exception {DeveloperError} The attribute componentDatatype must be ComponentDatatype.DOUBLE.\r\n * @exception {DeveloperError} Could not project a point to 2D.\r\n *\r\n * @example\r\n * geometry = Cesium.GeometryPipeline.projectTo2D(geometry, 'position', 'position3D', 'position2D');\r\n */\r\nGeometryPipeline.projectTo2D = function (geometry, attributeName, attributeName3D, attributeName2D, projection) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(geometry)) {\r\n        throw new DeveloperError('geometry is required.');\r\n    }\r\n    if (!defined(attributeName)) {\r\n        throw new DeveloperError('attributeName is required.');\r\n    }\r\n    if (!defined(attributeName3D)) {\r\n        throw new DeveloperError('attributeName3D is required.');\r\n    }\r\n    if (!defined(attributeName2D)) {\r\n        throw new DeveloperError('attributeName2D is required.');\r\n    }\r\n    if (!defined(geometry.attributes[attributeName])) {\r\n        throw new DeveloperError('geometry must have attribute matching the attributeName argument: ' + attributeName + '.');\r\n    }\r\n    if (geometry.attributes[attributeName].componentDatatype !== ComponentDatatype.DOUBLE) {\r\n        throw new DeveloperError('The attribute componentDatatype must be ComponentDatatype.DOUBLE.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var attribute = geometry.attributes[attributeName];\r\n    projection = defined(projection) ? projection : new GeographicProjection();\r\n    var ellipsoid = projection.ellipsoid;\r\n\r\n    // Project original values to 2D.\r\n    var values3D = attribute.values;\r\n    var projectedValues = new Float64Array(values3D.length);\r\n    var index = 0;\r\n\r\n    for (var i = 0; i < values3D.length; i += 3) {\r\n        var value = Cartesian3.fromArray(values3D, i, scratchProjectTo2DCartesian3);\r\n\r\n        var lonLat = ellipsoid.cartesianToCartographic(value, scratchProjectTo2DCartographic);\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(lonLat)) {\r\n            throw new DeveloperError('Could not project point (' + value.x + ', ' + value.y + ', ' + value.z + ') to 2D.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var projectedLonLat = projection.project(lonLat, scratchProjectTo2DCartesian3);\r\n\r\n        projectedValues[index++] = projectedLonLat.x;\r\n        projectedValues[index++] = projectedLonLat.y;\r\n        projectedValues[index++] = projectedLonLat.z;\r\n    }\r\n\r\n    // Rename original cartesians to WGS84 cartesians.\r\n    geometry.attributes[attributeName3D] = attribute;\r\n\r\n    // Replace original cartesians with 2D projected cartesians\r\n    geometry.attributes[attributeName2D] = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.DOUBLE,\r\n        componentsPerAttribute: 3,\r\n        values: projectedValues\r\n    });\r\n    delete geometry.attributes[attributeName];\r\n\r\n    return geometry;\r\n};\r\n\r\nvar encodedResult = {\r\n    high: 0.0,\r\n    low: 0.0\r\n};\r\n\r\n/**\r\n * Encodes floating-point geometry attribute values as two separate attributes to improve\r\n * rendering precision.\r\n * <p>\r\n * This is commonly used to create high-precision position vertex attributes.\r\n * </p>\r\n *\r\n * @param {Geometry} geometry The geometry to modify.\r\n * @param {String} attributeName The name of the attribute.\r\n * @param {String} attributeHighName The name of the attribute for the encoded high bits.\r\n * @param {String} attributeLowName The name of the attribute for the encoded low bits.\r\n * @returns {Geometry} The modified <code>geometry</code> argument, with its encoded attribute.\r\n *\r\n * @exception {DeveloperError} geometry must have attribute matching the attributeName argument.\r\n * @exception {DeveloperError} The attribute componentDatatype must be ComponentDatatype.DOUBLE.\r\n *\r\n * @example\r\n * geometry = Cesium.GeometryPipeline.encodeAttribute(geometry, 'position3D', 'position3DHigh', 'position3DLow');\r\n */\r\nGeometryPipeline.encodeAttribute = function (geometry, attributeName, attributeHighName, attributeLowName) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(geometry)) {\r\n        throw new DeveloperError('geometry is required.');\r\n    }\r\n    if (!defined(attributeName)) {\r\n        throw new DeveloperError('attributeName is required.');\r\n    }\r\n    if (!defined(attributeHighName)) {\r\n        throw new DeveloperError('attributeHighName is required.');\r\n    }\r\n    if (!defined(attributeLowName)) {\r\n        throw new DeveloperError('attributeLowName is required.');\r\n    }\r\n    if (!defined(geometry.attributes[attributeName])) {\r\n        throw new DeveloperError('geometry must have attribute matching the attributeName argument: ' + attributeName + '.');\r\n    }\r\n    if (geometry.attributes[attributeName].componentDatatype !== ComponentDatatype.DOUBLE) {\r\n        throw new DeveloperError('The attribute componentDatatype must be ComponentDatatype.DOUBLE.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var attribute = geometry.attributes[attributeName];\r\n    var values = attribute.values;\r\n    var length = values.length;\r\n    var highValues = new Float32Array(length);\r\n    var lowValues = new Float32Array(length);\r\n\r\n    for (var i = 0; i < length; ++i) {\r\n        EncodedCartesian3.encode(values[i], encodedResult);\r\n        highValues[i] = encodedResult.high;\r\n        lowValues[i] = encodedResult.low;\r\n    }\r\n\r\n    var componentsPerAttribute = attribute.componentsPerAttribute;\r\n\r\n    geometry.attributes[attributeHighName] = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.FLOAT,\r\n        componentsPerAttribute: componentsPerAttribute,\r\n        values: highValues\r\n    });\r\n    geometry.attributes[attributeLowName] = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.FLOAT,\r\n        componentsPerAttribute: componentsPerAttribute,\r\n        values: lowValues\r\n    });\r\n    delete geometry.attributes[attributeName];\r\n\r\n    return geometry;\r\n};\r\n\r\nvar scratchCartesian3 = new Cartesian3();\r\n\r\nfunction transformPoint(matrix, attribute) {\r\n    if (defined(attribute)) {\r\n        var values = attribute.values;\r\n        var length = values.length;\r\n        for (var i = 0; i < length; i += 3) {\r\n            Cartesian3.unpack(values, i, scratchCartesian3);\r\n            Matrix4.multiplyByPoint(matrix, scratchCartesian3, scratchCartesian3);\r\n            Cartesian3.pack(scratchCartesian3, values, i);\r\n        }\r\n    }\r\n}\r\n\r\nfunction transformVector(matrix, attribute) {\r\n    if (defined(attribute)) {\r\n        var values = attribute.values;\r\n        var length = values.length;\r\n        for (var i = 0; i < length; i += 3) {\r\n            Cartesian3.unpack(values, i, scratchCartesian3);\r\n            Matrix3.multiplyByVector(matrix, scratchCartesian3, scratchCartesian3);\r\n            scratchCartesian3 = Cartesian3.normalize(scratchCartesian3, scratchCartesian3);\r\n            Cartesian3.pack(scratchCartesian3, values, i);\r\n        }\r\n    }\r\n}\r\n\r\nvar inverseTranspose = new Matrix4();\r\nvar normalMatrix = new Matrix3();\r\n\r\n/**\r\n * Transforms a geometry instance to world coordinates.  This changes\r\n * the instance's <code>modelMatrix</code> to {@link Matrix4.IDENTITY} and transforms the\r\n * following attributes if they are present: <code>position</code>, <code>normal</code>,\r\n * <code>tangent</code>, and <code>bitangent</code>.\r\n *\r\n * @param {GeometryInstance} instance The geometry instance to modify.\r\n * @returns {GeometryInstance} The modified <code>instance</code> argument, with its attributes transforms to world coordinates.\r\n *\r\n * @example\r\n * Cesium.GeometryPipeline.transformToWorldCoordinates(instance);\r\n */\r\nGeometryPipeline.transformToWorldCoordinates = function (instance) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(instance)) {\r\n        throw new DeveloperError('instance is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var modelMatrix = instance.modelMatrix;\r\n\r\n    if (Matrix4.equals(modelMatrix, Matrix4.IDENTITY)) {\r\n        // Already in world coordinates\r\n        return instance;\r\n    }\r\n\r\n    var attributes = instance.geometry.attributes;\r\n\r\n    // Transform attributes in known vertex formats\r\n    transformPoint(modelMatrix, attributes.position);\r\n    transformPoint(modelMatrix, attributes.prevPosition);\r\n    transformPoint(modelMatrix, attributes.nextPosition);\r\n\r\n    if (defined(attributes.normal) || defined(attributes.tangent) || defined(attributes.bitangent)) {\r\n        Matrix4.inverse(modelMatrix, inverseTranspose);\r\n        Matrix4.transpose(inverseTranspose, inverseTranspose);\r\n        Matrix4.getMatrix3(inverseTranspose, normalMatrix);\r\n\r\n        transformVector(normalMatrix, attributes.normal);\r\n        transformVector(normalMatrix, attributes.tangent);\r\n        transformVector(normalMatrix, attributes.bitangent);\r\n    }\r\n\r\n    var boundingSphere = instance.geometry.boundingSphere;\r\n    if (defined(boundingSphere)) {\r\n        instance.geometry.boundingSphere = BoundingSphere.transform(boundingSphere, modelMatrix, boundingSphere);\r\n    }\r\n\r\n    instance.modelMatrix = Matrix4.clone(Matrix4.IDENTITY);\r\n\r\n    return instance;\r\n};\r\n\r\nfunction findAttributesInAllGeometries(instances, propertyName) {\r\n    var length = instances.length;\r\n\r\n    var attributesInAllGeometries = {};\r\n\r\n    var attributes0 = instances[0][propertyName].attributes;\r\n    var name;\r\n\r\n    for (name in attributes0) {\r\n        if (attributes0.hasOwnProperty(name) && defined(attributes0[name]) && defined(attributes0[name].values)) {\r\n            var attribute = attributes0[name];\r\n            var numberOfComponents = attribute.values.length;\r\n            var inAllGeometries = true;\r\n\r\n            // Does this same attribute exist in all geometries?\r\n            for (var i = 1; i < length; ++i) {\r\n                var otherAttribute = instances[i][propertyName].attributes[name];\r\n\r\n                if (\r\n                    !defined(otherAttribute) ||\r\n                    attribute.componentDatatype !== otherAttribute.componentDatatype ||\r\n                    attribute.componentsPerAttribute !== otherAttribute.componentsPerAttribute ||\r\n                    attribute.normalize !== otherAttribute.normalize\r\n                ) {\r\n                    inAllGeometries = false;\r\n                    break;\r\n                }\r\n\r\n                numberOfComponents += otherAttribute.values.length;\r\n            }\r\n\r\n            if (inAllGeometries) {\r\n                attributesInAllGeometries[name] = new GeometryAttribute({\r\n                    componentDatatype: attribute.componentDatatype,\r\n                    componentsPerAttribute: attribute.componentsPerAttribute,\r\n                    normalize: attribute.normalize,\r\n                    values: ComponentDatatype.createTypedArray(attribute.componentDatatype, numberOfComponents)\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    return attributesInAllGeometries;\r\n}\r\n\r\nvar tempScratch = new Cartesian3();\r\n\r\nfunction combineGeometries(instances, propertyName) {\r\n    var length = instances.length;\r\n\r\n    var name;\r\n    var i;\r\n    var j;\r\n    var k;\r\n\r\n    var m = instances[0].modelMatrix;\r\n    var haveIndices = defined(instances[0][propertyName].indices);\r\n    var primitiveType = instances[0][propertyName].primitiveType;\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    for (i = 1; i < length; ++i) {\r\n        if (!Matrix4.equals(instances[i].modelMatrix, m)) {\r\n            throw new DeveloperError('All instances must have the same modelMatrix.');\r\n        }\r\n        if (defined(instances[i][propertyName].indices) !== haveIndices) {\r\n            throw new DeveloperError('All instance geometries must have an indices or not have one.');\r\n        }\r\n        if (instances[i][propertyName].primitiveType !== primitiveType) {\r\n            throw new DeveloperError('All instance geometries must have the same primitiveType.');\r\n        }\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    // Find subset of attributes in all geometries\r\n    var attributes = findAttributesInAllGeometries(instances, propertyName);\r\n    var values;\r\n    var sourceValues;\r\n    var sourceValuesLength;\r\n\r\n    // Combine attributes from each geometry into a single typed array\r\n    for (name in attributes) {\r\n        if (attributes.hasOwnProperty(name)) {\r\n            values = attributes[name].values;\r\n\r\n            k = 0;\r\n            for (i = 0; i < length; ++i) {\r\n                sourceValues = instances[i][propertyName].attributes[name].values;\r\n                sourceValuesLength = sourceValues.length;\r\n\r\n                for (j = 0; j < sourceValuesLength; ++j) {\r\n                    values[k++] = sourceValues[j];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Combine index lists\r\n    var indices;\r\n\r\n    if (haveIndices) {\r\n        var numberOfIndices = 0;\r\n        for (i = 0; i < length; ++i) {\r\n            numberOfIndices += instances[i][propertyName].indices.length;\r\n        }\r\n\r\n        var numberOfVertices = Geometry.computeNumberOfVertices(\r\n            new Geometry({\r\n                attributes: attributes,\r\n                primitiveType: PrimitiveType.POINTS\r\n            })\r\n        );\r\n        var destIndices = IndexDatatype.createTypedArray(numberOfVertices, numberOfIndices);\r\n\r\n        var destOffset = 0;\r\n        var offset = 0;\r\n\r\n        for (i = 0; i < length; ++i) {\r\n            var sourceIndices = instances[i][propertyName].indices;\r\n            var sourceIndicesLen = sourceIndices.length;\r\n\r\n            for (k = 0; k < sourceIndicesLen; ++k) {\r\n                destIndices[destOffset++] = offset + sourceIndices[k];\r\n            }\r\n\r\n            offset += Geometry.computeNumberOfVertices(instances[i][propertyName]);\r\n        }\r\n\r\n        indices = destIndices;\r\n    }\r\n\r\n    // Create bounding sphere that includes all instances\r\n    var center = new Cartesian3();\r\n    var radius = 0.0;\r\n    var bs;\r\n\r\n    for (i = 0; i < length; ++i) {\r\n        bs = instances[i][propertyName].boundingSphere;\r\n        if (!defined(bs)) {\r\n            // If any geometries have an undefined bounding sphere, then so does the combined geometry\r\n            center = undefined;\r\n            break;\r\n        }\r\n\r\n        Cartesian3.add(bs.center, center, center);\r\n    }\r\n\r\n    if (defined(center)) {\r\n        Cartesian3.divideByScalar(center, length, center);\r\n\r\n        for (i = 0; i < length; ++i) {\r\n            bs = instances[i][propertyName].boundingSphere;\r\n            var tempRadius = Cartesian3.magnitude(Cartesian3.subtract(bs.center, center, tempScratch)) + bs.radius;\r\n\r\n            if (tempRadius > radius) {\r\n                radius = tempRadius;\r\n            }\r\n        }\r\n    }\r\n\r\n    return new Geometry({\r\n        attributes: attributes,\r\n        indices: indices,\r\n        primitiveType: primitiveType,\r\n        boundingSphere: defined(center) ? new BoundingSphere(center, radius) : undefined\r\n    });\r\n}\r\n\r\n/**\r\n * Combines geometry from several {@link GeometryInstance} objects into one geometry.\r\n * This concatenates the attributes, concatenates and adjusts the indices, and creates\r\n * a bounding sphere encompassing all instances.\r\n * <p>\r\n * If the instances do not have the same attributes, a subset of attributes common\r\n * to all instances is used, and the others are ignored.\r\n * </p>\r\n * <p>\r\n * This is used by {@link Primitive} to efficiently render a large amount of static data.\r\n * </p>\r\n *\r\n * @private\r\n *\r\n * @param {GeometryInstance[]} [instances] The array of {@link GeometryInstance} objects whose geometry will be combined.\r\n * @returns {Geometry} A single geometry created from the provided geometry instances.\r\n *\r\n * @exception {DeveloperError} All instances must have the same modelMatrix.\r\n * @exception {DeveloperError} All instance geometries must have an indices or not have one.\r\n * @exception {DeveloperError} All instance geometries must have the same primitiveType.\r\n *\r\n *\r\n * @example\r\n * for (var i = 0; i < instances.length; ++i) {\r\n *   Cesium.GeometryPipeline.transformToWorldCoordinates(instances[i]);\r\n * }\r\n * var geometries = Cesium.GeometryPipeline.combineInstances(instances);\r\n *\r\n * @see GeometryPipeline.transformToWorldCoordinates\r\n */\r\nGeometryPipeline.combineInstances = function (instances) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(instances) || instances.length < 1) {\r\n        throw new DeveloperError('instances is required and must have length greater than zero.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var instanceGeometry = [];\r\n    var instanceSplitGeometry = [];\r\n    var length = instances.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        var instance = instances[i];\r\n\r\n        if (defined(instance.geometry)) {\r\n            instanceGeometry.push(instance);\r\n        } else if (defined(instance.westHemisphereGeometry) && defined(instance.eastHemisphereGeometry)) {\r\n            instanceSplitGeometry.push(instance);\r\n        }\r\n    }\r\n\r\n    var geometries = [];\r\n    if (instanceGeometry.length > 0) {\r\n        geometries.push(combineGeometries(instanceGeometry, 'geometry'));\r\n    }\r\n\r\n    if (instanceSplitGeometry.length > 0) {\r\n        geometries.push(combineGeometries(instanceSplitGeometry, 'westHemisphereGeometry'));\r\n        geometries.push(combineGeometries(instanceSplitGeometry, 'eastHemisphereGeometry'));\r\n    }\r\n\r\n    return geometries;\r\n};\r\n\r\nvar normal = new Cartesian3();\r\nvar v0 = new Cartesian3();\r\nvar v1 = new Cartesian3();\r\nvar v2 = new Cartesian3();\r\n\r\n/**\r\n * Computes per-vertex normals for a geometry containing <code>TRIANGLES</code> by averaging the normals of\r\n * all triangles incident to the vertex.  The result is a new <code>normal</code> attribute added to the geometry.\r\n * This assumes a counter-clockwise winding order.\r\n *\r\n * @param {Geometry} geometry The geometry to modify.\r\n * @returns {Geometry} The modified <code>geometry</code> argument with the computed <code>normal</code> attribute.\r\n *\r\n * @exception {DeveloperError} geometry.indices length must be greater than 0 and be a multiple of 3.\r\n * @exception {DeveloperError} geometry.primitiveType must be {@link PrimitiveType.TRIANGLES}.\r\n *\r\n * @example\r\n * Cesium.GeometryPipeline.computeNormal(geometry);\r\n */\r\nGeometryPipeline.computeNormal = function (geometry) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(geometry)) {\r\n        throw new DeveloperError('geometry is required.');\r\n    }\r\n    if (!defined(geometry.attributes.position) || !defined(geometry.attributes.position.values)) {\r\n        throw new DeveloperError('geometry.attributes.position.values is required.');\r\n    }\r\n    if (!defined(geometry.indices)) {\r\n        throw new DeveloperError('geometry.indices is required.');\r\n    }\r\n    if (geometry.indices.length < 2 || geometry.indices.length % 3 !== 0) {\r\n        throw new DeveloperError('geometry.indices length must be greater than 0 and be a multiple of 3.');\r\n    }\r\n    if (geometry.primitiveType !== PrimitiveType.TRIANGLES) {\r\n        throw new DeveloperError('geometry.primitiveType must be PrimitiveType.TRIANGLES.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var indices = geometry.indices;\r\n    var attributes = geometry.attributes;\r\n    var vertices = attributes.position.values;\r\n    var numVertices = attributes.position.values.length / 3;\r\n    var numIndices = indices.length;\r\n    var normalsPerVertex = new Array(numVertices);\r\n    var normalsPerTriangle = new Array(numIndices / 3);\r\n    var normalIndices = new Array(numIndices);\r\n    var i;\r\n    for (i = 0; i < numVertices; i++) {\r\n        normalsPerVertex[i] = {\r\n            indexOffset: 0,\r\n            count: 0,\r\n            currentCount: 0\r\n        };\r\n    }\r\n\r\n    var j = 0;\r\n    for (i = 0; i < numIndices; i += 3) {\r\n        var i0 = indices[i];\r\n        var i1 = indices[i + 1];\r\n        var i2 = indices[i + 2];\r\n        var i03 = i0 * 3;\r\n        var i13 = i1 * 3;\r\n        var i23 = i2 * 3;\r\n\r\n        v0.x = vertices[i03];\r\n        v0.y = vertices[i03 + 1];\r\n        v0.z = vertices[i03 + 2];\r\n        v1.x = vertices[i13];\r\n        v1.y = vertices[i13 + 1];\r\n        v1.z = vertices[i13 + 2];\r\n        v2.x = vertices[i23];\r\n        v2.y = vertices[i23 + 1];\r\n        v2.z = vertices[i23 + 2];\r\n\r\n        normalsPerVertex[i0].count++;\r\n        normalsPerVertex[i1].count++;\r\n        normalsPerVertex[i2].count++;\r\n\r\n        Cartesian3.subtract(v1, v0, v1);\r\n        Cartesian3.subtract(v2, v0, v2);\r\n        normalsPerTriangle[j] = Cartesian3.cross(v1, v2, new Cartesian3());\r\n        j++;\r\n    }\r\n\r\n    var indexOffset = 0;\r\n    for (i = 0; i < numVertices; i++) {\r\n        normalsPerVertex[i].indexOffset += indexOffset;\r\n        indexOffset += normalsPerVertex[i].count;\r\n    }\r\n\r\n    j = 0;\r\n    var vertexNormalData;\r\n    for (i = 0; i < numIndices; i += 3) {\r\n        vertexNormalData = normalsPerVertex[indices[i]];\r\n        var index = vertexNormalData.indexOffset + vertexNormalData.currentCount;\r\n        normalIndices[index] = j;\r\n        vertexNormalData.currentCount++;\r\n\r\n        vertexNormalData = normalsPerVertex[indices[i + 1]];\r\n        index = vertexNormalData.indexOffset + vertexNormalData.currentCount;\r\n        normalIndices[index] = j;\r\n        vertexNormalData.currentCount++;\r\n\r\n        vertexNormalData = normalsPerVertex[indices[i + 2]];\r\n        index = vertexNormalData.indexOffset + vertexNormalData.currentCount;\r\n        normalIndices[index] = j;\r\n        vertexNormalData.currentCount++;\r\n\r\n        j++;\r\n    }\r\n\r\n    var normalValues = new Float32Array(numVertices * 3);\r\n    for (i = 0; i < numVertices; i++) {\r\n        var i3 = i * 3;\r\n        vertexNormalData = normalsPerVertex[i];\r\n        Cartesian3.clone(Cartesian3.ZERO, normal);\r\n        if (vertexNormalData.count > 0) {\r\n            for (j = 0; j < vertexNormalData.count; j++) {\r\n                Cartesian3.add(normal, normalsPerTriangle[normalIndices[vertexNormalData.indexOffset + j]], normal);\r\n            }\r\n\r\n            // We can run into an issue where a vertex is used with 2 primitives that have opposite winding order.\r\n            if (Cartesian3.equalsEpsilon(Cartesian3.ZERO, normal, CesiumMath.EPSILON10)) {\r\n                Cartesian3.clone(normalsPerTriangle[normalIndices[vertexNormalData.indexOffset]], normal);\r\n            }\r\n        }\r\n\r\n        // We end up with a zero vector probably because of a degenerate triangle\r\n        if (Cartesian3.equalsEpsilon(Cartesian3.ZERO, normal, CesiumMath.EPSILON10)) {\r\n            // Default to (0,0,1)\r\n            normal.z = 1.0;\r\n        }\r\n\r\n        Cartesian3.normalize(normal, normal);\r\n        normalValues[i3] = normal.x;\r\n        normalValues[i3 + 1] = normal.y;\r\n        normalValues[i3 + 2] = normal.z;\r\n    }\r\n\r\n    geometry.attributes.normal = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.FLOAT,\r\n        componentsPerAttribute: 3,\r\n        values: normalValues\r\n    });\r\n\r\n    return geometry;\r\n};\r\n\r\nvar normalScratch = new Cartesian3();\r\nvar normalScale = new Cartesian3();\r\nvar tScratch = new Cartesian3();\r\n\r\n/**\r\n * Computes per-vertex tangents and bitangents for a geometry containing <code>TRIANGLES</code>.\r\n * The result is new <code>tangent</code> and <code>bitangent</code> attributes added to the geometry.\r\n * This assumes a counter-clockwise winding order.\r\n * <p>\r\n * Based on <a href=\"http://www.terathon.com/code/tangent.html\">Computing Tangent Space Basis Vectors\r\n * for an Arbitrary Mesh</a> by Eric Lengyel.\r\n * </p>\r\n *\r\n * @param {Geometry} geometry The geometry to modify.\r\n * @returns {Geometry} The modified <code>geometry</code> argument with the computed <code>tangent</code> and <code>bitangent</code> attributes.\r\n *\r\n * @exception {DeveloperError} geometry.indices length must be greater than 0 and be a multiple of 3.\r\n * @exception {DeveloperError} geometry.primitiveType must be {@link PrimitiveType.TRIANGLES}.\r\n *\r\n * @example\r\n * Cesium.GeometryPipeline.computeTangentAndBiTangent(geometry);\r\n */\r\nGeometryPipeline.computeTangentAndBitangent = function (geometry) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(geometry)) {\r\n        throw new DeveloperError('geometry is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var attributes = geometry.attributes;\r\n    var indices = geometry.indices;\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(attributes.position) || !defined(attributes.position.values)) {\r\n        throw new DeveloperError('geometry.attributes.position.values is required.');\r\n    }\r\n    if (!defined(attributes.normal) || !defined(attributes.normal.values)) {\r\n        throw new DeveloperError('geometry.attributes.normal.values is required.');\r\n    }\r\n    if (!defined(attributes.st) || !defined(attributes.st.values)) {\r\n        throw new DeveloperError('geometry.attributes.st.values is required.');\r\n    }\r\n    if (!defined(indices)) {\r\n        throw new DeveloperError('geometry.indices is required.');\r\n    }\r\n    if (indices.length < 2 || indices.length % 3 !== 0) {\r\n        throw new DeveloperError('geometry.indices length must be greater than 0 and be a multiple of 3.');\r\n    }\r\n    if (geometry.primitiveType !== PrimitiveType.TRIANGLES) {\r\n        throw new DeveloperError('geometry.primitiveType must be PrimitiveType.TRIANGLES.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var vertices = geometry.attributes.position.values;\r\n    var normals = geometry.attributes.normal.values;\r\n    var st = geometry.attributes.st.values;\r\n\r\n    var numVertices = geometry.attributes.position.values.length / 3;\r\n    var numIndices = indices.length;\r\n    var tan1 = new Array(numVertices * 3);\r\n\r\n    var i;\r\n    for (i = 0; i < tan1.length; i++) {\r\n        tan1[i] = 0;\r\n    }\r\n\r\n    var i03;\r\n    var i13;\r\n    var i23;\r\n    for (i = 0; i < numIndices; i += 3) {\r\n        var i0 = indices[i];\r\n        var i1 = indices[i + 1];\r\n        var i2 = indices[i + 2];\r\n        i03 = i0 * 3;\r\n        i13 = i1 * 3;\r\n        i23 = i2 * 3;\r\n        var i02 = i0 * 2;\r\n        var i12 = i1 * 2;\r\n        var i22 = i2 * 2;\r\n\r\n        var ux = vertices[i03];\r\n        var uy = vertices[i03 + 1];\r\n        var uz = vertices[i03 + 2];\r\n\r\n        var wx = st[i02];\r\n        var wy = st[i02 + 1];\r\n        var t1 = st[i12 + 1] - wy;\r\n        var t2 = st[i22 + 1] - wy;\r\n\r\n        var r = 1.0 / ((st[i12] - wx) * t2 - (st[i22] - wx) * t1);\r\n        var sdirx = (t2 * (vertices[i13] - ux) - t1 * (vertices[i23] - ux)) * r;\r\n        var sdiry = (t2 * (vertices[i13 + 1] - uy) - t1 * (vertices[i23 + 1] - uy)) * r;\r\n        var sdirz = (t2 * (vertices[i13 + 2] - uz) - t1 * (vertices[i23 + 2] - uz)) * r;\r\n\r\n        tan1[i03] += sdirx;\r\n        tan1[i03 + 1] += sdiry;\r\n        tan1[i03 + 2] += sdirz;\r\n\r\n        tan1[i13] += sdirx;\r\n        tan1[i13 + 1] += sdiry;\r\n        tan1[i13 + 2] += sdirz;\r\n\r\n        tan1[i23] += sdirx;\r\n        tan1[i23 + 1] += sdiry;\r\n        tan1[i23 + 2] += sdirz;\r\n    }\r\n\r\n    var tangentValues = new Float32Array(numVertices * 3);\r\n    var bitangentValues = new Float32Array(numVertices * 3);\r\n\r\n    for (i = 0; i < numVertices; i++) {\r\n        i03 = i * 3;\r\n        i13 = i03 + 1;\r\n        i23 = i03 + 2;\r\n\r\n        var n = Cartesian3.fromArray(normals, i03, normalScratch);\r\n        var t = Cartesian3.fromArray(tan1, i03, tScratch);\r\n        var scalar = Cartesian3.dot(n, t);\r\n        Cartesian3.multiplyByScalar(n, scalar, normalScale);\r\n        Cartesian3.normalize(Cartesian3.subtract(t, normalScale, t), t);\r\n\r\n        tangentValues[i03] = t.x;\r\n        tangentValues[i13] = t.y;\r\n        tangentValues[i23] = t.z;\r\n\r\n        Cartesian3.normalize(Cartesian3.cross(n, t, t), t);\r\n\r\n        bitangentValues[i03] = t.x;\r\n        bitangentValues[i13] = t.y;\r\n        bitangentValues[i23] = t.z;\r\n    }\r\n\r\n    geometry.attributes.tangent = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.FLOAT,\r\n        componentsPerAttribute: 3,\r\n        values: tangentValues\r\n    });\r\n\r\n    geometry.attributes.bitangent = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.FLOAT,\r\n        componentsPerAttribute: 3,\r\n        values: bitangentValues\r\n    });\r\n\r\n    return geometry;\r\n};\r\n\r\nvar scratchCartesian2 = new Cartesian2();\r\nvar toEncode1 = new Cartesian3();\r\nvar toEncode2 = new Cartesian3();\r\nvar toEncode3 = new Cartesian3();\r\nvar encodeResult2 = new Cartesian2();\r\n/**\r\n * Compresses and packs geometry normal attribute values to save memory.\r\n *\r\n * @param {Geometry} geometry The geometry to modify.\r\n * @returns {Geometry} The modified <code>geometry</code> argument, with its normals compressed and packed.\r\n *\r\n * @example\r\n * geometry = Cesium.GeometryPipeline.compressVertices(geometry);\r\n */\r\nGeometryPipeline.compressVertices = function (geometry) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(geometry)) {\r\n        throw new DeveloperError('geometry is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var extrudeAttribute = geometry.attributes.extrudeDirection;\r\n    var i;\r\n    var numVertices;\r\n    if (defined(extrudeAttribute)) {\r\n        //only shadow volumes use extrudeDirection, and shadow volumes use vertexFormat: POSITION_ONLY so we don't need to check other attributes\r\n        var extrudeDirections = extrudeAttribute.values;\r\n        numVertices = extrudeDirections.length / 3.0;\r\n        var compressedDirections = new Float32Array(numVertices * 2);\r\n\r\n        var i2 = 0;\r\n        for (i = 0; i < numVertices; ++i) {\r\n            Cartesian3.fromArray(extrudeDirections, i * 3.0, toEncode1);\r\n            if (Cartesian3.equals(toEncode1, Cartesian3.ZERO)) {\r\n                i2 += 2;\r\n                continue;\r\n            }\r\n            encodeResult2 = AttributeCompression.octEncodeInRange(toEncode1, 65535, encodeResult2);\r\n            compressedDirections[i2++] = encodeResult2.x;\r\n            compressedDirections[i2++] = encodeResult2.y;\r\n        }\r\n\r\n        geometry.attributes.compressedAttributes = new GeometryAttribute({\r\n            componentDatatype: ComponentDatatype.FLOAT,\r\n            componentsPerAttribute: 2,\r\n            values: compressedDirections\r\n        });\r\n        delete geometry.attributes.extrudeDirection;\r\n        return geometry;\r\n    }\r\n\r\n    var normalAttribute = geometry.attributes.normal;\r\n    var stAttribute = geometry.attributes.st;\r\n\r\n    var hasNormal = defined(normalAttribute);\r\n    var hasSt = defined(stAttribute);\r\n    if (!hasNormal && !hasSt) {\r\n        return geometry;\r\n    }\r\n\r\n    var tangentAttribute = geometry.attributes.tangent;\r\n    var bitangentAttribute = geometry.attributes.bitangent;\r\n\r\n    var hasTangent = defined(tangentAttribute);\r\n    var hasBitangent = defined(bitangentAttribute);\r\n\r\n    var normals;\r\n    var st;\r\n    var tangents;\r\n    var bitangents;\r\n\r\n    if (hasNormal) {\r\n        normals = normalAttribute.values;\r\n    }\r\n    if (hasSt) {\r\n        st = stAttribute.values;\r\n    }\r\n    if (hasTangent) {\r\n        tangents = tangentAttribute.values;\r\n    }\r\n    if (hasBitangent) {\r\n        bitangents = bitangentAttribute.values;\r\n    }\r\n\r\n    var length = hasNormal ? normals.length : st.length;\r\n    var numComponents = hasNormal ? 3.0 : 2.0;\r\n    numVertices = length / numComponents;\r\n\r\n    var compressedLength = numVertices;\r\n    var numCompressedComponents = hasSt && hasNormal ? 2.0 : 1.0;\r\n    numCompressedComponents += hasTangent || hasBitangent ? 1.0 : 0.0;\r\n    compressedLength *= numCompressedComponents;\r\n\r\n    var compressedAttributes = new Float32Array(compressedLength);\r\n\r\n    var normalIndex = 0;\r\n    for (i = 0; i < numVertices; ++i) {\r\n        if (hasSt) {\r\n            Cartesian2.fromArray(st, i * 2.0, scratchCartesian2);\r\n            compressedAttributes[normalIndex++] = AttributeCompression.compressTextureCoordinates(scratchCartesian2);\r\n        }\r\n\r\n        var index = i * 3.0;\r\n        if (hasNormal && defined(tangents) && defined(bitangents)) {\r\n            Cartesian3.fromArray(normals, index, toEncode1);\r\n            Cartesian3.fromArray(tangents, index, toEncode2);\r\n            Cartesian3.fromArray(bitangents, index, toEncode3);\r\n\r\n            AttributeCompression.octPack(toEncode1, toEncode2, toEncode3, scratchCartesian2);\r\n            compressedAttributes[normalIndex++] = scratchCartesian2.x;\r\n            compressedAttributes[normalIndex++] = scratchCartesian2.y;\r\n        } else {\r\n            if (hasNormal) {\r\n                Cartesian3.fromArray(normals, index, toEncode1);\r\n                compressedAttributes[normalIndex++] = AttributeCompression.octEncodeFloat(toEncode1);\r\n            }\r\n\r\n            if (hasTangent) {\r\n                Cartesian3.fromArray(tangents, index, toEncode1);\r\n                compressedAttributes[normalIndex++] = AttributeCompression.octEncodeFloat(toEncode1);\r\n            }\r\n\r\n            if (hasBitangent) {\r\n                Cartesian3.fromArray(bitangents, index, toEncode1);\r\n                compressedAttributes[normalIndex++] = AttributeCompression.octEncodeFloat(toEncode1);\r\n            }\r\n        }\r\n    }\r\n\r\n    geometry.attributes.compressedAttributes = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.FLOAT,\r\n        componentsPerAttribute: numCompressedComponents,\r\n        values: compressedAttributes\r\n    });\r\n\r\n    if (hasNormal) {\r\n        delete geometry.attributes.normal;\r\n    }\r\n    if (hasSt) {\r\n        delete geometry.attributes.st;\r\n    }\r\n    if (hasBitangent) {\r\n        delete geometry.attributes.bitangent;\r\n    }\r\n    if (hasTangent) {\r\n        delete geometry.attributes.tangent;\r\n    }\r\n\r\n    return geometry;\r\n};\r\n\r\nfunction indexTriangles(geometry) {\r\n    if (defined(geometry.indices)) {\r\n        return geometry;\r\n    }\r\n    var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (numberOfVertices < 3) {\r\n        throw new DeveloperError('The number of vertices must be at least three.');\r\n    }\r\n    if (numberOfVertices % 3 !== 0) {\r\n        throw new DeveloperError('The number of vertices must be a multiple of three.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var indices = IndexDatatype.createTypedArray(numberOfVertices, numberOfVertices);\r\n    for (var i = 0; i < numberOfVertices; ++i) {\r\n        indices[i] = i;\r\n    }\r\n\r\n    geometry.indices = indices;\r\n    return geometry;\r\n}\r\n\r\nfunction indexTriangleFan(geometry) {\r\n    var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (numberOfVertices < 3) {\r\n        throw new DeveloperError('The number of vertices must be at least three.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var indices = IndexDatatype.createTypedArray(numberOfVertices, (numberOfVertices - 2) * 3);\r\n    indices[0] = 1;\r\n    indices[1] = 0;\r\n    indices[2] = 2;\r\n\r\n    var indicesIndex = 3;\r\n    for (var i = 3; i < numberOfVertices; ++i) {\r\n        indices[indicesIndex++] = i - 1;\r\n        indices[indicesIndex++] = 0;\r\n        indices[indicesIndex++] = i;\r\n    }\r\n\r\n    geometry.indices = indices;\r\n    geometry.primitiveType = PrimitiveType.TRIANGLES;\r\n    return geometry;\r\n}\r\n\r\nfunction indexTriangleStrip(geometry) {\r\n    var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (numberOfVertices < 3) {\r\n        throw new DeveloperError('The number of vertices must be at least 3.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var indices = IndexDatatype.createTypedArray(numberOfVertices, (numberOfVertices - 2) * 3);\r\n    indices[0] = 0;\r\n    indices[1] = 1;\r\n    indices[2] = 2;\r\n\r\n    if (numberOfVertices > 3) {\r\n        indices[3] = 0;\r\n        indices[4] = 2;\r\n        indices[5] = 3;\r\n    }\r\n\r\n    var indicesIndex = 6;\r\n    for (var i = 3; i < numberOfVertices - 1; i += 2) {\r\n        indices[indicesIndex++] = i;\r\n        indices[indicesIndex++] = i - 1;\r\n        indices[indicesIndex++] = i + 1;\r\n\r\n        if (i + 2 < numberOfVertices) {\r\n            indices[indicesIndex++] = i;\r\n            indices[indicesIndex++] = i + 1;\r\n            indices[indicesIndex++] = i + 2;\r\n        }\r\n    }\r\n\r\n    geometry.indices = indices;\r\n    geometry.primitiveType = PrimitiveType.TRIANGLES;\r\n    return geometry;\r\n}\r\n\r\nfunction indexLines(geometry) {\r\n    if (defined(geometry.indices)) {\r\n        return geometry;\r\n    }\r\n    var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (numberOfVertices < 2) {\r\n        throw new DeveloperError('The number of vertices must be at least two.');\r\n    }\r\n    if (numberOfVertices % 2 !== 0) {\r\n        throw new DeveloperError('The number of vertices must be a multiple of 2.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var indices = IndexDatatype.createTypedArray(numberOfVertices, numberOfVertices);\r\n    for (var i = 0; i < numberOfVertices; ++i) {\r\n        indices[i] = i;\r\n    }\r\n\r\n    geometry.indices = indices;\r\n    return geometry;\r\n}\r\n\r\nfunction indexLineStrip(geometry) {\r\n    var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (numberOfVertices < 2) {\r\n        throw new DeveloperError('The number of vertices must be at least two.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var indices = IndexDatatype.createTypedArray(numberOfVertices, (numberOfVertices - 1) * 2);\r\n    indices[0] = 0;\r\n    indices[1] = 1;\r\n    var indicesIndex = 2;\r\n    for (var i = 2; i < numberOfVertices; ++i) {\r\n        indices[indicesIndex++] = i - 1;\r\n        indices[indicesIndex++] = i;\r\n    }\r\n\r\n    geometry.indices = indices;\r\n    geometry.primitiveType = PrimitiveType.LINES;\r\n    return geometry;\r\n}\r\n\r\nfunction indexLineLoop(geometry) {\r\n    var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (numberOfVertices < 2) {\r\n        throw new DeveloperError('The number of vertices must be at least two.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var indices = IndexDatatype.createTypedArray(numberOfVertices, numberOfVertices * 2);\r\n\r\n    indices[0] = 0;\r\n    indices[1] = 1;\r\n\r\n    var indicesIndex = 2;\r\n    for (var i = 2; i < numberOfVertices; ++i) {\r\n        indices[indicesIndex++] = i - 1;\r\n        indices[indicesIndex++] = i;\r\n    }\r\n\r\n    indices[indicesIndex++] = numberOfVertices - 1;\r\n    indices[indicesIndex] = 0;\r\n\r\n    geometry.indices = indices;\r\n    geometry.primitiveType = PrimitiveType.LINES;\r\n    return geometry;\r\n}\r\n\r\nfunction indexPrimitive(geometry) {\r\n    switch (geometry.primitiveType) {\r\n        case PrimitiveType.TRIANGLE_FAN:\r\n            return indexTriangleFan(geometry);\r\n        case PrimitiveType.TRIANGLE_STRIP:\r\n            return indexTriangleStrip(geometry);\r\n        case PrimitiveType.TRIANGLES:\r\n            return indexTriangles(geometry);\r\n        case PrimitiveType.LINE_STRIP:\r\n            return indexLineStrip(geometry);\r\n        case PrimitiveType.LINE_LOOP:\r\n            return indexLineLoop(geometry);\r\n        case PrimitiveType.LINES:\r\n            return indexLines(geometry);\r\n    }\r\n\r\n    return geometry;\r\n}\r\n\r\nfunction offsetPointFromXZPlane(p, isBehind) {\r\n    if (Math.abs(p.y) < CesiumMath.EPSILON6) {\r\n        if (isBehind) {\r\n            p.y = -CesiumMath.EPSILON6;\r\n        } else {\r\n            p.y = CesiumMath.EPSILON6;\r\n        }\r\n    }\r\n}\r\n\r\nfunction offsetTriangleFromXZPlane(p0, p1, p2) {\r\n    if (p0.y !== 0.0 && p1.y !== 0.0 && p2.y !== 0.0) {\r\n        offsetPointFromXZPlane(p0, p0.y < 0.0);\r\n        offsetPointFromXZPlane(p1, p1.y < 0.0);\r\n        offsetPointFromXZPlane(p2, p2.y < 0.0);\r\n        return;\r\n    }\r\n\r\n    var p0y = Math.abs(p0.y);\r\n    var p1y = Math.abs(p1.y);\r\n    var p2y = Math.abs(p2.y);\r\n\r\n    var sign;\r\n    if (p0y > p1y) {\r\n        if (p0y > p2y) {\r\n            sign = CesiumMath.sign(p0.y);\r\n        } else {\r\n            sign = CesiumMath.sign(p2.y);\r\n        }\r\n    } else if (p1y > p2y) {\r\n        sign = CesiumMath.sign(p1.y);\r\n    } else {\r\n        sign = CesiumMath.sign(p2.y);\r\n    }\r\n\r\n    var isBehind = sign < 0.0;\r\n    offsetPointFromXZPlane(p0, isBehind);\r\n    offsetPointFromXZPlane(p1, isBehind);\r\n    offsetPointFromXZPlane(p2, isBehind);\r\n}\r\n\r\nvar c3 = new Cartesian3();\r\nfunction getXZIntersectionOffsetPoints(p, p1, u1, v1) {\r\n    Cartesian3.add(p, Cartesian3.multiplyByScalar(Cartesian3.subtract(p1, p, c3), p.y / (p.y - p1.y), c3), u1);\r\n    Cartesian3.clone(u1, v1);\r\n    offsetPointFromXZPlane(u1, true);\r\n    offsetPointFromXZPlane(v1, false);\r\n}\r\n\r\nvar u1 = new Cartesian3();\r\nvar u2 = new Cartesian3();\r\nvar q1 = new Cartesian3();\r\nvar q2 = new Cartesian3();\r\n\r\nvar splitTriangleResult = {\r\n    positions: new Array(7),\r\n    indices: new Array(3 * 3)\r\n};\r\n\r\nfunction splitTriangle(p0, p1, p2) {\r\n    // In WGS84 coordinates, for a triangle approximately on the\r\n    // ellipsoid to cross the IDL, first it needs to be on the\r\n    // negative side of the plane x = 0.\r\n    if (p0.x >= 0.0 || p1.x >= 0.0 || p2.x >= 0.0) {\r\n        return undefined;\r\n    }\r\n\r\n    offsetTriangleFromXZPlane(p0, p1, p2);\r\n\r\n    var p0Behind = p0.y < 0.0;\r\n    var p1Behind = p1.y < 0.0;\r\n    var p2Behind = p2.y < 0.0;\r\n\r\n    var numBehind = 0;\r\n    numBehind += p0Behind ? 1 : 0;\r\n    numBehind += p1Behind ? 1 : 0;\r\n    numBehind += p2Behind ? 1 : 0;\r\n\r\n    var indices = splitTriangleResult.indices;\r\n\r\n    if (numBehind === 1) {\r\n        indices[1] = 3;\r\n        indices[2] = 4;\r\n        indices[5] = 6;\r\n        indices[7] = 6;\r\n        indices[8] = 5;\r\n\r\n        if (p0Behind) {\r\n            getXZIntersectionOffsetPoints(p0, p1, u1, q1);\r\n            getXZIntersectionOffsetPoints(p0, p2, u2, q2);\r\n\r\n            indices[0] = 0;\r\n            indices[3] = 1;\r\n            indices[4] = 2;\r\n            indices[6] = 1;\r\n        } else if (p1Behind) {\r\n            getXZIntersectionOffsetPoints(p1, p2, u1, q1);\r\n            getXZIntersectionOffsetPoints(p1, p0, u2, q2);\r\n\r\n            indices[0] = 1;\r\n            indices[3] = 2;\r\n            indices[4] = 0;\r\n            indices[6] = 2;\r\n        } else if (p2Behind) {\r\n            getXZIntersectionOffsetPoints(p2, p0, u1, q1);\r\n            getXZIntersectionOffsetPoints(p2, p1, u2, q2);\r\n\r\n            indices[0] = 2;\r\n            indices[3] = 0;\r\n            indices[4] = 1;\r\n            indices[6] = 0;\r\n        }\r\n    } else if (numBehind === 2) {\r\n        indices[2] = 4;\r\n        indices[4] = 4;\r\n        indices[5] = 3;\r\n        indices[7] = 5;\r\n        indices[8] = 6;\r\n\r\n        if (!p0Behind) {\r\n            getXZIntersectionOffsetPoints(p0, p1, u1, q1);\r\n            getXZIntersectionOffsetPoints(p0, p2, u2, q2);\r\n\r\n            indices[0] = 1;\r\n            indices[1] = 2;\r\n            indices[3] = 1;\r\n            indices[6] = 0;\r\n        } else if (!p1Behind) {\r\n            getXZIntersectionOffsetPoints(p1, p2, u1, q1);\r\n            getXZIntersectionOffsetPoints(p1, p0, u2, q2);\r\n\r\n            indices[0] = 2;\r\n            indices[1] = 0;\r\n            indices[3] = 2;\r\n            indices[6] = 1;\r\n        } else if (!p2Behind) {\r\n            getXZIntersectionOffsetPoints(p2, p0, u1, q1);\r\n            getXZIntersectionOffsetPoints(p2, p1, u2, q2);\r\n\r\n            indices[0] = 0;\r\n            indices[1] = 1;\r\n            indices[3] = 0;\r\n            indices[6] = 2;\r\n        }\r\n    }\r\n\r\n    var positions = splitTriangleResult.positions;\r\n    positions[0] = p0;\r\n    positions[1] = p1;\r\n    positions[2] = p2;\r\n    positions.length = 3;\r\n\r\n    if (numBehind === 1 || numBehind === 2) {\r\n        positions[3] = u1;\r\n        positions[4] = u2;\r\n        positions[5] = q1;\r\n        positions[6] = q2;\r\n        positions.length = 7;\r\n    }\r\n\r\n    return splitTriangleResult;\r\n}\r\n\r\nfunction updateGeometryAfterSplit(geometry, computeBoundingSphere) {\r\n    var attributes = geometry.attributes;\r\n\r\n    if (attributes.position.values.length === 0) {\r\n        return undefined;\r\n    }\r\n\r\n    for (var property in attributes) {\r\n        if (attributes.hasOwnProperty(property) && defined(attributes[property]) && defined(attributes[property].values)) {\r\n            var attribute = attributes[property];\r\n            attribute.values = ComponentDatatype.createTypedArray(attribute.componentDatatype, attribute.values);\r\n        }\r\n    }\r\n\r\n    var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\r\n    geometry.indices = IndexDatatype.createTypedArray(numberOfVertices, geometry.indices);\r\n\r\n    if (computeBoundingSphere) {\r\n        geometry.boundingSphere = BoundingSphere.fromVertices(attributes.position.values);\r\n    }\r\n\r\n    return geometry;\r\n}\r\n\r\nfunction copyGeometryForSplit(geometry) {\r\n    var attributes = geometry.attributes;\r\n    var copiedAttributes = {};\r\n\r\n    for (var property in attributes) {\r\n        if (attributes.hasOwnProperty(property) && defined(attributes[property]) && defined(attributes[property].values)) {\r\n            var attribute = attributes[property];\r\n            copiedAttributes[property] = new GeometryAttribute({\r\n                componentDatatype: attribute.componentDatatype,\r\n                componentsPerAttribute: attribute.componentsPerAttribute,\r\n                normalize: attribute.normalize,\r\n                values: []\r\n            });\r\n        }\r\n    }\r\n\r\n    return new Geometry({\r\n        attributes: copiedAttributes,\r\n        indices: [],\r\n        primitiveType: geometry.primitiveType\r\n    });\r\n}\r\n\r\nfunction updateInstanceAfterSplit(instance, westGeometry, eastGeometry) {\r\n    var computeBoundingSphere = defined(instance.geometry.boundingSphere);\r\n\r\n    westGeometry = updateGeometryAfterSplit(westGeometry, computeBoundingSphere);\r\n    eastGeometry = updateGeometryAfterSplit(eastGeometry, computeBoundingSphere);\r\n\r\n    if (defined(eastGeometry) && !defined(westGeometry)) {\r\n        instance.geometry = eastGeometry;\r\n    } else if (!defined(eastGeometry) && defined(westGeometry)) {\r\n        instance.geometry = westGeometry;\r\n    } else {\r\n        instance.westHemisphereGeometry = westGeometry;\r\n        instance.eastHemisphereGeometry = eastGeometry;\r\n        instance.geometry = undefined;\r\n    }\r\n}\r\n\r\nfunction generateBarycentricInterpolateFunction(CartesianType, numberOfComponents) {\r\n    var v0Scratch = new CartesianType();\r\n    var v1Scratch = new CartesianType();\r\n    var v2Scratch = new CartesianType();\r\n\r\n    return function (i0, i1, i2, coords, sourceValues, currentValues, insertedIndex, normalize) {\r\n        var v0 = CartesianType.fromArray(sourceValues, i0 * numberOfComponents, v0Scratch);\r\n        var v1 = CartesianType.fromArray(sourceValues, i1 * numberOfComponents, v1Scratch);\r\n        var v2 = CartesianType.fromArray(sourceValues, i2 * numberOfComponents, v2Scratch);\r\n\r\n        CartesianType.multiplyByScalar(v0, coords.x, v0);\r\n        CartesianType.multiplyByScalar(v1, coords.y, v1);\r\n        CartesianType.multiplyByScalar(v2, coords.z, v2);\r\n\r\n        var value = CartesianType.add(v0, v1, v0);\r\n        CartesianType.add(value, v2, value);\r\n\r\n        if (normalize) {\r\n            CartesianType.normalize(value, value);\r\n        }\r\n\r\n        CartesianType.pack(value, currentValues, insertedIndex * numberOfComponents);\r\n    };\r\n}\r\n\r\nvar interpolateAndPackCartesian4 = generateBarycentricInterpolateFunction(Cartesian4, 4);\r\nvar interpolateAndPackCartesian3 = generateBarycentricInterpolateFunction(Cartesian3, 3);\r\nvar interpolateAndPackCartesian2 = generateBarycentricInterpolateFunction(Cartesian2, 2);\r\nvar interpolateAndPackBoolean = function (i0, i1, i2, coords, sourceValues, currentValues, insertedIndex) {\r\n    var v1 = sourceValues[i0] * coords.x;\r\n    var v2 = sourceValues[i1] * coords.y;\r\n    var v3 = sourceValues[i2] * coords.z;\r\n    currentValues[insertedIndex] = v1 + v2 + v3 > CesiumMath.EPSILON6 ? 1 : 0;\r\n};\r\n\r\nvar p0Scratch = new Cartesian3();\r\nvar p1Scratch = new Cartesian3();\r\nvar p2Scratch = new Cartesian3();\r\nvar barycentricScratch = new Cartesian3();\r\n\r\nfunction computeTriangleAttributes(\r\n    i0,\r\n    i1,\r\n    i2,\r\n    point,\r\n    positions,\r\n    normals,\r\n    tangents,\r\n    bitangents,\r\n    texCoords,\r\n    extrudeDirections,\r\n    applyOffset,\r\n    currentAttributes,\r\n    customAttributeNames,\r\n    customAttributesLength,\r\n    allAttributes,\r\n    insertedIndex\r\n) {\r\n    if (!defined(normals) && !defined(tangents) && !defined(bitangents) && !defined(texCoords) && !defined(extrudeDirections) && customAttributesLength === 0) {\r\n        return;\r\n    }\r\n\r\n    var p0 = Cartesian3.fromArray(positions, i0 * 3, p0Scratch);\r\n    var p1 = Cartesian3.fromArray(positions, i1 * 3, p1Scratch);\r\n    var p2 = Cartesian3.fromArray(positions, i2 * 3, p2Scratch);\r\n    var coords = barycentricCoordinates(point, p0, p1, p2, new Cartesian3());\r\n\r\n    if (defined(normals)) {\r\n        interpolateAndPackCartesian3(i0, i1, i2, coords, normals, currentAttributes.normal.values, insertedIndex, true);\r\n    }\r\n\r\n    if (defined(extrudeDirections)) {\r\n        var d0 = Cartesian3.fromArray(extrudeDirections, i0 * 3, p0Scratch);\r\n        var d1 = Cartesian3.fromArray(extrudeDirections, i1 * 3, p1Scratch);\r\n        var d2 = Cartesian3.fromArray(extrudeDirections, i2 * 3, p2Scratch);\r\n\r\n        Cartesian3.multiplyByScalar(d0, coords.x, d0);\r\n        Cartesian3.multiplyByScalar(d1, coords.y, d1);\r\n        Cartesian3.multiplyByScalar(d2, coords.z, d2);\r\n\r\n        var direction;\r\n        if (!Cartesian3.equals(d0, Cartesian3.ZERO) || !Cartesian3.equals(d1, Cartesian3.ZERO) || !Cartesian3.equals(d2, Cartesian3.ZERO)) {\r\n            direction = Cartesian3.add(d0, d1, d0);\r\n            Cartesian3.add(direction, d2, direction);\r\n            Cartesian3.normalize(direction, direction);\r\n        } else {\r\n            direction = p0Scratch;\r\n            direction.x = 0;\r\n            direction.y = 0;\r\n            direction.z = 0;\r\n        }\r\n        Cartesian3.pack(direction, currentAttributes.extrudeDirection.values, insertedIndex * 3);\r\n    }\r\n\r\n    if (defined(applyOffset)) {\r\n        interpolateAndPackBoolean(i0, i1, i2, coords, applyOffset, currentAttributes.applyOffset.values, insertedIndex);\r\n    }\r\n\r\n    if (defined(tangents)) {\r\n        interpolateAndPackCartesian3(i0, i1, i2, coords, tangents, currentAttributes.tangent.values, insertedIndex, true);\r\n    }\r\n\r\n    if (defined(bitangents)) {\r\n        interpolateAndPackCartesian3(i0, i1, i2, coords, bitangents, currentAttributes.bitangent.values, insertedIndex, true);\r\n    }\r\n\r\n    if (defined(texCoords)) {\r\n        interpolateAndPackCartesian2(i0, i1, i2, coords, texCoords, currentAttributes.st.values, insertedIndex);\r\n    }\r\n\r\n    if (customAttributesLength > 0) {\r\n        for (var i = 0; i < customAttributesLength; i++) {\r\n            var attributeName = customAttributeNames[i];\r\n            genericInterpolate(i0, i1, i2, coords, insertedIndex, allAttributes[attributeName], currentAttributes[attributeName]);\r\n        }\r\n    }\r\n}\r\n\r\nfunction genericInterpolate(i0, i1, i2, coords, insertedIndex, sourceAttribute, currentAttribute) {\r\n    var componentsPerAttribute = sourceAttribute.componentsPerAttribute;\r\n    var sourceValues = sourceAttribute.values;\r\n    var currentValues = currentAttribute.values;\r\n    switch (componentsPerAttribute) {\r\n        case 4:\r\n            interpolateAndPackCartesian4(i0, i1, i2, coords, sourceValues, currentValues, insertedIndex, false);\r\n            break;\r\n        case 3:\r\n            interpolateAndPackCartesian3(i0, i1, i2, coords, sourceValues, currentValues, insertedIndex, false);\r\n            break;\r\n        case 2:\r\n            interpolateAndPackCartesian2(i0, i1, i2, coords, sourceValues, currentValues, insertedIndex, false);\r\n            break;\r\n        default:\r\n            currentValues[insertedIndex] = sourceValues[i0] * coords.x + sourceValues[i1] * coords.y + sourceValues[i2] * coords.z;\r\n    }\r\n}\r\n\r\nfunction insertSplitPoint(currentAttributes, currentIndices, currentIndexMap, indices, currentIndex, point) {\r\n    var insertIndex = currentAttributes.position.values.length / 3;\r\n\r\n    if (currentIndex !== -1) {\r\n        var prevIndex = indices[currentIndex];\r\n        var newIndex = currentIndexMap[prevIndex];\r\n\r\n        if (newIndex === -1) {\r\n            currentIndexMap[prevIndex] = insertIndex;\r\n            currentAttributes.position.values.push(point.x, point.y, point.z);\r\n            currentIndices.push(insertIndex);\r\n            return insertIndex;\r\n        }\r\n\r\n        currentIndices.push(newIndex);\r\n        return newIndex;\r\n    }\r\n\r\n    currentAttributes.position.values.push(point.x, point.y, point.z);\r\n    currentIndices.push(insertIndex);\r\n    return insertIndex;\r\n}\r\n\r\nvar NAMED_ATTRIBUTES = {\r\n    position: true,\r\n    normal: true,\r\n    bitangent: true,\r\n    tangent: true,\r\n    st: true,\r\n    extrudeDirection: true,\r\n    applyOffset: true\r\n};\r\nfunction splitLongitudeTriangles(instance) {\r\n    var geometry = instance.geometry;\r\n    var attributes = geometry.attributes;\r\n    var positions = attributes.position.values;\r\n    var normals = defined(attributes.normal) ? attributes.normal.values : undefined;\r\n    var bitangents = defined(attributes.bitangent) ? attributes.bitangent.values : undefined;\r\n    var tangents = defined(attributes.tangent) ? attributes.tangent.values : undefined;\r\n    var texCoords = defined(attributes.st) ? attributes.st.values : undefined;\r\n    var extrudeDirections = defined(attributes.extrudeDirection) ? attributes.extrudeDirection.values : undefined;\r\n    var applyOffset = defined(attributes.applyOffset) ? attributes.applyOffset.values : undefined;\r\n    var indices = geometry.indices;\r\n\r\n    var customAttributeNames = [];\r\n    for (var attributeName in attributes) {\r\n        if (attributes.hasOwnProperty(attributeName) && !NAMED_ATTRIBUTES[attributeName] && defined(attributes[attributeName])) {\r\n            customAttributeNames.push(attributeName);\r\n        }\r\n    }\r\n    var customAttributesLength = customAttributeNames.length;\r\n\r\n    var eastGeometry = copyGeometryForSplit(geometry);\r\n    var westGeometry = copyGeometryForSplit(geometry);\r\n\r\n    var currentAttributes;\r\n    var currentIndices;\r\n    var currentIndexMap;\r\n    var insertedIndex;\r\n    var i;\r\n\r\n    var westGeometryIndexMap = [];\r\n    westGeometryIndexMap.length = positions.length / 3;\r\n\r\n    var eastGeometryIndexMap = [];\r\n    eastGeometryIndexMap.length = positions.length / 3;\r\n\r\n    for (i = 0; i < westGeometryIndexMap.length; ++i) {\r\n        westGeometryIndexMap[i] = -1;\r\n        eastGeometryIndexMap[i] = -1;\r\n    }\r\n\r\n    var len = indices.length;\r\n    for (i = 0; i < len; i += 3) {\r\n        var i0 = indices[i];\r\n        var i1 = indices[i + 1];\r\n        var i2 = indices[i + 2];\r\n\r\n        var p0 = Cartesian3.fromArray(positions, i0 * 3);\r\n        var p1 = Cartesian3.fromArray(positions, i1 * 3);\r\n        var p2 = Cartesian3.fromArray(positions, i2 * 3);\r\n\r\n        var result = splitTriangle(p0, p1, p2);\r\n        if (defined(result) && result.positions.length > 3) {\r\n            var resultPositions = result.positions;\r\n            var resultIndices = result.indices;\r\n            var resultLength = resultIndices.length;\r\n\r\n            for (var j = 0; j < resultLength; ++j) {\r\n                var resultIndex = resultIndices[j];\r\n                var point = resultPositions[resultIndex];\r\n\r\n                if (point.y < 0.0) {\r\n                    currentAttributes = westGeometry.attributes;\r\n                    currentIndices = westGeometry.indices;\r\n                    currentIndexMap = westGeometryIndexMap;\r\n                } else {\r\n                    currentAttributes = eastGeometry.attributes;\r\n                    currentIndices = eastGeometry.indices;\r\n                    currentIndexMap = eastGeometryIndexMap;\r\n                }\r\n\r\n                insertedIndex = insertSplitPoint(currentAttributes, currentIndices, currentIndexMap, indices, resultIndex < 3 ? i + resultIndex : -1, point);\r\n                computeTriangleAttributes(\r\n                    i0,\r\n                    i1,\r\n                    i2,\r\n                    point,\r\n                    positions,\r\n                    normals,\r\n                    tangents,\r\n                    bitangents,\r\n                    texCoords,\r\n                    extrudeDirections,\r\n                    applyOffset,\r\n                    currentAttributes,\r\n                    customAttributeNames,\r\n                    customAttributesLength,\r\n                    attributes,\r\n                    insertedIndex\r\n                );\r\n            }\r\n        } else {\r\n            console.log(\"=--------------\",i)\r\n            if(i === 225){\r\n                if (defined(result)) {\r\n                    p0 = result.positions[0];\r\n                    p1 = result.positions[1];\r\n                    p2 = result.positions[2];\r\n                }\r\n\r\n                if (p0.y < 0.0) {\r\n                    currentAttributes = westGeometry.attributes;\r\n                    currentIndices = westGeometry.indices;\r\n                    currentIndexMap = westGeometryIndexMap;\r\n                } else {\r\n                    currentAttributes = eastGeometry.attributes;\r\n                    currentIndices = eastGeometry.indices;\r\n                    currentIndexMap = eastGeometryIndexMap;\r\n                }\r\n\r\n                insertedIndex = insertSplitPoint(currentAttributes, currentIndices, currentIndexMap, indices, i, p0);\r\n                computeTriangleAttributes(\r\n                    i0,\r\n                    i1,\r\n                    i2,\r\n                    p0,\r\n                    positions,\r\n                    normals,\r\n                    tangents,\r\n                    bitangents,\r\n                    texCoords,\r\n                    extrudeDirections,\r\n                    applyOffset,\r\n                    currentAttributes,\r\n                    customAttributeNames,\r\n                    customAttributesLength,\r\n                    attributes,\r\n                    insertedIndex\r\n                );\r\n\r\n                insertedIndex = insertSplitPoint(currentAttributes, currentIndices, currentIndexMap, indices, i + 1, p1);\r\n                computeTriangleAttributes(\r\n                    i0,\r\n                    i1,\r\n                    i2,\r\n                    p1,\r\n                    positions,\r\n                    normals,\r\n                    tangents,\r\n                    bitangents,\r\n                    texCoords,\r\n                    extrudeDirections,\r\n                    applyOffset,\r\n                    currentAttributes,\r\n                    customAttributeNames,\r\n                    customAttributesLength,\r\n                    attributes,\r\n                    insertedIndex\r\n                );\r\n\r\n                insertedIndex = insertSplitPoint(currentAttributes, currentIndices, currentIndexMap, indices, i + 2, p2);\r\n                computeTriangleAttributes(\r\n                    i0,\r\n                    i1,\r\n                    i2,\r\n                    p2,\r\n                    positions,\r\n                    normals,\r\n                    tangents,\r\n                    bitangents,\r\n                    texCoords,\r\n                    extrudeDirections,\r\n                    applyOffset,\r\n                    currentAttributes,\r\n                    customAttributeNames,\r\n                    customAttributesLength,\r\n                    attributes,\r\n                    insertedIndex\r\n                );\r\n            }\r\n            if (defined(result)) {\r\n                p0 = result.positions[0];\r\n                p1 = result.positions[1];\r\n                p2 = result.positions[2];\r\n            }\r\n\r\n            if (p0.y < 0.0) {\r\n                currentAttributes = westGeometry.attributes;\r\n                currentIndices = westGeometry.indices;\r\n                currentIndexMap = westGeometryIndexMap;\r\n            } else {\r\n                currentAttributes = eastGeometry.attributes;\r\n                currentIndices = eastGeometry.indices;\r\n                currentIndexMap = eastGeometryIndexMap;\r\n            }\r\n\r\n            insertedIndex = insertSplitPoint(currentAttributes, currentIndices, currentIndexMap, indices, i, p0);\r\n            computeTriangleAttributes(\r\n                i0,\r\n                i1,\r\n                i2,\r\n                p0,\r\n                positions,\r\n                normals,\r\n                tangents,\r\n                bitangents,\r\n                texCoords,\r\n                extrudeDirections,\r\n                applyOffset,\r\n                currentAttributes,\r\n                customAttributeNames,\r\n                customAttributesLength,\r\n                attributes,\r\n                insertedIndex\r\n            );\r\n\r\n            insertedIndex = insertSplitPoint(currentAttributes, currentIndices, currentIndexMap, indices, i + 1, p1);\r\n            computeTriangleAttributes(\r\n                i0,\r\n                i1,\r\n                i2,\r\n                p1,\r\n                positions,\r\n                normals,\r\n                tangents,\r\n                bitangents,\r\n                texCoords,\r\n                extrudeDirections,\r\n                applyOffset,\r\n                currentAttributes,\r\n                customAttributeNames,\r\n                customAttributesLength,\r\n                attributes,\r\n                insertedIndex\r\n            );\r\n\r\n            insertedIndex = insertSplitPoint(currentAttributes, currentIndices, currentIndexMap, indices, i + 2, p2);\r\n            computeTriangleAttributes(\r\n                i0,\r\n                i1,\r\n                i2,\r\n                p2,\r\n                positions,\r\n                normals,\r\n                tangents,\r\n                bitangents,\r\n                texCoords,\r\n                extrudeDirections,\r\n                applyOffset,\r\n                currentAttributes,\r\n                customAttributeNames,\r\n                customAttributesLength,\r\n                attributes,\r\n                insertedIndex\r\n            );\r\n        }\r\n    }\r\n\r\n    updateInstanceAfterSplit(instance, westGeometry, eastGeometry);\r\n}\r\n\r\nvar xzPlane = Plane.fromPointNormal(Cartesian3.ZERO, Cartesian3.UNIT_Y);\r\n\r\nvar offsetScratch = new Cartesian3();\r\nvar offsetPointScratch = new Cartesian3();\r\n\r\nfunction computeLineAttributes(i0, i1, point, positions, insertIndex, currentAttributes, applyOffset) {\r\n    if (!defined(applyOffset)) {\r\n        return;\r\n    }\r\n\r\n    var p0 = Cartesian3.fromArray(positions, i0 * 3, p0Scratch);\r\n    if (Cartesian3.equalsEpsilon(p0, point, CesiumMath.EPSILON10)) {\r\n        currentAttributes.applyOffset.values[insertIndex] = applyOffset[i0];\r\n    } else {\r\n        currentAttributes.applyOffset.values[insertIndex] = applyOffset[i1];\r\n    }\r\n}\r\n\r\nfunction splitLongitudeLines(instance) {\r\n    var geometry = instance.geometry;\r\n    var attributes = geometry.attributes;\r\n    var positions = attributes.position.values;\r\n    var applyOffset = defined(attributes.applyOffset) ? attributes.applyOffset.values : undefined;\r\n    var indices = geometry.indices;\r\n\r\n    var eastGeometry = copyGeometryForSplit(geometry);\r\n    var westGeometry = copyGeometryForSplit(geometry);\r\n\r\n    var i;\r\n    var length = indices.length;\r\n\r\n    var westGeometryIndexMap = [];\r\n    westGeometryIndexMap.length = positions.length / 3;\r\n\r\n    var eastGeometryIndexMap = [];\r\n    eastGeometryIndexMap.length = positions.length / 3;\r\n\r\n    for (i = 0; i < westGeometryIndexMap.length; ++i) {\r\n        westGeometryIndexMap[i] = -1;\r\n        eastGeometryIndexMap[i] = -1;\r\n    }\r\n\r\n    for (i = 0; i < length; i += 2) {\r\n        var i0 = indices[i];\r\n        var i1 = indices[i + 1];\r\n\r\n        var p0 = Cartesian3.fromArray(positions, i0 * 3, p0Scratch);\r\n        var p1 = Cartesian3.fromArray(positions, i1 * 3, p1Scratch);\r\n        var insertIndex;\r\n\r\n        if (Math.abs(p0.y) < CesiumMath.EPSILON6) {\r\n            if (p0.y < 0.0) {\r\n                p0.y = -CesiumMath.EPSILON6;\r\n            } else {\r\n                p0.y = CesiumMath.EPSILON6;\r\n            }\r\n        }\r\n\r\n        if (Math.abs(p1.y) < CesiumMath.EPSILON6) {\r\n            if (p1.y < 0.0) {\r\n                p1.y = -CesiumMath.EPSILON6;\r\n            } else {\r\n                p1.y = CesiumMath.EPSILON6;\r\n            }\r\n        }\r\n\r\n        var p0Attributes = eastGeometry.attributes;\r\n        var p0Indices = eastGeometry.indices;\r\n        var p0IndexMap = eastGeometryIndexMap;\r\n        var p1Attributes = westGeometry.attributes;\r\n        var p1Indices = westGeometry.indices;\r\n        var p1IndexMap = westGeometryIndexMap;\r\n\r\n        var intersection = IntersectionTests.lineSegmentPlane(p0, p1, xzPlane, p2Scratch);\r\n        if (defined(intersection)) {\r\n            // move point on the xz-plane slightly away from the plane\r\n            var offset = Cartesian3.multiplyByScalar(Cartesian3.UNIT_Y, 5.0 * CesiumMath.EPSILON9, offsetScratch);\r\n            if (p0.y < 0.0) {\r\n                Cartesian3.negate(offset, offset);\r\n\r\n                p0Attributes = westGeometry.attributes;\r\n                p0Indices = westGeometry.indices;\r\n                p0IndexMap = westGeometryIndexMap;\r\n                p1Attributes = eastGeometry.attributes;\r\n                p1Indices = eastGeometry.indices;\r\n                p1IndexMap = eastGeometryIndexMap;\r\n            }\r\n\r\n            var offsetPoint = Cartesian3.add(intersection, offset, offsetPointScratch);\r\n\r\n            insertIndex = insertSplitPoint(p0Attributes, p0Indices, p0IndexMap, indices, i, p0);\r\n            computeLineAttributes(i0, i1, p0, positions, insertIndex, p0Attributes, applyOffset);\r\n\r\n            insertIndex = insertSplitPoint(p0Attributes, p0Indices, p0IndexMap, indices, -1, offsetPoint);\r\n            computeLineAttributes(i0, i1, offsetPoint, positions, insertIndex, p0Attributes, applyOffset);\r\n\r\n            Cartesian3.negate(offset, offset);\r\n            Cartesian3.add(intersection, offset, offsetPoint);\r\n            insertIndex = insertSplitPoint(p1Attributes, p1Indices, p1IndexMap, indices, -1, offsetPoint);\r\n            computeLineAttributes(i0, i1, offsetPoint, positions, insertIndex, p1Attributes, applyOffset);\r\n\r\n            insertIndex = insertSplitPoint(p1Attributes, p1Indices, p1IndexMap, indices, i + 1, p1);\r\n            computeLineAttributes(i0, i1, p1, positions, insertIndex, p1Attributes, applyOffset);\r\n        } else {\r\n            var currentAttributes;\r\n            var currentIndices;\r\n            var currentIndexMap;\r\n\r\n            if (p0.y < 0.0) {\r\n                currentAttributes = westGeometry.attributes;\r\n                currentIndices = westGeometry.indices;\r\n                currentIndexMap = westGeometryIndexMap;\r\n            } else {\r\n                currentAttributes = eastGeometry.attributes;\r\n                currentIndices = eastGeometry.indices;\r\n                currentIndexMap = eastGeometryIndexMap;\r\n            }\r\n\r\n            insertIndex = insertSplitPoint(currentAttributes, currentIndices, currentIndexMap, indices, i, p0);\r\n            computeLineAttributes(i0, i1, p0, positions, insertIndex, currentAttributes, applyOffset);\r\n\r\n            insertIndex = insertSplitPoint(currentAttributes, currentIndices, currentIndexMap, indices, i + 1, p1);\r\n            computeLineAttributes(i0, i1, p1, positions, insertIndex, currentAttributes, applyOffset);\r\n        }\r\n    }\r\n\r\n    updateInstanceAfterSplit(instance, westGeometry, eastGeometry);\r\n}\r\n\r\nvar cartesian2Scratch0 = new Cartesian2();\r\nvar cartesian2Scratch1 = new Cartesian2();\r\n\r\nvar cartesian3Scratch0 = new Cartesian3();\r\nvar cartesian3Scratch2 = new Cartesian3();\r\nvar cartesian3Scratch3 = new Cartesian3();\r\nvar cartesian3Scratch4 = new Cartesian3();\r\nvar cartesian3Scratch5 = new Cartesian3();\r\nvar cartesian3Scratch6 = new Cartesian3();\r\n\r\nvar cartesian4Scratch0 = new Cartesian4();\r\n\r\nfunction updateAdjacencyAfterSplit(geometry) {\r\n    var attributes = geometry.attributes;\r\n    var positions = attributes.position.values;\r\n    var prevPositions = attributes.prevPosition.values;\r\n    var nextPositions = attributes.nextPosition.values;\r\n\r\n    var length = positions.length;\r\n    for (var j = 0; j < length; j += 3) {\r\n        var position = Cartesian3.unpack(positions, j, cartesian3Scratch0);\r\n        if (position.x > 0.0) {\r\n            continue;\r\n        }\r\n\r\n        var prevPosition = Cartesian3.unpack(prevPositions, j, cartesian3Scratch2);\r\n        if ((position.y < 0.0 && prevPosition.y > 0.0) || (position.y > 0.0 && prevPosition.y < 0.0)) {\r\n            if (j - 3 > 0) {\r\n                prevPositions[j] = positions[j - 3];\r\n                prevPositions[j + 1] = positions[j - 2];\r\n                prevPositions[j + 2] = positions[j - 1];\r\n            } else {\r\n                Cartesian3.pack(position, prevPositions, j);\r\n            }\r\n        }\r\n\r\n        var nextPosition = Cartesian3.unpack(nextPositions, j, cartesian3Scratch3);\r\n        if ((position.y < 0.0 && nextPosition.y > 0.0) || (position.y > 0.0 && nextPosition.y < 0.0)) {\r\n            if (j + 3 < length) {\r\n                nextPositions[j] = positions[j + 3];\r\n                nextPositions[j + 1] = positions[j + 4];\r\n                nextPositions[j + 2] = positions[j + 5];\r\n            } else {\r\n                Cartesian3.pack(position, nextPositions, j);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar offsetScalar = 5.0 * CesiumMath.EPSILON9;\r\nvar coplanarOffset = CesiumMath.EPSILON6;\r\n\r\nfunction splitLongitudePolyline(instance) {\r\n    var geometry = instance.geometry;\r\n    var attributes = geometry.attributes;\r\n    var positions = attributes.position.values;\r\n    var prevPositions = attributes.prevPosition.values;\r\n    var nextPositions = attributes.nextPosition.values;\r\n    var expandAndWidths = attributes.expandAndWidth.values;\r\n\r\n    var texCoords = defined(attributes.st) ? attributes.st.values : undefined;\r\n    var colors = defined(attributes.color) ? attributes.color.values : undefined;\r\n\r\n    var eastGeometry = copyGeometryForSplit(geometry);\r\n    var westGeometry = copyGeometryForSplit(geometry);\r\n\r\n    var i;\r\n    var j;\r\n    var index;\r\n\r\n    var intersectionFound = false;\r\n\r\n    var length = positions.length / 3;\r\n    for (i = 0; i < length; i += 4) {\r\n        var i0 = i;\r\n        var i2 = i + 2;\r\n\r\n        var p0 = Cartesian3.fromArray(positions, i0 * 3, cartesian3Scratch0);\r\n        var p2 = Cartesian3.fromArray(positions, i2 * 3, cartesian3Scratch2);\r\n\r\n        // Offset points that are close to the 180 longitude and change the previous/next point\r\n        // to be the same offset point so it can be projected to 2D. There is special handling in the\r\n        // shader for when position == prevPosition || position == nextPosition.\r\n        if (Math.abs(p0.y) < coplanarOffset) {\r\n            p0.y = coplanarOffset * (p2.y < 0.0 ? -1.0 : 1.0);\r\n            positions[i * 3 + 1] = p0.y;\r\n            positions[(i + 1) * 3 + 1] = p0.y;\r\n\r\n            for (j = i0 * 3; j < i0 * 3 + 4 * 3; j += 3) {\r\n                prevPositions[j] = positions[i * 3];\r\n                prevPositions[j + 1] = positions[i * 3 + 1];\r\n                prevPositions[j + 2] = positions[i * 3 + 2];\r\n            }\r\n        }\r\n\r\n        // Do the same but for when the line crosses 180 longitude in the opposite direction.\r\n        if (Math.abs(p2.y) < coplanarOffset) {\r\n            p2.y = coplanarOffset * (p0.y < 0.0 ? -1.0 : 1.0);\r\n            positions[(i + 2) * 3 + 1] = p2.y;\r\n            positions[(i + 3) * 3 + 1] = p2.y;\r\n\r\n            for (j = i0 * 3; j < i0 * 3 + 4 * 3; j += 3) {\r\n                nextPositions[j] = positions[(i + 2) * 3];\r\n                nextPositions[j + 1] = positions[(i + 2) * 3 + 1];\r\n                nextPositions[j + 2] = positions[(i + 2) * 3 + 2];\r\n            }\r\n        }\r\n\r\n        var p0Attributes = eastGeometry.attributes;\r\n        var p0Indices = eastGeometry.indices;\r\n        var p2Attributes = westGeometry.attributes;\r\n        var p2Indices = westGeometry.indices;\r\n\r\n        var intersection = IntersectionTests.lineSegmentPlane(p0, p2, xzPlane, cartesian3Scratch4);\r\n        if (defined(intersection)) {\r\n            intersectionFound = true;\r\n\r\n            // move point on the xz-plane slightly away from the plane\r\n            var offset = Cartesian3.multiplyByScalar(Cartesian3.UNIT_Y, offsetScalar, cartesian3Scratch5);\r\n            if (p0.y < 0.0) {\r\n                Cartesian3.negate(offset, offset);\r\n                p0Attributes = westGeometry.attributes;\r\n                p0Indices = westGeometry.indices;\r\n                p2Attributes = eastGeometry.attributes;\r\n                p2Indices = eastGeometry.indices;\r\n            }\r\n\r\n            var offsetPoint = Cartesian3.add(intersection, offset, cartesian3Scratch6);\r\n            p0Attributes.position.values.push(p0.x, p0.y, p0.z, p0.x, p0.y, p0.z);\r\n            p0Attributes.position.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\r\n            p0Attributes.position.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\r\n\r\n            p0Attributes.prevPosition.values.push(prevPositions[i0 * 3], prevPositions[i0 * 3 + 1], prevPositions[i0 * 3 + 2]);\r\n            p0Attributes.prevPosition.values.push(prevPositions[i0 * 3 + 3], prevPositions[i0 * 3 + 4], prevPositions[i0 * 3 + 5]);\r\n            p0Attributes.prevPosition.values.push(p0.x, p0.y, p0.z, p0.x, p0.y, p0.z);\r\n\r\n            p0Attributes.nextPosition.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\r\n            p0Attributes.nextPosition.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\r\n            p0Attributes.nextPosition.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\r\n            p0Attributes.nextPosition.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\r\n\r\n            Cartesian3.negate(offset, offset);\r\n            Cartesian3.add(intersection, offset, offsetPoint);\r\n            p2Attributes.position.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\r\n            p2Attributes.position.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\r\n            p2Attributes.position.values.push(p2.x, p2.y, p2.z, p2.x, p2.y, p2.z);\r\n\r\n            p2Attributes.prevPosition.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\r\n            p2Attributes.prevPosition.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\r\n            p2Attributes.prevPosition.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\r\n            p2Attributes.prevPosition.values.push(offsetPoint.x, offsetPoint.y, offsetPoint.z);\r\n\r\n            p2Attributes.nextPosition.values.push(p2.x, p2.y, p2.z, p2.x, p2.y, p2.z);\r\n            p2Attributes.nextPosition.values.push(nextPositions[i2 * 3], nextPositions[i2 * 3 + 1], nextPositions[i2 * 3 + 2]);\r\n            p2Attributes.nextPosition.values.push(nextPositions[i2 * 3 + 3], nextPositions[i2 * 3 + 4], nextPositions[i2 * 3 + 5]);\r\n\r\n            var ew0 = Cartesian2.fromArray(expandAndWidths, i0 * 2, cartesian2Scratch0);\r\n            var width = Math.abs(ew0.y);\r\n\r\n            p0Attributes.expandAndWidth.values.push(-1, width, 1, width);\r\n            p0Attributes.expandAndWidth.values.push(-1, -width, 1, -width);\r\n            p2Attributes.expandAndWidth.values.push(-1, width, 1, width);\r\n            p2Attributes.expandAndWidth.values.push(-1, -width, 1, -width);\r\n\r\n            var t = Cartesian3.magnitudeSquared(Cartesian3.subtract(intersection, p0, cartesian3Scratch3));\r\n            t /= Cartesian3.magnitudeSquared(Cartesian3.subtract(p2, p0, cartesian3Scratch3));\r\n\r\n            if (defined(colors)) {\r\n                var c0 = Cartesian4.fromArray(colors, i0 * 4, cartesian4Scratch0);\r\n                var c2 = Cartesian4.fromArray(colors, i2 * 4, cartesian4Scratch0);\r\n\r\n                var r = CesiumMath.lerp(c0.x, c2.x, t);\r\n                var g = CesiumMath.lerp(c0.y, c2.y, t);\r\n                var b = CesiumMath.lerp(c0.z, c2.z, t);\r\n                var a = CesiumMath.lerp(c0.w, c2.w, t);\r\n\r\n                for (j = i0 * 4; j < i0 * 4 + 2 * 4; ++j) {\r\n                    p0Attributes.color.values.push(colors[j]);\r\n                }\r\n                p0Attributes.color.values.push(r, g, b, a);\r\n                p0Attributes.color.values.push(r, g, b, a);\r\n                p2Attributes.color.values.push(r, g, b, a);\r\n                p2Attributes.color.values.push(r, g, b, a);\r\n                for (j = i2 * 4; j < i2 * 4 + 2 * 4; ++j) {\r\n                    p2Attributes.color.values.push(colors[j]);\r\n                }\r\n            }\r\n\r\n            if (defined(texCoords)) {\r\n                var s0 = Cartesian2.fromArray(texCoords, i0 * 2, cartesian2Scratch0);\r\n                var s3 = Cartesian2.fromArray(texCoords, (i + 3) * 2, cartesian2Scratch1);\r\n\r\n                var sx = CesiumMath.lerp(s0.x, s3.x, t);\r\n\r\n                for (j = i0 * 2; j < i0 * 2 + 2 * 2; ++j) {\r\n                    p0Attributes.st.values.push(texCoords[j]);\r\n                }\r\n                p0Attributes.st.values.push(sx, s0.y);\r\n                p0Attributes.st.values.push(sx, s3.y);\r\n                p2Attributes.st.values.push(sx, s0.y);\r\n                p2Attributes.st.values.push(sx, s3.y);\r\n                for (j = i2 * 2; j < i2 * 2 + 2 * 2; ++j) {\r\n                    p2Attributes.st.values.push(texCoords[j]);\r\n                }\r\n            }\r\n\r\n            index = p0Attributes.position.values.length / 3 - 4;\r\n            p0Indices.push(index, index + 2, index + 1);\r\n            p0Indices.push(index + 1, index + 2, index + 3);\r\n\r\n            index = p2Attributes.position.values.length / 3 - 4;\r\n            p2Indices.push(index, index + 2, index + 1);\r\n            p2Indices.push(index + 1, index + 2, index + 3);\r\n        } else {\r\n            var currentAttributes;\r\n            var currentIndices;\r\n\r\n            if (p0.y < 0.0) {\r\n                currentAttributes = westGeometry.attributes;\r\n                currentIndices = westGeometry.indices;\r\n            } else {\r\n                currentAttributes = eastGeometry.attributes;\r\n                currentIndices = eastGeometry.indices;\r\n            }\r\n\r\n            currentAttributes.position.values.push(p0.x, p0.y, p0.z);\r\n            currentAttributes.position.values.push(p0.x, p0.y, p0.z);\r\n            currentAttributes.position.values.push(p2.x, p2.y, p2.z);\r\n            currentAttributes.position.values.push(p2.x, p2.y, p2.z);\r\n\r\n            for (j = i * 3; j < i * 3 + 4 * 3; ++j) {\r\n                currentAttributes.prevPosition.values.push(prevPositions[j]);\r\n                currentAttributes.nextPosition.values.push(nextPositions[j]);\r\n            }\r\n\r\n            for (j = i * 2; j < i * 2 + 4 * 2; ++j) {\r\n                currentAttributes.expandAndWidth.values.push(expandAndWidths[j]);\r\n                if (defined(texCoords)) {\r\n                    currentAttributes.st.values.push(texCoords[j]);\r\n                }\r\n            }\r\n\r\n            if (defined(colors)) {\r\n                for (j = i * 4; j < i * 4 + 4 * 4; ++j) {\r\n                    currentAttributes.color.values.push(colors[j]);\r\n                }\r\n            }\r\n\r\n            index = currentAttributes.position.values.length / 3 - 4;\r\n            currentIndices.push(index, index + 2, index + 1);\r\n            currentIndices.push(index + 1, index + 2, index + 3);\r\n        }\r\n    }\r\n\r\n    if (intersectionFound) {\r\n        updateAdjacencyAfterSplit(westGeometry);\r\n        updateAdjacencyAfterSplit(eastGeometry);\r\n    }\r\n\r\n    updateInstanceAfterSplit(instance, westGeometry, eastGeometry);\r\n}\r\n\r\n/**\r\n * Splits the instances's geometry, by introducing new vertices and indices,that\r\n * intersect the International Date Line and Prime Meridian so that no primitives cross longitude\r\n * -180/180 degrees.  This is not required for 3D drawing, but is required for\r\n * correcting drawing in 2D and Columbus view.\r\n *\r\n * @private\r\n *\r\n * @param {GeometryInstance} instance The instance to modify.\r\n * @returns {GeometryInstance} The modified <code>instance</code> argument, with it's geometry split at the International Date Line.\r\n *\r\n * @example\r\n * instance = Cesium.GeometryPipeline.splitLongitude(instance);\r\n */\r\nGeometryPipeline.splitLongitude = function (instance) {\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (!defined(instance)) {\r\n        throw new DeveloperError('instance is required.');\r\n    }\r\n    //>>includeEnd('debug');\r\n\r\n    var geometry = instance.geometry;\r\n    var boundingSphere = geometry.boundingSphere;\r\n    if (defined(boundingSphere)) {\r\n        var minX = boundingSphere.center.x - boundingSphere.radius;\r\n        if (minX > 0 || BoundingSphere.intersectPlane(boundingSphere, Plane.ORIGIN_ZX_PLANE) !== Intersect.INTERSECTING) {\r\n            return instance;\r\n        }\r\n    }\r\n\r\n    if (geometry.geometryType !== GeometryType.NONE) {\r\n        switch (geometry.geometryType) {\r\n            case GeometryType.POLYLINES:\r\n                splitLongitudePolyline(instance);\r\n                break;\r\n            case GeometryType.TRIANGLES:\r\n                splitLongitudeTriangles(instance);\r\n                break;\r\n            case GeometryType.LINES:\r\n                splitLongitudeLines(instance);\r\n                break;\r\n        }\r\n    } else {\r\n        indexPrimitive(geometry);\r\n        if (geometry.primitiveType === PrimitiveType.TRIANGLES) {\r\n            splitLongitudeTriangles(instance);\r\n        } else if (geometry.primitiveType === PrimitiveType.LINES) {\r\n            splitLongitudeLines(instance);\r\n        }\r\n    }\r\n\r\n    return instance;\r\n};\r\nexport default GeometryPipeline;\r\n"],"names":["Cartesian3","scratchCartesian2","scratchCartesian3","Check","defined","Cartesian2","CesiumMath","defaultValue","DeveloperError","IndexDatatype","PrimitiveType","BoundingSphere","Geometry","GeometryAttribute","ComponentDatatype","Cartographic","GeographicProjection","EncodedCartesian3","Matrix4","Matrix3","AttributeCompression","Cartesian4","Plane","IntersectionTests","Intersect","GeometryType"],"mappings":"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"}